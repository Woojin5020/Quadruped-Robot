
working test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e68  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08008030  08008030  00009030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008570  08008570  0000a0e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008570  08008570  00009570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008578  08008578  0000a0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008578  08008578  00009578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800857c  0800857c  0000957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08008580  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200000e0  08008660  0000a0e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08008660  0000a36c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000924c  00000000  00000000  0000a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001727  00000000  00000000  0001335c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00014a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c4  00000000  00000000  00015348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002174c  00000000  00000000  00015a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd3  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce3ae  00000000  00000000  00042f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001112d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  0011131c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00114204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000e0 	.word	0x200000e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008018 	.word	0x08008018

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000e4 	.word	0x200000e4
 8000204:	08008018 	.word	0x08008018

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <PCA9685_SetBit>:
//double _servo_offsets[12] = { 173, 95, 84, 2, 79.4, 94, 166, 103, 85, -10, 91, 83 };
double _val_list[12];
double _thetas[4][3];

void PCA9685_SetBit(I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4603      	mov	r3, r0
 8000ed0:	70fb      	strb	r3, [r7, #3]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	70bb      	strb	r3, [r7, #2]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	707b      	strb	r3, [r7, #1]
    uint8_t readValue;
    HAL_I2C_Mem_Read(hi2c, address, Register, 1, &readValue, 1, 10);
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	b299      	uxth	r1, r3
 8000ede:	78bb      	ldrb	r3, [r7, #2]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	f107 030f 	add.w	r3, r7, #15
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f002 fae0 	bl	80034b8 <HAL_I2C_Mem_Read>
    if (Value == 0) readValue &= ~(1 << Bit);
 8000ef8:	7e3b      	ldrb	r3, [r7, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10d      	bne.n	8000f1a <PCA9685_SetBit+0x5a>
 8000efe:	787b      	ldrb	r3, [r7, #1]
 8000f00:	2201      	movs	r2, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e00a      	b.n	8000f30 <PCA9685_SetBit+0x70>
    else readValue |= (1 << Bit);
 8000f1a:	787b      	ldrb	r3, [r7, #1]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, address, Register, 1, &readValue, 1, 10);
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	b299      	uxth	r1, r3
 8000f34:	78bb      	ldrb	r3, [r7, #2]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	230a      	movs	r3, #10
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f107 030f 	add.w	r3, r7, #15
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f002 f9bb 	bl	80032c4 <HAL_I2C_Mem_Write>
    //HAL_Delay(1);
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t frequency)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	803b      	strh	r3, [r7, #0]
    uint8_t prescale;
    if (frequency >= 1526) prescale = 0x03;
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d902      	bls.n	8000f78 <PCA9685_SetPWMFrequency+0x20>
 8000f72:	2303      	movs	r3, #3
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e00c      	b.n	8000f92 <PCA9685_SetPWMFrequency+0x3a>
    else if (frequency <= 24) prescale = 0xFF;
 8000f78:	883b      	ldrh	r3, [r7, #0]
 8000f7a:	2b18      	cmp	r3, #24
 8000f7c:	d802      	bhi.n	8000f84 <PCA9685_SetPWMFrequency+0x2c>
 8000f7e:	23ff      	movs	r3, #255	@ 0xff
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e006      	b.n	8000f92 <PCA9685_SetPWMFrequency+0x3a>
    else prescale = 25000000 / (4096 * frequency);
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	031b      	lsls	r3, r3, #12
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <PCA9685_SetPWMFrequency+0x90>)
 8000f8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	73fb      	strb	r3, [r7, #15]

    PCA9685_SetBit(hi2c, address, PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000f92:	78f9      	ldrb	r1, [r7, #3]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff8f 	bl	8000ec0 <PCA9685_SetBit>
    HAL_I2C_Mem_Write(hi2c, address, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 030f 	add.w	r3, r7, #15
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	22fe      	movs	r2, #254	@ 0xfe
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f002 f983 	bl	80032c4 <HAL_I2C_Mem_Write>
    PCA9685_SetBit(hi2c, address, PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000fbe:	78f9      	ldrb	r1, [r7, #3]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff79 	bl	8000ec0 <PCA9685_SetBit>
    PCA9685_SetBit(hi2c, address, PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000fce:	78f9      	ldrb	r1, [r7, #3]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff71 	bl	8000ec0 <PCA9685_SetBit>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	017d7840 	.word	0x017d7840

08000fec <PCA9685_Init>:

void PCA9685_Init(I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t frequency)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	803b      	strh	r3, [r7, #0]
    PCA9685_SetPWMFrequency(hi2c, address, frequency);
 8000ffc:	883a      	ldrh	r2, [r7, #0]
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa8 	bl	8000f58 <PCA9685_SetPWMFrequency>
    PCA9685_SetBit(hi2c, address, PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8001008:	78f9      	ldrb	r1, [r7, #3]
 800100a:	2301      	movs	r3, #1
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2305      	movs	r3, #5
 8001010:	2200      	movs	r2, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff54 	bl	8000ec0 <PCA9685_SetBit>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <PCA9685_SetPWM>:

void PCA9685_SetPWM(I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	4603      	mov	r3, r0
 8001030:	70fb      	strb	r3, [r7, #3]
 8001032:	460b      	mov	r3, r1
 8001034:	70bb      	strb	r3, [r7, #2]
 8001036:	4613      	mov	r3, r2
 8001038:	803b      	strh	r3, [r7, #0]
    uint8_t registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3306      	adds	r3, #6
 8001042:	73fb      	strb	r3, [r7, #15]
    uint8_t pwm[4];
    pwm[0] = OnTime & 0xFF;
 8001044:	883b      	ldrh	r3, [r7, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	723b      	strb	r3, [r7, #8]
    pwm[1] = OnTime >> 8;
 800104a:	883b      	ldrh	r3, [r7, #0]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	727b      	strb	r3, [r7, #9]
    pwm[2] = OffTime & 0xFF;
 8001054:	8b3b      	ldrh	r3, [r7, #24]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	72bb      	strb	r3, [r7, #10]
    pwm[3] = OffTime >> 8;
 800105a:	8b3b      	ldrh	r3, [r7, #24]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b29b      	uxth	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c, address, registerAddress, 1, pwm, 4, 10);
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	b299      	uxth	r1, r3
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b29a      	uxth	r2, r3
 800106c:	230a      	movs	r3, #10
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2304      	movs	r3, #4
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f002 f921 	bl	80032c4 <HAL_I2C_Mem_Write>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	0000      	movs	r0, r0
 800108c:	0000      	movs	r0, r0
	...

08001090 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t Channel, float Angle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	460b      	mov	r3, r1
 800109a:	ed87 0a01 	vstr	s0, [r7, #4]
 800109e:	72fb      	strb	r3, [r7, #11]
 80010a0:	4613      	mov	r3, r2
 80010a2:	72bb      	strb	r3, [r7, #10]
    float Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fa13 	bl	80004d0 <__aeabi_f2d>
 80010aa:	a31c      	add	r3, pc, #112	@ (adr r3, 800111c <PCA9685_SetServoAngle+0x8c>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fa66 	bl	8000580 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <PCA9685_SetServoAngle+0x88>)
 80010c2:	f7ff fb87 	bl	80007d4 <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a310      	add	r3, pc, #64	@ (adr r3, 8001110 <PCA9685_SetServoAngle+0x80>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff f89e 	bl	8000214 <__adddf3>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd26 	bl	8000b30 <__aeabi_d2f>
 80010e4:	4603      	mov	r3, r0
 80010e6:	617b      	str	r3, [r7, #20]
    PCA9685_SetPWM(hi2c, address, Channel, 0, (uint16_t)Value);
 80010e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f0:	ee17 3a90 	vmov	r3, s15
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	7aba      	ldrb	r2, [r7, #10]
 80010f8:	7af9      	ldrb	r1, [r7, #11]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2300      	movs	r3, #0
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff ff8e 	bl	8001020 <PCA9685_SetPWM>
}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	f3af 8000 	nop.w
 8001110:	9999999a 	.word	0x9999999a
 8001114:	40599999 	.word	0x40599999
 8001118:	40668000 	.word	0x40668000
 800111c:	00000000 	.word	0x00000000
 8001120:	40799800 	.word	0x40799800

08001124 <mat_mult_vec>:
            }
        }
    }
}

void mat_mult_vec(double result[4], double mat[4][4], double vec[4]) {
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 4; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e03e      	b.n	80011b4 <mat_mult_vec+0x90>
        result[i] = 0.0;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	18d1      	adds	r1, r2, r3
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < 4; j++) {
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	e02b      	b.n	80011a8 <mat_mult_vec+0x84>
            result[i] += mat[i][j] * vec[j];
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	e9d3 4500 	ldrd	r4, r5, [r3]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	441a      	add	r2, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa01 	bl	8000580 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	18d6      	adds	r6, r2, r3
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4620      	mov	r0, r4
 8001194:	4629      	mov	r1, r5
 8001196:	f7ff f83d 	bl	8000214 <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c6 2300 	strd	r2, r3, [r6]
        for (int j = 0; j < 4; j++) {
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	3301      	adds	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	ddd0      	ble.n	8001150 <mat_mult_vec+0x2c>
    for (int i = 0; i < 4; i++) {
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	ddbd      	ble.n	8001136 <mat_mult_vec+0x12>
        }
    }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c4:	0000      	movs	r0, r0
	...

080011c8 <calcLeg>:

void calcLeg(double t, double x, double y, double z, double result[4]) {
 80011c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011cc:	b0f8      	sub	sp, #480	@ 0x1e0
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	ed83 0b00 	vstr	d0, [r3]
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	ed03 1b02 	vstr	d1, [r3, #-8]
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	ed83 2b00 	vstr	d2, [r3]
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	ed03 3b02 	vstr	d3, [r3, #-8]
 80011f0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80011f4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80011f8:	6018      	str	r0, [r3, #0]
    double Sl = -30; //(-)10 Straight, (+)10 Back
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b8f      	ldr	r3, [pc, #572]	@ (800143c <calcLeg+0x274>)
 8001200:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
    double Sw = 0; //(-)5 Left, (+)5 Right
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
    double Sa = 0; //(-)3 Right Turn, (+)3 Left Turn
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    double Sh = 40; // 100
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b87      	ldr	r3, [pc, #540]	@ (8001440 <calcLeg+0x278>)
 8001222:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    double t0 = 000;
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    double t1 = 1200;
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b83      	ldr	r3, [pc, #524]	@ (8001444 <calcLeg+0x27c>)
 8001238:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    double t2 = 500;
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b81      	ldr	r3, [pc, #516]	@ (8001448 <calcLeg+0x280>)
 8001242:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
    double t3 = 100;
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b80      	ldr	r3, [pc, #512]	@ (800144c <calcLeg+0x284>)
 800124c:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178

    double startLp[4] = { x - Sl / 2.0, y, z - Sw, 1.0 };
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001258:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800125c:	f7ff faba 	bl	80007d4 <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	f107 0120 	add.w	r1, r7, #32
 8001268:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800126c:	f7fe ffd0 	bl	8000210 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4619      	mov	r1, r3
 800128a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 800128e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001292:	f7fe ffbd 	bl	8000210 <__aeabi_dsub>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001450 <calcLeg+0x288>)
 80012a4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
    double endY = 0;
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    double endLp[4] = { x + Sl / 2.0, y + endY, z + Sw, 1.0 };
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012bc:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 80012c0:	f7ff fa88 	bl	80007d4 <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80012d4:	f7fe ff9e 	bl	8000214 <__adddf3>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80012ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ee:	f7fe ff91 	bl	8000214 <__adddf3>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001304:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001308:	f7fe ff84 	bl	8000214 <__adddf3>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <calcLeg+0x288>)
 800131a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (t < t0) {
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4619      	mov	r1, r3
 8001324:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800132c:	f7ff fb9a 	bl	8000a64 <__aeabi_dcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d021      	beq.n	800137a <calcLeg+0x1b2>
        for (int i = 0; i < 4; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800133c:	e018      	b.n	8001370 <calcLeg+0x1a8>
            result[i] = startLp[i];
 800133e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8001348:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	18d1      	adds	r1, r2, r3
 8001350:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800135a:	443b      	add	r3, r7
 800135c:	3bb8      	subs	r3, #184	@ 0xb8
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 8001366:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800136a:	3301      	adds	r3, #1
 800136c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001370:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001374:	2b03      	cmp	r3, #3
 8001376:	dde2      	ble.n	800133e <calcLeg+0x176>

        for (int i = 0; i < 4; i++) {
            result[i] = curLp[i];
        }
    }
}
 8001378:	e33c      	b.n	80019f4 <calcLeg+0x82c>
    else if (t < t0 + t1) {
 800137a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800137e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001382:	f7fe ff47 	bl	8000214 <__adddf3>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	f107 0120 	add.w	r1, r7, #32
 800138e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001392:	f7ff fb67 	bl	8000a64 <__aeabi_dcmplt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 81eb 	beq.w	8001774 <calcLeg+0x5ac>
        double td = t - t0;
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4619      	mov	r1, r3
 80013a4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80013a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013ac:	f7fe ff30 	bl	8000210 <__aeabi_dsub>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
        double tp = 1.0 / (t1 / td);  // Python과 동일하게 계산
 80013b8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80013bc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80013c0:	f7ff fa08 	bl	80007d4 <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	f04f 0000 	mov.w	r0, #0
 80013cc:	4920      	ldr	r1, [pc, #128]	@ (8001450 <calcLeg+0x288>)
 80013ce:	f7ff fa01 	bl	80007d4 <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
        for (int i = 0; i < 4; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80013e0:	e024      	b.n	800142c <calcLeg+0x264>
            diffLp[i] = endLp[i] - startLp[i];
 80013e2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80013ec:	443b      	add	r3, r7
 80013ee:	3bd8      	subs	r3, #216	@ 0xd8
 80013f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80013fe:	443b      	add	r3, r7
 8001400:	3bb8      	subs	r3, #184	@ 0xb8
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7fe ff03 	bl	8000210 <__aeabi_dsub>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8001412:	f5a1 70dc 	sub.w	r0, r1, #440	@ 0x1b8
 8001416:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 800141a:	00c9      	lsls	r1, r1, #3
 800141c:	4401      	add	r1, r0
 800141e:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 8001422:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001426:	3301      	adds	r3, #1
 8001428:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800142c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001430:	2b03      	cmp	r3, #3
 8001432:	ddd6      	ble.n	80013e2 <calcLeg+0x21a>
        for (int i = 0; i < 4; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800143a:	e039      	b.n	80014b0 <calcLeg+0x2e8>
 800143c:	c03e0000 	.word	0xc03e0000
 8001440:	40440000 	.word	0x40440000
 8001444:	4092c000 	.word	0x4092c000
 8001448:	407f4000 	.word	0x407f4000
 800144c:	40590000 	.word	0x40590000
 8001450:	3ff00000 	.word	0x3ff00000
            curLp[i] = startLp[i] + diffLp[i] * tp;
 8001454:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800145e:	443b      	add	r3, r7
 8001460:	3bb8      	subs	r3, #184	@ 0xb8
 8001462:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001466:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800146a:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 800146e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800147e:	f7ff f87f 	bl	8000580 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4640      	mov	r0, r8
 8001488:	4649      	mov	r1, r9
 800148a:	f7fe fec3 	bl	8000214 <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8001496:	f5a1 70cc 	sub.w	r0, r1, #408	@ 0x198
 800149a:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 800149e:	00c9      	lsls	r1, r1, #3
 80014a0:	4401      	add	r1, r0
 80014a2:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 80014a6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80014aa:	3301      	adds	r3, #1
 80014ac:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80014b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	ddcd      	ble.n	8001454 <calcLeg+0x28c>
        double psi = -((M_PI / 180.0 * Sa) / 2.0) + (M_PI / 180.0 * Sa) * tp;
 80014b8:	a3f6      	add	r3, pc, #984	@ (adr r3, 8001894 <calcLeg+0x6cc>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80014c2:	f7ff f85d 	bl	8000580 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80014d2:	f7ff f855 	bl	8000580 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4690      	mov	r8, r2
 80014dc:	4699      	mov	r9, r3
 80014de:	a3ed      	add	r3, pc, #948	@ (adr r3, 8001894 <calcLeg+0x6cc>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80014e8:	f7ff f84a 	bl	8000580 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014fc:	f7ff f96a 	bl	80007d4 <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4640      	mov	r0, r8
 8001506:	4649      	mov	r1, r9
 8001508:	f7fe fe82 	bl	8000210 <__aeabi_dsub>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
            {cos(psi), 0.0, sin(psi), 0.0},
 8001514:	ed97 0b52 	vldr	d0, [r7, #328]	@ 0x148
 8001518:	f004 f872 	bl	8005600 <cos>
 800151c:	eeb0 7a40 	vmov.f32	s14, s0
 8001520:	eef0 7a60 	vmov.f32	s15, s1
        double Ry[4][4] = {
 8001524:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001528:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800152c:	ed83 7b00 	vstr	d7, [r3]
 8001530:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001534:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9c1 2302 	strd	r2, r3, [r1, #8]
            {cos(psi), 0.0, sin(psi), 0.0},
 8001544:	ed97 0b52 	vldr	d0, [r7, #328]	@ 0x148
 8001548:	f004 f8b6 	bl	80056b8 <sin>
 800154c:	eeb0 7a40 	vmov.f32	s14, s0
 8001550:	eef0 7a60 	vmov.f32	s15, s1
        double Ry[4][4] = {
 8001554:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001558:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800155c:	ed83 7b04 	vstr	d7, [r3, #16]
 8001560:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001564:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001574:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001578:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001588:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800158c:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4bbe      	ldr	r3, [pc, #760]	@ (8001890 <calcLeg+0x6c8>)
 8001596:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800159a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800159e:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 80015ae:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80015b2:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
            {-sin(psi), 0.0, cos(psi), 0.0},
 80015c2:	ed97 0b52 	vldr	d0, [r7, #328]	@ 0x148
 80015c6:	f004 f877 	bl	80056b8 <sin>
 80015ca:	ec53 2b10 	vmov	r2, r3, d0
 80015ce:	4614      	mov	r4, r2
 80015d0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
        double Ry[4][4] = {
 80015d4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80015d8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80015dc:	e9c3 4510 	strd	r4, r5, [r3, #64]	@ 0x40
 80015e0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80015e4:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
            {-sin(psi), 0.0, cos(psi), 0.0},
 80015f4:	ed97 0b52 	vldr	d0, [r7, #328]	@ 0x148
 80015f8:	f004 f802 	bl	8005600 <cos>
 80015fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001600:	eef0 7a60 	vmov.f32	s15, s1
        double Ry[4][4] = {
 8001604:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001608:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800160c:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
 8001610:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001614:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001624:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001628:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 8001638:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800163c:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
 800164c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001650:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
 8001660:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001664:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <calcLeg+0x6c8>)
 800166e:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        for (int i = 0; i < 4; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001678:	e055      	b.n	8001726 <calcLeg+0x55e>
            rotatedLp[i] = 0.0;
 800167a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800167e:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 8001682:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	18d1      	adds	r1, r2, r3
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9c1 2300 	strd	r2, r3, [r1]
            for (int j = 0; j < 4; j++) {
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800169c:	e03a      	b.n	8001714 <calcLeg+0x54c>
                rotatedLp[i] += Ry[i][j] * curLp[j];
 800169e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80016a2:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 80016a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016b2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80016b6:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80016ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016be:	0099      	lsls	r1, r3, #2
 80016c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80016c4:	440b      	add	r3, r1
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ce:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80016d2:	f5a3 72cc 	sub.w	r2, r3, #408	@ 0x198
 80016d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff4d 	bl	8000580 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fd91 	bl	8000214 <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 80016fa:	f5a1 70bc 	sub.w	r0, r1, #376	@ 0x178
 80016fe:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8001702:	00c9      	lsls	r1, r1, #3
 8001704:	4401      	add	r1, r0
 8001706:	e9c1 2300 	strd	r2, r3, [r1]
            for (int j = 0; j < 4; j++) {
 800170a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800170e:	3301      	adds	r3, #1
 8001710:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8001714:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001718:	2b03      	cmp	r3, #3
 800171a:	ddc0      	ble.n	800169e <calcLeg+0x4d6>
        for (int i = 0; i < 4; i++) {
 800171c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001720:	3301      	adds	r3, #1
 8001722:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001726:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800172a:	2b03      	cmp	r3, #3
 800172c:	dda5      	ble.n	800167a <calcLeg+0x4b2>
        for (int i = 0; i < 4; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001734:	e019      	b.n	800176a <calcLeg+0x5a2>
            result[i] = rotatedLp[i];
 8001736:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8001740:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	18d1      	adds	r1, r2, r3
 8001748:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800174c:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 8001750:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 8001760:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001764:	3301      	adds	r3, #1
 8001766:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800176a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800176e:	2b03      	cmp	r3, #3
 8001770:	dde1      	ble.n	8001736 <calcLeg+0x56e>
}
 8001772:	e13f      	b.n	80019f4 <calcLeg+0x82c>
    else if (t < t0 + t1 + t2) {
 8001774:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001778:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800177c:	f7fe fd4a 	bl	8000214 <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800178c:	f7fe fd42 	bl	8000214 <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	f107 0120 	add.w	r1, r7, #32
 8001798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800179c:	f7ff f962 	bl	8000a64 <__aeabi_dcmplt>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d021      	beq.n	80017ea <calcLeg+0x622>
        for (int i = 0; i < 4; i++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80017ac:	e018      	b.n	80017e0 <calcLeg+0x618>
            result[i] = endLp[i];
 80017ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 80017b8:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	18d1      	adds	r1, r2, r3
 80017c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80017ca:	443b      	add	r3, r7
 80017cc:	3bd8      	subs	r3, #216	@ 0xd8
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 80017d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80017da:	3301      	adds	r3, #1
 80017dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80017e0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	dde2      	ble.n	80017ae <calcLeg+0x5e6>
}
 80017e8:	e104      	b.n	80019f4 <calcLeg+0x82c>
    else if (t < t0 + t1 + t2 + t3) {
 80017ea:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80017ee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80017f2:	f7fe fd0f 	bl	8000214 <__adddf3>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001802:	f7fe fd07 	bl	8000214 <__adddf3>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001812:	f7fe fcff 	bl	8000214 <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f107 0120 	add.w	r1, r7, #32
 800181e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001822:	f7ff f91f 	bl	8000a64 <__aeabi_dcmplt>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d100      	bne.n	800182e <calcLeg+0x666>
}
 800182c:	e0e2      	b.n	80019f4 <calcLeg+0x82c>
        double td = t - (t0 + t1 + t2);
 800182e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001832:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001836:	f7fe fced 	bl	8000214 <__adddf3>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001846:	f7fe fce5 	bl	8000214 <__adddf3>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	f107 0120 	add.w	r1, r7, #32
 8001852:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001856:	f7fe fcdb 	bl	8000210 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
        double tp = 1.0 / (t3 / td);
 8001862:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8001866:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800186a:	f7fe ffb3 	bl	80007d4 <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	4906      	ldr	r1, [pc, #24]	@ (8001890 <calcLeg+0x6c8>)
 8001878:	f7fe ffac 	bl	80007d4 <__aeabi_ddiv>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
        for (int i = 0; i < 4; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800188a:	e02c      	b.n	80018e6 <calcLeg+0x71e>
 800188c:	f3af 8000 	nop.w
 8001890:	3ff00000 	.word	0x3ff00000
 8001894:	a2529d39 	.word	0xa2529d39
 8001898:	3f91df46 	.word	0x3f91df46
            diffLp[i] = startLp[i] - endLp[i];
 800189c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80018a6:	443b      	add	r3, r7
 80018a8:	3bb8      	subs	r3, #184	@ 0xb8
 80018aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80018b8:	443b      	add	r3, r7
 80018ba:	3bd8      	subs	r3, #216	@ 0xd8
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fca6 	bl	8000210 <__aeabi_dsub>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 80018cc:	f5a1 70bc 	sub.w	r0, r1, #376	@ 0x178
 80018d0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 80018d4:	00c9      	lsls	r1, r1, #3
 80018d6:	4401      	add	r1, r0
 80018d8:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 80018dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80018e0:	3301      	adds	r3, #1
 80018e2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80018e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	ddd6      	ble.n	800189c <calcLeg+0x6d4>
        for (int i = 0; i < 4; i++) {
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80018f4:	e02d      	b.n	8001952 <calcLeg+0x78a>
            curLp[i] = endLp[i] + diffLp[i] * tp;
 80018f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001900:	443b      	add	r3, r7
 8001902:	3bd8      	subs	r3, #216	@ 0xd8
 8001904:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001908:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800190c:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 8001910:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8001920:	f7fe fe2e 	bl	8000580 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7fe fc72 	bl	8000214 <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8001938:	f5a1 70ac 	sub.w	r0, r1, #344	@ 0x158
 800193c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8001940:	00c9      	lsls	r1, r1, #3
 8001942:	4401      	add	r1, r0
 8001944:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 8001948:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800194c:	3301      	adds	r3, #1
 800194e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001952:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001956:	2b03      	cmp	r3, #3
 8001958:	ddcd      	ble.n	80018f6 <calcLeg+0x72e>
        curLp[1] += Sh * sin(M_PI * tp);
 800195a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800195e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001962:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001966:	a326      	add	r3, pc, #152	@ (adr r3, 8001a00 <calcLeg+0x838>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8001970:	f7fe fe06 	bl	8000580 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	ec43 2b17 	vmov	d7, r2, r3
 800197c:	eeb0 0a47 	vmov.f32	s0, s14
 8001980:	eef0 0a67 	vmov.f32	s1, s15
 8001984:	f003 fe98 	bl	80056b8 <sin>
 8001988:	ec51 0b10 	vmov	r0, r1, d0
 800198c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001990:	f7fe fdf6 	bl	8000580 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7fe fc3a 	bl	8000214 <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 80019a8:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 80019ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (int i = 0; i < 4; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80019b6:	e019      	b.n	80019ec <calcLeg+0x824>
            result[i] = curLp[i];
 80019b8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 80019c2:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	18d1      	adds	r1, r2, r3
 80019ca:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80019ce:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80019d2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 4; i++) {
 80019e2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80019e6:	3301      	adds	r3, #1
 80019e8:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80019ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	dde1      	ble.n	80019b8 <calcLeg+0x7f0>
}
 80019f4:	bf00      	nop
 80019f6:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 80019fa:	46bd      	mov	sp, r7
 80019fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a00:	54442d18 	.word	0x54442d18
 8001a04:	400921fb 	.word	0x400921fb

08001a08 <normalize_mod>:

double normalize_mod(double value, double modulus) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a12:	ed87 1b00 	vstr	d1, [r7]
    double result = fmod(value, modulus);
 8001a16:	ed97 1b00 	vldr	d1, [r7]
 8001a1a:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a1e:	f003 fd25 	bl	800546c <fmod>
 8001a22:	ed87 0b04 	vstr	d0, [r7, #16]
    if (result < 0) {
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a32:	f7ff f817 	bl	8000a64 <__aeabi_dcmplt>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <normalize_mod+0x48>
        result += modulus;
 8001a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a44:	f7fe fbe6 	bl	8000214 <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
    return result;
 8001a50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a54:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a58:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5c:	eef0 0a67 	vmov.f32	s1, s15
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <positions>:

void positions(double t, double result[4][4]) {
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b0a8      	sub	sp, #160	@ 0xa0
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001a72:	60f8      	str	r0, [r7, #12]
    double spf = 87;
 8001a74:	a37d      	add	r3, pc, #500	@ (adr r3, 8001c6c <positions+0x204>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double spr = 77;
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b73      	ldr	r3, [pc, #460]	@ (8001c50 <positions+0x1e8>)
 8001a84:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double t0 = 000;
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double t1 = 1200;
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b6e      	ldr	r3, [pc, #440]	@ (8001c54 <positions+0x1ec>)
 8001a9a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    double t2 = 500;
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c58 <positions+0x1f0>)
 8001aa4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double t3 = 100;
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <positions+0x1f4>)
 8001aae:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Tt = (t0 + t1 + t2 + t3);
 8001ab2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001ab6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001aba:	f7fe fbab 	bl	8000214 <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001aca:	f7fe fba3 	bl	8000214 <__adddf3>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001ad6:	f7fe fb9d 	bl	8000214 <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    double Tt2 = Tt / 2;
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001aee:	f7fe fe71 	bl	80007d4 <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    double rd = 0; // rear delta - unused - maybe stupid
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    //double Tt4 = Tt / 4;
    double td = normalize_mod(t, Tt);   //front left
 8001b06:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8001b0a:	ed97 0b04 	vldr	d0, [r7, #16]
 8001b0e:	f7ff ff7b 	bl	8001a08 <normalize_mod>
 8001b12:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    double t2_mod = normalize_mod(t  + Tt2, Tt);   //front right
 8001b16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b1e:	f7fe fb79 	bl	8000214 <__adddf3>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	ec43 2b17 	vmov	d7, r2, r3
 8001b2a:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8001b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b32:	eef0 0a67 	vmov.f32	s1, s15
 8001b36:	f7ff ff67 	bl	8001a08 <normalize_mod>
 8001b3a:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
    double rtd = normalize_mod(t + rd, Tt);     //rear left
 8001b3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b46:	f7fe fb65 	bl	8000214 <__adddf3>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ec43 2b17 	vmov	d7, r2, r3
 8001b52:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8001b56:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5a:	eef0 0a67 	vmov.f32	s1, s15
 8001b5e:	f7ff ff53 	bl	8001a08 <normalize_mod>
 8001b62:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double rt2 = normalize_mod(t + Tt2 + rd, Tt);   //rear right
 8001b66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6e:	f7fe fb51 	bl	8000214 <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b7e:	f7fe fb49 	bl	8000214 <__adddf3>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	ec43 2b17 	vmov	d7, r2, r3
 8001b8a:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8001b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b92:	eef0 0a67 	vmov.f32	s1, s15
 8001b96:	f7ff ff37 	bl	8001a08 <normalize_mod>
 8001b9a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
    //double td = normalize_mod(t + Tt4 * 3, Tt);
    //double t2_mod = normalize_mod(t + Tt4 * 1, Tt);
    //double rtd = normalize_mod(t + Tt4 * 2, Tt);
    //double rt2 = normalize_mod(t, Tt);

    double Fx = 120;
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <positions+0x1f8>)
 8001ba4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double Rx = -50;
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <positions+0x1fc>)
 8001bae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double Fy = -100;
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <positions+0x200>)
 8001bb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double Ry = -100;
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <positions+0x200>)
 8001bc2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    calcLeg(td, Fx, Fy, spf, result[0]);
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	ed97 3b26 	vldr	d3, [r7, #152]	@ 0x98
 8001bcc:	ed97 2b08 	vldr	d2, [r7, #32]
 8001bd0:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001bd4:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001bd8:	f7ff faf6 	bl	80011c8 <calcLeg>
    calcLeg(t2_mod, Fx, Fy, -spf, result[1]);
 8001bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001be6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3320      	adds	r3, #32
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	ed97 3b00 	vldr	d3, [r7]
 8001bf6:	ed97 2b08 	vldr	d2, [r7, #32]
 8001bfa:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001bfe:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001c02:	f7ff fae1 	bl	80011c8 <calcLeg>
    calcLeg(rt2, Rx, Ry, spr, result[2]);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3340      	adds	r3, #64	@ 0x40
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	ed97 3b24 	vldr	d3, [r7, #144]	@ 0x90
 8001c10:	ed97 2b06 	vldr	d2, [r7, #24]
 8001c14:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8001c18:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001c1c:	f7ff fad4 	bl	80011c8 <calcLeg>
    calcLeg(rtd, Rx, Ry, -spr, result[3]);
 8001c20:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8001c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c28:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3360      	adds	r3, #96	@ 0x60
 8001c30:	4618      	mov	r0, r3
 8001c32:	ec45 4b13 	vmov	d3, r4, r5
 8001c36:	ed97 2b06 	vldr	d2, [r7, #24]
 8001c3a:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8001c3e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001c42:	f7ff fac1 	bl	80011c8 <calcLeg>
    //HAL_Delay(10);

}
 8001c46:	bf00      	nop
 8001c48:	37a0      	adds	r7, #160	@ 0xa0
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40534000 	.word	0x40534000
 8001c54:	4092c000 	.word	0x4092c000
 8001c58:	407f4000 	.word	0x407f4000
 8001c5c:	40590000 	.word	0x40590000
 8001c60:	405e0000 	.word	0x405e0000
 8001c64:	c0490000 	.word	0xc0490000
 8001c68:	c0590000 	.word	0xc0590000
 8001c6c:	00000000 	.word	0x00000000
 8001c70:	4055c000 	.word	0x4055c000
 8001c74:	00000000 	.word	0x00000000

08001c78 <legIK>:

void legIK(double point[4], double result[3]) {
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	ed2d 8b02 	vpush	{d8}
 8001c80:	b098      	sub	sp, #96	@ 0x60
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
    double x = point[0];
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double y = point[1];
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c98:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double z = point[2];
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ca2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double theta1;
    double theta2;
    double theta3;
    double D;

    F = sqrt(fmax(0.0, pow(x, 2) + pow(y, 2) - pow(l1, 2)));
 8001ca6:	ed9f 1bca 	vldr	d1, [pc, #808]	@ 8001fd0 <legIK+0x358>
 8001caa:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001cae:	f003 fc0b 	bl	80054c8 <pow>
 8001cb2:	ec59 8b10 	vmov	r8, r9, d0
 8001cb6:	ed9f 1bc6 	vldr	d1, [pc, #792]	@ 8001fd0 <legIK+0x358>
 8001cba:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001cbe:	f003 fc03 	bl	80054c8 <pow>
 8001cc2:	ec53 2b10 	vmov	r2, r3, d0
 8001cc6:	4640      	mov	r0, r8
 8001cc8:	4649      	mov	r1, r9
 8001cca:	f7fe faa3 	bl	8000214 <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4690      	mov	r8, r2
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	4bc4      	ldr	r3, [pc, #784]	@ (8001fe8 <legIK+0x370>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbe6 	bl	80004ac <__aeabi_i2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	ed9f 1bba 	vldr	d1, [pc, #744]	@ 8001fd0 <legIK+0x358>
 8001ce8:	ec43 2b10 	vmov	d0, r2, r3
 8001cec:	f003 fbec 	bl	80054c8 <pow>
 8001cf0:	ec53 2b10 	vmov	r2, r3, d0
 8001cf4:	4640      	mov	r0, r8
 8001cf6:	4649      	mov	r1, r9
 8001cf8:	f7fe fa8a 	bl	8000210 <__aeabi_dsub>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	ec43 2b17 	vmov	d7, r2, r3
 8001d04:	ed9f 1bb4 	vldr	d1, [pc, #720]	@ 8001fd8 <legIK+0x360>
 8001d08:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0c:	eef0 0a67 	vmov.f32	s1, s15
 8001d10:	f003 fd3a 	bl	8005788 <fmax>
 8001d14:	eeb0 7a40 	vmov.f32	s14, s0
 8001d18:	eef0 7a60 	vmov.f32	s15, s1
 8001d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d20:	eef0 0a67 	vmov.f32	s1, s15
 8001d24:	f003 fc40 	bl	80055a8 <sqrt>
 8001d28:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    G = F - l2;
 8001d2c:	4baf      	ldr	r3, [pc, #700]	@ (8001fec <legIK+0x374>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fbbb 	bl	80004ac <__aeabi_i2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001d3e:	f7fe fa67 	bl	8000210 <__aeabi_dsub>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    H = sqrt(pow(G, 2) + pow(z, 2));
 8001d4a:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 8001fd0 <legIK+0x358>
 8001d4e:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001d52:	f003 fbb9 	bl	80054c8 <pow>
 8001d56:	ec59 8b10 	vmov	r8, r9, d0
 8001d5a:	ed9f 1b9d 	vldr	d1, [pc, #628]	@ 8001fd0 <legIK+0x358>
 8001d5e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001d62:	f003 fbb1 	bl	80054c8 <pow>
 8001d66:	ec53 2b10 	vmov	r2, r3, d0
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	f7fe fa51 	bl	8000214 <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	ec43 2b17 	vmov	d7, r2, r3
 8001d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d7e:	eef0 0a67 	vmov.f32	s1, s15
 8001d82:	f003 fc11 	bl	80055a8 <sqrt>
 8001d86:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

    double epsilon = 1e-6;
 8001d8a:	a395      	add	r3, pc, #596	@ (adr r3, 8001fe0 <legIK+0x368>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	e9c7 2308 	strd	r2, r3, [r7, #32]
    theta1 = -atan2(y + epsilon, x + epsilon) - atan2(F, -l1 + epsilon);
 8001d94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d98:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d9c:	f7fe fa3a 	bl	8000214 <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	ec43 2b18 	vmov	d8, r2, r3
 8001da8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001db0:	f7fe fa30 	bl	8000214 <__adddf3>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	ec43 2b17 	vmov	d7, r2, r3
 8001dbc:	eeb0 1a47 	vmov.f32	s2, s14
 8001dc0:	eef0 1a67 	vmov.f32	s3, s15
 8001dc4:	eeb0 0a48 	vmov.f32	s0, s16
 8001dc8:	eef0 0a68 	vmov.f32	s1, s17
 8001dcc:	f003 fb4c 	bl	8005468 <atan2>
 8001dd0:	ec53 2b10 	vmov	r2, r3, d0
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001dda:	4b83      	ldr	r3, [pc, #524]	@ (8001fe8 <legIK+0x370>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	425b      	negs	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb63 	bl	80004ac <__aeabi_i2d>
 8001de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dea:	f7fe fa13 	bl	8000214 <__adddf3>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	ec43 2b17 	vmov	d7, r2, r3
 8001df6:	eeb0 1a47 	vmov.f32	s2, s14
 8001dfa:	eef0 1a67 	vmov.f32	s3, s15
 8001dfe:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001e02:	f003 fb31 	bl	8005468 <atan2>
 8001e06:	ec53 2b10 	vmov	r2, r3, d0
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7fe f9ff 	bl	8000210 <__aeabi_dsub>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c7 2306 	strd	r2, r3, [r7, #24]

    D = (pow(H, 2) - pow(l3, 2) - pow(l4, 2)) / (2 * l3 * l4);
 8001e1a:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8001fd0 <legIK+0x358>
 8001e1e:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001e22:	f003 fb51 	bl	80054c8 <pow>
 8001e26:	ec55 4b10 	vmov	r4, r5, d0
 8001e2a:	4b71      	ldr	r3, [pc, #452]	@ (8001ff0 <legIK+0x378>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb3c 	bl	80004ac <__aeabi_i2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	ed9f 1b65 	vldr	d1, [pc, #404]	@ 8001fd0 <legIK+0x358>
 8001e3c:	ec43 2b10 	vmov	d0, r2, r3
 8001e40:	f003 fb42 	bl	80054c8 <pow>
 8001e44:	ec53 2b10 	vmov	r2, r3, d0
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe f9e0 	bl	8000210 <__aeabi_dsub>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4614      	mov	r4, r2
 8001e56:	461d      	mov	r5, r3
 8001e58:	4b66      	ldr	r3, [pc, #408]	@ (8001ff4 <legIK+0x37c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb25 	bl	80004ac <__aeabi_i2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	ed9f 1b5a 	vldr	d1, [pc, #360]	@ 8001fd0 <legIK+0x358>
 8001e6a:	ec43 2b10 	vmov	d0, r2, r3
 8001e6e:	f003 fb2b 	bl	80054c8 <pow>
 8001e72:	ec53 2b10 	vmov	r2, r3, d0
 8001e76:	4620      	mov	r0, r4
 8001e78:	4629      	mov	r1, r5
 8001e7a:	f7fe f9c9 	bl	8000210 <__aeabi_dsub>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	461d      	mov	r5, r3
 8001e86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff0 <legIK+0x378>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff4 <legIK+0x37c>)
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb09 	bl	80004ac <__aeabi_i2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fc97 	bl	80007d4 <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (D < -1.0 || D > 1.0) {
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b51      	ldr	r3, [pc, #324]	@ (8001ff8 <legIK+0x380>)
 8001eb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eb8:	f7fe fdd4 	bl	8000a64 <__aeabi_dcmplt>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <legIK+0x25e>
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <legIK+0x384>)
 8001ec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ecc:	f7fe fde8 	bl	8000aa0 <__aeabi_dcmpgt>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <legIK+0x26c>
        theta3 = 0;
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001ee2:	e005      	b.n	8001ef0 <legIK+0x278>
    }
    else {
        theta3 = acos(D);
 8001ee4:	ed97 0b04 	vldr	d0, [r7, #16]
 8001ee8:	f003 fa8a 	bl	8005400 <acos>
 8001eec:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
    }

    theta2 = atan2(z, G) - atan2(l4 * sin(theta3), l3 + l4 * cos(theta3));
 8001ef0:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001ef4:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001ef8:	f003 fab6 	bl	8005468 <atan2>
 8001efc:	ec5b ab10 	vmov	sl, fp, d0
 8001f00:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff4 <legIK+0x37c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fad1 	bl	80004ac <__aeabi_i2d>
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	460d      	mov	r5, r1
 8001f0e:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8001f12:	f003 fbd1 	bl	80056b8 <sin>
 8001f16:	ec53 2b10 	vmov	r2, r3, d0
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	f7fe fb2f 	bl	8000580 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ec43 2b18 	vmov	d8, r2, r3
 8001f2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <legIK+0x378>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fabc 	bl	80004ac <__aeabi_i2d>
 8001f34:	4604      	mov	r4, r0
 8001f36:	460d      	mov	r5, r1
 8001f38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <legIK+0x37c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fab5 	bl	80004ac <__aeabi_i2d>
 8001f42:	4680      	mov	r8, r0
 8001f44:	4689      	mov	r9, r1
 8001f46:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8001f4a:	f003 fb59 	bl	8005600 <cos>
 8001f4e:	ec53 2b10 	vmov	r2, r3, d0
 8001f52:	4640      	mov	r0, r8
 8001f54:	4649      	mov	r1, r9
 8001f56:	f7fe fb13 	bl	8000580 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe f957 	bl	8000214 <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	ec43 2b17 	vmov	d7, r2, r3
 8001f6e:	eeb0 1a47 	vmov.f32	s2, s14
 8001f72:	eef0 1a67 	vmov.f32	s3, s15
 8001f76:	eeb0 0a48 	vmov.f32	s0, s16
 8001f7a:	eef0 0a68 	vmov.f32	s1, s17
 8001f7e:	f003 fa73 	bl	8005468 <atan2>
 8001f82:	ec53 2b10 	vmov	r2, r3, d0
 8001f86:	4650      	mov	r0, sl
 8001f88:	4659      	mov	r1, fp
 8001f8a:	f7fe f941 	bl	8000210 <__aeabi_dsub>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	e9c7 2302 	strd	r2, r3, [r7, #8]

    result[0] = theta1;
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9c:	e9c1 2300 	strd	r2, r3, [r1]
    result[1] = theta2;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f103 0108 	add.w	r1, r3, #8
 8001fa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001faa:	e9c1 2300 	strd	r2, r3, [r1]
    result[2] = theta3;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f103 0110 	add.w	r1, r3, #16
 8001fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fb8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001fbc:	bf00      	nop
 8001fbe:	3760      	adds	r7, #96	@ 0x60
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	ecbd 8b02 	vpop	{d8}
 8001fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40000000 	.word	0x40000000
	...
 8001fe0:	a0b5ed8d 	.word	0xa0b5ed8d
 8001fe4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	bff00000 	.word	0xbff00000
 8001ffc:	3ff00000 	.word	0x3ff00000

08002000 <calcIK>:
    mat_mult(result[1], Tm, leg2);
    mat_mult(result[2], Tm, leg3);
    mat_mult(result[3], Tm, leg4);
}

void calcIK(double Lp[4][4], double angles[3], double center[3], double result[4][3]) {
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8002006:	af00      	add	r7, sp, #0
 8002008:	f507 743e 	add.w	r4, r7, #760	@ 0x2f8
 800200c:	f5a4 743b 	sub.w	r4, r4, #748	@ 0x2ec
 8002010:	6020      	str	r0, [r4, #0]
 8002012:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8002016:	f5a0 703c 	sub.w	r0, r0, #752	@ 0x2f0
 800201a:	6001      	str	r1, [r0, #0]
 800201c:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 8002020:	f5a1 713d 	sub.w	r1, r1, #756	@ 0x2f4
 8002024:	600a      	str	r2, [r1, #0]
 8002026:	f507 723e 	add.w	r2, r7, #760	@ 0x2f8
 800202a:	f5a2 723e 	sub.w	r2, r2, #760	@ 0x2f8
 800202e:	6013      	str	r3, [r2, #0]
    //double phi = angles[1];
    //double psi = angles[2];
    //double xm = center[0];
    //double ym = center[1];
    //double zm = center[2];
    double Ix[4][4] = {
 8002030:	4a97      	ldr	r2, [pc, #604]	@ (8002290 <calcIK+0x290>)
 8002032:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002036:	4611      	mov	r1, r2
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	4618      	mov	r0, r3
 800203c:	f003 f9d2 	bl	80053e4 <memcpy>
        {0, 0, 1, 0},
        {0, 0, 0, 1}
    };

    // Precomputed inverses
    double inv_Tlf[4][4] = {
 8002040:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002044:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002048:	4a92      	ldr	r2, [pc, #584]	@ (8002294 <calcIK+0x294>)
 800204a:	4618      	mov	r0, r3
 800204c:	4611      	mov	r1, r2
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	461a      	mov	r2, r3
 8002052:	f003 f9c7 	bl	80053e4 <memcpy>
            { 0.000000e+00,  1.000000e+00,  0.000000e+00, -5.000000e+01 }, //height  == Tlf[1][3], all change
            { 1.000000e+00,  0.000000e+00,  6.123234e-17, -1.200000e+02 },
            { 0.000000e+00,  0.000000e+00,  0.000000e+00,  1.000000e+00 }
        };

        double inv_Trf[4][4] = {
 8002056:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800205a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800205e:	4a8e      	ldr	r2, [pc, #568]	@ (8002298 <calcIK+0x298>)
 8002060:	4618      	mov	r0, r3
 8002062:	4611      	mov	r1, r2
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	461a      	mov	r2, r3
 8002068:	f003 f9bc 	bl	80053e4 <memcpy>
            { 0.000000e+00,  1.000000e+00,  0.000000e+00, -5.000000e+01 },
            { 1.000000e+00,  0.000000e+00,  6.123234e-17, -1.200000e+02 },
            { 0.000000e+00,  0.000000e+00,  0.000000e+00,  1.000000e+00 }
        };

        double inv_Tlb[4][4] = {
 800206c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002070:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002074:	4a89      	ldr	r2, [pc, #548]	@ (800229c <calcIK+0x29c>)
 8002076:	4618      	mov	r0, r3
 8002078:	4611      	mov	r1, r2
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	461a      	mov	r2, r3
 800207e:	f003 f9b1 	bl	80053e4 <memcpy>
            { 0.000000e+00,  1.000000e+00,  0.000000e+00, -5.000000e+01 },
            { 1.000000e+00,  0.000000e+00,  6.123234e-17,  2.000000e+01 },
            { 0.000000e+00,  0.000000e+00,  0.000000e+00,  1.000000e+00 }
        };

        double inv_Trb[4][4] = {
 8002082:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002086:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800208a:	4a85      	ldr	r2, [pc, #532]	@ (80022a0 <calcIK+0x2a0>)
 800208c:	4618      	mov	r0, r3
 800208e:	4611      	mov	r1, r2
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	461a      	mov	r2, r3
 8002094:	f003 f9a6 	bl	80053e4 <memcpy>

    double Lp_tmp[4];
    double Lp2_tmp[4];
    double ik_result[3];
    // Tlf
    mat_mult_vec(Lp_tmp, inv_Tlf, Lp[0]);
 8002098:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800209c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80020a0:	f507 71f4 	add.w	r1, r7, #488	@ 0x1e8
 80020a4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	f7ff f83b 	bl	8001124 <mat_mult_vec>

    legIK(Lp_tmp, ik_result);
 80020ae:	f107 0210 	add.w	r2, r7, #16
 80020b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fddd 	bl	8001c78 <legIK>
    for (int i = 0; i < 3; i++) {
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80020c4:	e019      	b.n	80020fa <calcIK+0xfa>
        result[0][i] = ik_result[i];
 80020c6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80020ca:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 80020ce:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 80020de:	f5a1 713e 	sub.w	r1, r1, #760	@ 0x2f8
 80020e2:	6808      	ldr	r0, [r1, #0]
 80020e4:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 80020e8:	00c9      	lsls	r1, r1, #3
 80020ea:	4401      	add	r1, r0
 80020ec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 3; i++) {
 80020f0:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80020f4:	3301      	adds	r3, #1
 80020f6:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80020fa:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80020fe:	2b02      	cmp	r3, #2
 8002100:	dde1      	ble.n	80020c6 <calcIK+0xc6>
    }

    // Trf
    mat_mult_vec(Lp2_tmp, inv_Trf, Lp[1]);
 8002102:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002106:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f103 0220 	add.w	r2, r3, #32
 8002110:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8002114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f803 	bl	8001124 <mat_mult_vec>
    mat_mult_vec(Lp_tmp, Ix, Lp2_tmp);
 800211e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002122:	f507 711a 	add.w	r1, r7, #616	@ 0x268
 8002126:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fffa 	bl	8001124 <mat_mult_vec>
    legIK(Lp_tmp, ik_result);
 8002130:	f107 0210 	add.w	r2, r7, #16
 8002134:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fd9c 	bl	8001c78 <legIK>
    for (int i = 0; i < 3; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8002146:	e01b      	b.n	8002180 <calcIK+0x180>
        result[1][i] = ik_result[i];
 8002148:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800214c:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f103 0018 	add.w	r0, r3, #24
 8002156:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800215a:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 800215e:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 800216e:	00c9      	lsls	r1, r1, #3
 8002170:	4401      	add	r1, r0
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 3; i++) {
 8002176:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800217a:	3301      	adds	r3, #1
 800217c:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8002180:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002184:	2b02      	cmp	r3, #2
 8002186:	dddf      	ble.n	8002148 <calcIK+0x148>
    }

    // Tlb
    mat_mult_vec(Lp_tmp, inv_Tlb, Lp[2]);
 8002188:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800218c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002196:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800219a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe ffc0 	bl	8001124 <mat_mult_vec>
    legIK(Lp_tmp, ik_result);
 80021a4:	f107 0210 	add.w	r2, r7, #16
 80021a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fd62 	bl	8001c78 <legIK>
    for (int i = 0; i < 3; i++) {
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80021ba:	e01b      	b.n	80021f4 <calcIK+0x1f4>
        result[2][i] = ik_result[i];
 80021bc:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80021c0:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80021ca:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80021ce:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 80021d2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f8d7 12ec 	ldr.w	r1, [r7, #748]	@ 0x2ec
 80021e2:	00c9      	lsls	r1, r1, #3
 80021e4:	4401      	add	r1, r0
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 3; i++) {
 80021ea:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80021ee:	3301      	adds	r3, #1
 80021f0:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80021f4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	dddf      	ble.n	80021bc <calcIK+0x1bc>
    }

    // Trb
    mat_mult_vec(Lp2_tmp, inv_Trb, Lp[3]);
 80021fc:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002200:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800220a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800220e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe ff86 	bl	8001124 <mat_mult_vec>
    mat_mult_vec(Lp_tmp, Ix, Lp2_tmp);  // Ix
 8002218:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800221c:	f507 711a 	add.w	r1, r7, #616	@ 0x268
 8002220:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe ff7d 	bl	8001124 <mat_mult_vec>
    legIK(Lp_tmp, ik_result);
 800222a:	f107 0210 	add.w	r2, r7, #16
 800222e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fd1f 	bl	8001c78 <legIK>
    for (int i = 0; i < 3; i++) {
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8002240:	e01b      	b.n	800227a <calcIK+0x27a>
        result[3][i] = ik_result[i];
 8002242:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002246:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8002250:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002254:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 8002258:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8002268:	00c9      	lsls	r1, r1, #3
 800226a:	4401      	add	r1, r0
 800226c:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 3; i++) {
 8002270:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8002274:	3301      	adds	r3, #1
 8002276:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 800227a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800227e:	2b02      	cmp	r3, #2
 8002280:	dddf      	ble.n	8002242 <calcIK+0x242>
    }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 800228a:	46bd      	mov	sp, r7
 800228c:	bd90      	pop	{r4, r7, pc}
 800228e:	bf00      	nop
 8002290:	08008030 	.word	0x08008030
 8002294:	080080b0 	.word	0x080080b0
 8002298:	08008130 	.word	0x08008130
 800229c:	080081b0 	.word	0x080081b0
 80022a0:	08008230 	.word	0x08008230
 80022a4:	00000000 	.word	0x00000000

080022a8 <getDegreeAngles>:

void getDegreeAngles(double La[4][3], double thetas[4][3]) {
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e046      	b.n	8002346 <getDegreeAngles+0x9e>
        for (int j = 0; j < 3; j++) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	e03d      	b.n	800233a <getDegreeAngles+0x92>
            La[i][j] *= 180.0 / M_PI;
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	441a      	add	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	189c      	adds	r4, r3, r2
 80022e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8002358 <getDegreeAngles+0xb0>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f947 	bl	8000580 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	00c9      	lsls	r1, r1, #3
 80022fa:	4421      	add	r1, r4
 80022fc:	e9c1 2300 	strd	r2, r3, [r1]
            thetas[i][j] = (double)La[i][j];
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	461a      	mov	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1899      	adds	r1, r3, r2
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	461a      	mov	r2, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	1898      	adds	r0, r3, r2
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	00c9      	lsls	r1, r1, #3
 800232e:	4401      	add	r1, r0
 8002330:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < 3; j++) {
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3301      	adds	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b02      	cmp	r3, #2
 800233e:	ddbe      	ble.n	80022be <getDegreeAngles+0x16>
    for (int i = 0; i < 4; i++) {
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b03      	cmp	r3, #3
 800234a:	ddb5      	ble.n	80022b8 <getDegreeAngles+0x10>
        }
    }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop
 8002358:	1a63c1f8 	.word	0x1a63c1f8
 800235c:	404ca5dc 	.word	0x404ca5dc

08002360 <angleToServo>:

void angleToServo(double La[4][3]) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    getDegreeAngles((double(*)[3])La, _thetas);
 8002368:	4951      	ldr	r1, [pc, #324]	@ (80024b0 <angleToServo+0x150>)
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff9c 	bl	80022a8 <getDegreeAngles>

    // FL Lower
    _val_list[0] = _servo_offsets[0] - _thetas[0][2];
 8002370:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <angleToServo+0x154>)
 8002372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002376:	4b4e      	ldr	r3, [pc, #312]	@ (80024b0 <angleToServo+0x150>)
 8002378:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800237c:	f7fd ff48 	bl	8000210 <__aeabi_dsub>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	494c      	ldr	r1, [pc, #304]	@ (80024b8 <angleToServo+0x158>)
 8002386:	e9c1 2300 	strd	r2, r3, [r1]
    // FL Upper
    _val_list[1] = _servo_offsets[1] - _thetas[0][1];
 800238a:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <angleToServo+0x154>)
 800238c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002390:	4b47      	ldr	r3, [pc, #284]	@ (80024b0 <angleToServo+0x150>)
 8002392:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002396:	f7fd ff3b 	bl	8000210 <__aeabi_dsub>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4946      	ldr	r1, [pc, #280]	@ (80024b8 <angleToServo+0x158>)
 80023a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    // FL Shoulder
    _val_list[2] = _servo_offsets[2] + _thetas[0][0];
 80023a4:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <angleToServo+0x154>)
 80023a6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023aa:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <angleToServo+0x150>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fd ff30 	bl	8000214 <__adddf3>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	493f      	ldr	r1, [pc, #252]	@ (80024b8 <angleToServo+0x158>)
 80023ba:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // FR Lower
    _val_list[3] = _servo_offsets[3] + _thetas[1][2];
 80023be:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <angleToServo+0x154>)
 80023c0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80023c4:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <angleToServo+0x150>)
 80023c6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80023ca:	f7fd ff23 	bl	8000214 <__adddf3>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4939      	ldr	r1, [pc, #228]	@ (80024b8 <angleToServo+0x158>)
 80023d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    // FR Upper
    _val_list[4] = _servo_offsets[4] + _thetas[1][1];
 80023d8:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <angleToServo+0x154>)
 80023da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80023de:	4b34      	ldr	r3, [pc, #208]	@ (80024b0 <angleToServo+0x150>)
 80023e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023e4:	f7fd ff16 	bl	8000214 <__adddf3>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4932      	ldr	r1, [pc, #200]	@ (80024b8 <angleToServo+0x158>)
 80023ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
    // FR Shoulder
    _val_list[5] = _servo_offsets[5] - _thetas[1][0];
 80023f2:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <angleToServo+0x154>)
 80023f4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <angleToServo+0x150>)
 80023fa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023fe:	f7fd ff07 	bl	8000210 <__aeabi_dsub>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	492c      	ldr	r1, [pc, #176]	@ (80024b8 <angleToServo+0x158>)
 8002408:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // BL Lower
    _val_list[6] = _servo_offsets[6] - _thetas[2][2];
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <angleToServo+0x154>)
 800240e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002412:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <angleToServo+0x150>)
 8002414:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002418:	f7fd fefa 	bl	8000210 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4925      	ldr	r1, [pc, #148]	@ (80024b8 <angleToServo+0x158>)
 8002422:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    // BL Upper
    _val_list[7] = _servo_offsets[7] - _thetas[2][1];
 8002426:	4b23      	ldr	r3, [pc, #140]	@ (80024b4 <angleToServo+0x154>)
 8002428:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800242c:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <angleToServo+0x150>)
 800242e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002432:	f7fd feed 	bl	8000210 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	491f      	ldr	r1, [pc, #124]	@ (80024b8 <angleToServo+0x158>)
 800243c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    // BL Shoulder
    _val_list[8] = _servo_offsets[8] - _thetas[2][0];
 8002440:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <angleToServo+0x154>)
 8002442:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002446:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <angleToServo+0x150>)
 8002448:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800244c:	f7fd fee0 	bl	8000210 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4918      	ldr	r1, [pc, #96]	@ (80024b8 <angleToServo+0x158>)
 8002456:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // BR Lower
    _val_list[9] = _servo_offsets[9] + _thetas[3][2];
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <angleToServo+0x154>)
 800245c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <angleToServo+0x150>)
 8002462:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002466:	f7fd fed5 	bl	8000214 <__adddf3>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4912      	ldr	r1, [pc, #72]	@ (80024b8 <angleToServo+0x158>)
 8002470:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    // BR Upper
    _val_list[10] = _servo_offsets[10] + _thetas[3][1];
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <angleToServo+0x154>)
 8002476:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800247a:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <angleToServo+0x150>)
 800247c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002480:	f7fd fec8 	bl	8000214 <__adddf3>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	490b      	ldr	r1, [pc, #44]	@ (80024b8 <angleToServo+0x158>)
 800248a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    // BR Shoulder
    _val_list[11] = _servo_offsets[11] + _thetas[3][0];
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <angleToServo+0x154>)
 8002490:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <angleToServo+0x150>)
 8002496:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800249a:	f7fd febb 	bl	8000214 <__adddf3>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4905      	ldr	r1, [pc, #20]	@ (80024b8 <angleToServo+0x158>)
 80024a4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200001d0 	.word	0x200001d0
 80024b4:	20000010 	.word	0x20000010
 80024b8:	20000170 	.word	0x20000170
 80024bc:	00000000 	.word	0x00000000

080024c0 <servoRotate>:

void servoRotate(double thetas[4][3]) {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    angleToServo(thetas);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff49 	bl	8002360 <angleToServo>

    for (int x = 0; x < 12; x++) {
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e061      	b.n	8002598 <servoRotate+0xd8>
        //_val_list[x] = (int)((_val_list[x] - 26.36) * (1980.0 / 1500.0));

        if (_val_list[x] > 180) {
 80024d4:	4a36      	ldr	r2, [pc, #216]	@ (80025b0 <servoRotate+0xf0>)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b33      	ldr	r3, [pc, #204]	@ (80025b4 <servoRotate+0xf4>)
 80024e6:	f7fe fadb 	bl	8000aa0 <__aeabi_dcmpgt>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <servoRotate+0x44>
            _val_list[x] = 179;
 80024f0:	4a2f      	ldr	r2, [pc, #188]	@ (80025b0 <servoRotate+0xf0>)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	18d1      	adds	r1, r2, r3
 80024f8:	a32b      	add	r3, pc, #172	@ (adr r3, 80025a8 <servoRotate+0xe8>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	e9c1 2300 	strd	r2, r3, [r1]
            continue;
 8002502:	e046      	b.n	8002592 <servoRotate+0xd2>
        }
        else if (_val_list[x] <= 0) {
 8002504:	4a2a      	ldr	r2, [pc, #168]	@ (80025b0 <servoRotate+0xf0>)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	f7fe faae 	bl	8000a78 <__aeabi_dcmple>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <servoRotate+0x76>
            _val_list[x] = 1;
 8002522:	4a23      	ldr	r2, [pc, #140]	@ (80025b0 <servoRotate+0xf0>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	18d1      	adds	r1, r2, r3
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <servoRotate+0xf8>)
 8002530:	e9c1 2300 	strd	r2, r3, [r1]
            continue;
 8002534:	e02d      	b.n	8002592 <servoRotate+0xd2>
        }
        if (x < 6){
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b05      	cmp	r3, #5
 800253a:	dc14      	bgt.n	8002566 <servoRotate+0xa6>
        	PCA9685_SetServoAngle(&hi2c1, 0x82, x, _val_list[x]);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	b2dc      	uxtb	r4, r3
 8002540:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <servoRotate+0xf0>)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	f7fe faee 	bl	8000b30 <__aeabi_d2f>
 8002554:	4603      	mov	r3, r0
 8002556:	ee00 3a10 	vmov	s0, r3
 800255a:	4622      	mov	r2, r4
 800255c:	2182      	movs	r1, #130	@ 0x82
 800255e:	4817      	ldr	r0, [pc, #92]	@ (80025bc <servoRotate+0xfc>)
 8002560:	f7fe fd96 	bl	8001090 <PCA9685_SetServoAngle>
 8002564:	e015      	b.n	8002592 <servoRotate+0xd2>
        }
        else {
        	PCA9685_SetServoAngle(&hi2c1, 0x80, x-6, _val_list[x]);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3b06      	subs	r3, #6
 800256c:	b2dc      	uxtb	r4, r3
 800256e:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <servoRotate+0xf0>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f7fe fad7 	bl	8000b30 <__aeabi_d2f>
 8002582:	4603      	mov	r3, r0
 8002584:	ee00 3a10 	vmov	s0, r3
 8002588:	4622      	mov	r2, r4
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	480b      	ldr	r0, [pc, #44]	@ (80025bc <servoRotate+0xfc>)
 800258e:	f7fe fd7f 	bl	8001090 <PCA9685_SetServoAngle>
    for (int x = 0; x < 12; x++) {
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b0b      	cmp	r3, #11
 800259c:	dd9a      	ble.n	80024d4 <servoRotate+0x14>
        }
    }
}
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd90      	pop	{r4, r7, pc}
 80025a8:	00000000 	.word	0x00000000
 80025ac:	40666000 	.word	0x40666000
 80025b0:	20000170 	.word	0x20000170
 80025b4:	40668000 	.word	0x40668000
 80025b8:	3ff00000 	.word	0x3ff00000
 80025bc:	200000fc 	.word	0x200000fc

080025c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b0c6      	sub	sp, #280	@ 0x118
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c6:	f000 fa4d 	bl	8002a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ca:	f000 f851 	bl	8002670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ce:	f000 f907 	bl	80027e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80025d2:	f000 f8b1 	bl	8002738 <MX_I2C1_Init>
  MX_RTC_Init();
 80025d6:	f000 f8dd 	bl	8002794 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(&hi2c1, 0x80, 50);
 80025da:	2232      	movs	r2, #50	@ 0x32
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	4822      	ldr	r0, [pc, #136]	@ (8002668 <main+0xa8>)
 80025e0:	f7fe fd04 	bl	8000fec <PCA9685_Init>
  PCA9685_Init(&hi2c1, 0x82, 50);
 80025e4:	2232      	movs	r2, #50	@ 0x32
 80025e6:	2182      	movs	r1, #130	@ 0x82
 80025e8:	481f      	ldr	r0, [pc, #124]	@ (8002668 <main+0xa8>)
 80025ea:	f7fe fcff 	bl	8000fec <PCA9685_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  double elapsed_time_ms = (double)HAL_GetTick();
 80025ee:	f000 fa9f 	bl	8002b30 <HAL_GetTick>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ff49 	bl	800048c <__aeabi_ui2d>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

	  double Lp[4][4];
	  positions(elapsed_time_ms, Lp);
 8002602:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002606:	4618      	mov	r0, r3
 8002608:	ed97 0b44 	vldr	d0, [r7, #272]	@ 0x110
 800260c:	f7ff fa2c 	bl	8001a68 <positions>

	  double rot[3] = { 0, 0, 0 };
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	  double pos[3] = { 50, 80, 0 };
 8002634:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <main+0xac>)
 8002636:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800263a:	461d      	mov	r5, r3
 800263c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002640:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002644:	e884 0003 	stmia.w	r4, {r0, r1}

	  double angles[4][3];
	  calcIK(Lp, rot, pos, angles);
 8002648:	463b      	mov	r3, r7
 800264a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800264e:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8002652:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8002656:	f7ff fcd3 	bl	8002000 <calcIK>

	  servoRotate((double(*)[3])angles);
 800265a:	463b      	mov	r3, r7
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff2f 	bl	80024c0 <servoRotate>
  {
 8002662:	bf00      	nop
 8002664:	e7c3      	b.n	80025ee <main+0x2e>
 8002666:	bf00      	nop
 8002668:	200000fc 	.word	0x200000fc
 800266c:	080082b0 	.word	0x080082b0

08002670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b094      	sub	sp, #80	@ 0x50
 8002674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	2234      	movs	r2, #52	@ 0x34
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fe7e 	bl	8005380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <SystemClock_Config+0xc0>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <SystemClock_Config+0xc0>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a4:	4b22      	ldr	r3, [pc, #136]	@ (8002730 <SystemClock_Config+0xc0>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026b0:	2300      	movs	r3, #0
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <SystemClock_Config+0xc4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <SystemClock_Config+0xc4>)
 80026be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <SystemClock_Config+0xc4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80026d0:	230a      	movs	r3, #10
 80026d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026d4:	2301      	movs	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d8:	2301      	movs	r3, #1
 80026da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026dc:	2310      	movs	r3, #16
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026e0:	2301      	movs	r3, #1
 80026e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 faa3 	bl	8004c38 <HAL_RCC_OscConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80026f8:	f000 f8a8 	bl	800284c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026fc:	230f      	movs	r3, #15
 80026fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fcb4 	bl	8004084 <HAL_RCC_ClockConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002722:	f000 f893 	bl	800284c <Error_Handler>
  }
}
 8002726:	bf00      	nop
 8002728:	3750      	adds	r7, #80	@ 0x50
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000

08002738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <MX_I2C1_Init+0x50>)
 800273e:	4a13      	ldr	r2, [pc, #76]	@ (800278c <MX_I2C1_Init+0x54>)
 8002740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <MX_I2C1_Init+0x50>)
 8002744:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <MX_I2C1_Init+0x58>)
 8002746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <MX_I2C1_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <MX_I2C1_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <MX_I2C1_Init+0x50>)
 8002756:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800275a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800275c:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <MX_I2C1_Init+0x50>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <MX_I2C1_Init+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002768:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <MX_I2C1_Init+0x50>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <MX_I2C1_Init+0x50>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002774:	4804      	ldr	r0, [pc, #16]	@ (8002788 <MX_I2C1_Init+0x50>)
 8002776:	f000 fc61 	bl	800303c <HAL_I2C_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002780:	f000 f864 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200000fc 	.word	0x200000fc
 800278c:	40005400 	.word	0x40005400
 8002790:	000186a0 	.word	0x000186a0

08002794 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002798:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <MX_RTC_Init+0x44>)
 800279a:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <MX_RTC_Init+0x48>)
 800279c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800279e:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <MX_RTC_Init+0x44>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <MX_RTC_Init+0x44>)
 80027a6:	227f      	movs	r2, #127	@ 0x7f
 80027a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <MX_RTC_Init+0x44>)
 80027ac:	22ff      	movs	r2, #255	@ 0xff
 80027ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <MX_RTC_Init+0x44>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027b6:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <MX_RTC_Init+0x44>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <MX_RTC_Init+0x44>)
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027c2:	4805      	ldr	r0, [pc, #20]	@ (80027d8 <MX_RTC_Init+0x44>)
 80027c4:	f002 fcd6 	bl	8005174 <HAL_RTC_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80027ce:	f000 f83d 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000150 	.word	0x20000150
 80027dc:	40002800 	.word	0x40002800

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <MX_GPIO_Init+0x68>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a16      	ldr	r2, [pc, #88]	@ (8002848 <MX_GPIO_Init+0x68>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <MX_GPIO_Init+0x68>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <MX_GPIO_Init+0x68>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <MX_GPIO_Init+0x68>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <MX_GPIO_Init+0x68>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <MX_GPIO_Init+0x68>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a08      	ldr	r2, [pc, #32]	@ (8002848 <MX_GPIO_Init+0x68>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MX_GPIO_Init+0x68>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002850:	b672      	cpsid	i
}
 8002852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <Error_Handler+0x8>

08002858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <HAL_MspInit+0x4c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	4a0f      	ldr	r2, [pc, #60]	@ (80028a4 <HAL_MspInit+0x4c>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286c:	6453      	str	r3, [r2, #68]	@ 0x44
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <HAL_MspInit+0x4c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_MspInit+0x4c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	4a08      	ldr	r2, [pc, #32]	@ (80028a4 <HAL_MspInit+0x4c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	@ 0x40
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_MspInit+0x4c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	@ (800292c <HAL_I2C_MspInit+0x84>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12c      	bne.n	8002924 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <HAL_I2C_MspInit+0x88>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <HAL_I2C_MspInit+0x88>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_I2C_MspInit+0x88>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ec:	2312      	movs	r3, #18
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028f8:	2304      	movs	r3, #4
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	480c      	ldr	r0, [pc, #48]	@ (8002934 <HAL_I2C_MspInit+0x8c>)
 8002904:	f000 fa06 	bl	8002d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_I2C_MspInit+0x88>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_I2C_MspInit+0x88>)
 8002912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002916:	6413      	str	r3, [r2, #64]	@ 0x40
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_I2C_MspInit+0x88>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002924:	bf00      	nop
 8002926:	3728      	adds	r7, #40	@ 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40005400 	.word	0x40005400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020400 	.word	0x40020400

08002938 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b09a      	sub	sp, #104	@ 0x68
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	225c      	movs	r2, #92	@ 0x5c
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f002 fd19 	bl	8005380 <memset>
  if(hrtc->Instance==RTC)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a0c      	ldr	r2, [pc, #48]	@ (8002984 <HAL_RTC_MspInit+0x4c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d111      	bne.n	800297c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002958:	2320      	movs	r3, #32
 800295a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800295c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002960:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fc92 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002972:	f7ff ff6b 	bl	800284c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <HAL_RTC_MspInit+0x50>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800297c:	bf00      	nop
 800297e:	3768      	adds	r7, #104	@ 0x68
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40002800 	.word	0x40002800
 8002988:	42470e3c 	.word	0x42470e3c

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <NMI_Handler+0x4>

08002994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <MemManage_Handler+0x4>

080029a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <BusFault_Handler+0x4>

080029ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <UsageFault_Handler+0x4>

080029b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e2:	f000 f891 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <SystemInit+0x20>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <SystemInit+0x20>)
 80029f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
  }
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a14:	f7ff ffea 	bl	80029ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a18:	480c      	ldr	r0, [pc, #48]	@ (8002a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a1a:	490d      	ldr	r1, [pc, #52]	@ (8002a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a30:	4c0a      	ldr	r4, [pc, #40]	@ (8002a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f002 fcad 	bl	800539c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a42:	f7ff fdbd 	bl	80025c0 <main>
  bx  lr    
 8002a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002a54:	08008580 	.word	0x08008580
  ldr r2, =_sbss
 8002a58:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002a5c:	2000036c 	.word	0x2000036c

08002a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <HAL_Init+0x40>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <HAL_Init+0x40>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	@ (8002aa4 <HAL_Init+0x40>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 f90d 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fede 	bl	8002858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f917 	bl	8002cfa <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f000 f8ed 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	@ (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000070 	.word	0x20000070
 8002b00:	20000078 	.word	0x20000078
 8002b04:	20000074 	.word	0x20000074

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000078 	.word	0x20000078
 8002b2c:	20000230 	.word	0x20000230

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000230 	.word	0x20000230

08002b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <__NVIC_SetPriorityGrouping+0x44>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b64:	4013      	ands	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7a:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <__NVIC_SetPriorityGrouping+0x44>)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	60d3      	str	r3, [r2, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b94:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	f003 0307 	and.w	r3, r3, #7
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	@ (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	@ (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	@ 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff47 	bl	8002b48 <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff5c 	bl	8002b90 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffb0 	bl	8002c68 <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	@ 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e165      	b.n	8002ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8154 	bne.w	8002ff6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d005      	beq.n	8002d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d130      	bne.n	8002dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d017      	beq.n	8002e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d123      	bne.n	8002e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80ae 	beq.w	8002ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003014 <HAL_GPIO_Init+0x300>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8003014 <HAL_GPIO_Init+0x300>)
 8002ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8003014 <HAL_GPIO_Init+0x300>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb6:	4a58      	ldr	r2, [pc, #352]	@ (8003018 <HAL_GPIO_Init+0x304>)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	@ (800301c <HAL_GPIO_Init+0x308>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d025      	beq.n	8002f2e <HAL_GPIO_Init+0x21a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8003020 <HAL_GPIO_Init+0x30c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01f      	beq.n	8002f2a <HAL_GPIO_Init+0x216>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_GPIO_Init+0x310>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d019      	beq.n	8002f26 <HAL_GPIO_Init+0x212>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_GPIO_Init+0x314>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0x20e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_GPIO_Init+0x318>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <HAL_GPIO_Init+0x20a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	@ (8003030 <HAL_GPIO_Init+0x31c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_Init+0x206>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a49      	ldr	r2, [pc, #292]	@ (8003034 <HAL_GPIO_Init+0x320>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_GPIO_Init+0x202>
 8002f12:	2306      	movs	r3, #6
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f40:	4935      	ldr	r1, [pc, #212]	@ (8003018 <HAL_GPIO_Init+0x304>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f72:	4a31      	ldr	r2, [pc, #196]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f78:	4b2f      	ldr	r3, [pc, #188]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f9c:	4a26      	ldr	r2, [pc, #152]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa2:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff0:	4a11      	ldr	r2, [pc, #68]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	f67f ae96 	bls.w	8002d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3724      	adds	r7, #36	@ 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40013c00 	.word	0x40013c00

0800303c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e12b      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fc20 	bl	80028a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	@ 0x24
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800308e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800309e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a0:	f001 f8e2 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 80030a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a81      	ldr	r2, [pc, #516]	@ (80032b0 <HAL_I2C_Init+0x274>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d807      	bhi.n	80030c0 <HAL_I2C_Init+0x84>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a80      	ldr	r2, [pc, #512]	@ (80032b4 <HAL_I2C_Init+0x278>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e006      	b.n	80030ce <HAL_I2C_Init+0x92>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a7d      	ldr	r2, [pc, #500]	@ (80032b8 <HAL_I2C_Init+0x27c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bf94      	ite	ls
 80030c8:	2301      	movls	r3, #1
 80030ca:	2300      	movhi	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0e7      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a78      	ldr	r2, [pc, #480]	@ (80032bc <HAL_I2C_Init+0x280>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0c9b      	lsrs	r3, r3, #18
 80030e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a6a      	ldr	r2, [pc, #424]	@ (80032b0 <HAL_I2C_Init+0x274>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d802      	bhi.n	8003110 <HAL_I2C_Init+0xd4>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3301      	adds	r3, #1
 800310e:	e009      	b.n	8003124 <HAL_I2C_Init+0xe8>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	4a69      	ldr	r2, [pc, #420]	@ (80032c0 <HAL_I2C_Init+0x284>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	3301      	adds	r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003136:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	495c      	ldr	r1, [pc, #368]	@ (80032b0 <HAL_I2C_Init+0x274>)
 8003140:	428b      	cmp	r3, r1
 8003142:	d819      	bhi.n	8003178 <HAL_I2C_Init+0x13c>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e59      	subs	r1, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003158:	400b      	ands	r3, r1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_I2C_Init+0x138>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e59      	subs	r1, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fbb1 f3f3 	udiv	r3, r1, r3
 800316c:	3301      	adds	r3, #1
 800316e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003172:	e051      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003174:	2304      	movs	r3, #4
 8003176:	e04f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d111      	bne.n	80031a4 <HAL_I2C_Init+0x168>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e012      	b.n	80031ca <HAL_I2C_Init+0x18e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Init+0x196>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e022      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10e      	bne.n	80031f8 <HAL_I2C_Init+0x1bc>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e58      	subs	r0, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031f6:	e00f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	6809      	ldr	r1, [r1, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003246:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6911      	ldr	r1, [r2, #16]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	4311      	orrs	r1, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	430b      	orrs	r3, r1
 800325a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	000186a0 	.word	0x000186a0
 80032b4:	001e847f 	.word	0x001e847f
 80032b8:	003d08ff 	.word	0x003d08ff
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	10624dd3 	.word	0x10624dd3

080032c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032de:	f7ff fc27 	bl	8002b30 <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	f040 80d9 	bne.w	80034a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2319      	movs	r3, #25
 80032f8:	2201      	movs	r2, #1
 80032fa:	496d      	ldr	r1, [pc, #436]	@ (80034b0 <HAL_I2C_Mem_Write+0x1ec>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fc8b 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
 800330a:	e0cc      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_I2C_Mem_Write+0x56>
 8003316:	2302      	movs	r3, #2
 8003318:	e0c5      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d007      	beq.n	8003340 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800334e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2221      	movs	r2, #33	@ 0x21
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2240      	movs	r2, #64	@ 0x40
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a4d      	ldr	r2, [pc, #308]	@ (80034b4 <HAL_I2C_Mem_Write+0x1f0>)
 8003380:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003382:	88f8      	ldrh	r0, [r7, #6]
 8003384:	893a      	ldrh	r2, [r7, #8]
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fac2 	bl	800391c <I2C_RequestMemoryWrite>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d052      	beq.n	8003444 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e081      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fd50 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d107      	bne.n	80033ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06b      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b04      	cmp	r3, #4
 800340a:	d11b      	bne.n	8003444 <HAL_I2C_Mem_Write+0x180>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d017      	beq.n	8003444 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1aa      	bne.n	80033a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fd43 	bl	8003edc <I2C_WaitOnBTFFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	2b04      	cmp	r3, #4
 8003462:	d107      	bne.n	8003474 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003472:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e016      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	00100002 	.word	0x00100002
 80034b4:	ffff0000 	.word	0xffff0000

080034b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	@ 0x30
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034d2:	f7ff fb2d 	bl	8002b30 <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	f040 8214 	bne.w	800390e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	2319      	movs	r3, #25
 80034ec:	2201      	movs	r2, #1
 80034ee:	497b      	ldr	r1, [pc, #492]	@ (80036dc <HAL_I2C_Mem_Read+0x224>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fb91 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
 80034fe:	e207      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_I2C_Mem_Read+0x56>
 800350a:	2302      	movs	r3, #2
 800350c:	e200      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b01      	cmp	r3, #1
 8003522:	d007      	beq.n	8003534 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2222      	movs	r2, #34	@ 0x22
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2240      	movs	r2, #64	@ 0x40
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a5b      	ldr	r2, [pc, #364]	@ (80036e0 <HAL_I2C_Mem_Read+0x228>)
 8003574:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003576:	88f8      	ldrh	r0, [r7, #6]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4603      	mov	r3, r0
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fa5e 	bl	8003a48 <I2C_RequestMemoryRead>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1bc      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d113      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e190      	b.n	80038e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d11b      	bne.n	8003606 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e170      	b.n	80038e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	2b02      	cmp	r3, #2
 800360c:	d11b      	bne.n	8003646 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800362c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	e150      	b.n	80038e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800365c:	e144      	b.n	80038e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	2b03      	cmp	r3, #3
 8003664:	f200 80f1 	bhi.w	800384a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	2b01      	cmp	r3, #1
 800366e:	d123      	bne.n	80036b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003672:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fc79 	bl	8003f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e145      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036b6:	e117      	b.n	80038e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d14e      	bne.n	800375e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c6:	2200      	movs	r2, #0
 80036c8:	4906      	ldr	r1, [pc, #24]	@ (80036e4 <HAL_I2C_Mem_Read+0x22c>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 faa4 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e11a      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
 80036da:	bf00      	nop
 80036dc:	00100002 	.word	0x00100002
 80036e0:	ffff0000 	.word	0xffff0000
 80036e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800375c:	e0c4      	b.n	80038e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003764:	2200      	movs	r2, #0
 8003766:	496c      	ldr	r1, [pc, #432]	@ (8003918 <HAL_I2C_Mem_Read+0x460>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fa55 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0cb      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	2200      	movs	r2, #0
 80037c2:	4955      	ldr	r1, [pc, #340]	@ (8003918 <HAL_I2C_Mem_Read+0x460>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fa27 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e09d      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003848:	e04e      	b.n	80038e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fb8c 	bl	8003f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e058      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d124      	bne.n	80038e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d107      	bne.n	80038b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f47f aeb6 	bne.w	800365e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3728      	adds	r7, #40	@ 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	00010004 	.word	0x00010004

0800391c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2200      	movs	r2, #0
 800394e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f960 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396c:	d103      	bne.n	8003976 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e05f      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	492d      	ldr	r1, [pc, #180]	@ (8003a44 <I2C_RequestMemoryWrite+0x128>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f9bb 	bl	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e04c      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa46 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02b      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039e8:	893b      	ldrh	r3, [r7, #8]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]
 80039f2:	e021      	b.n	8003a38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fa20 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e005      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	00010002 	.word	0x00010002

08003a48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8c2 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa8:	d103      	bne.n	8003ab2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0aa      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	4952      	ldr	r1, [pc, #328]	@ (8003c14 <I2C_RequestMemoryRead+0x1cc>)
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f91d 	bl	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e097      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af4:	6a39      	ldr	r1, [r7, #32]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f9a8 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e076      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	611a      	str	r2, [r3, #16]
 8003b2e:	e021      	b.n	8003b74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	6a39      	ldr	r1, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f982 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d107      	bne.n	8003b66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e050      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6a:	893b      	ldrh	r3, [r7, #8]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f967 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d107      	bne.n	8003b9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e035      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f82b 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd6:	d103      	bne.n	8003be0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e013      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003be4:	897b      	ldrh	r3, [r7, #10]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	6a3a      	ldr	r2, [r7, #32]
 8003bf8:	4906      	ldr	r1, [pc, #24]	@ (8003c14 <I2C_RequestMemoryRead+0x1cc>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f886 	bl	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	00010002 	.word	0x00010002

08003c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c28:	e048      	b.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d044      	beq.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fe ff7d 	bl	8002b30 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d139      	bne.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	0c1b      	lsrs	r3, r3, #16
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d10d      	bne.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	e00c      	b.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d116      	bne.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e023      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10d      	bne.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	e00c      	b.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d093      	beq.n	8003c2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d1a:	e071      	b.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2a:	d123      	bne.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0204 	orr.w	r2, r3, #4
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e067      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d041      	beq.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7fe fed8 	bl	8002b30 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d136      	bne.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10c      	bne.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e00b      	b.n	8003dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e021      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10c      	bne.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e00b      	b.n	8003e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f47f af6d 	bne.w	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e58:	e034      	b.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f8e3 	bl	8004026 <I2C_IsAcknowledgeFailed>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e034      	b.n	8003ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d028      	beq.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fe fe5d 	bl	8002b30 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d11d      	bne.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b80      	cmp	r3, #128	@ 0x80
 8003e94:	d016      	beq.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e007      	b.n	8003ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ece:	2b80      	cmp	r3, #128	@ 0x80
 8003ed0:	d1c3      	bne.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ee8:	e034      	b.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f89b 	bl	8004026 <I2C_IsAcknowledgeFailed>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e034      	b.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d028      	beq.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fe fe15 	bl	8002b30 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11d      	bne.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d016      	beq.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d1c3      	bne.n	8003eea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f78:	e049      	b.n	800400e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d119      	bne.n	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0210 	mvn.w	r2, #16
 8003f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e030      	b.n	800401e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbc:	f7fe fdb8 	bl	8002b30 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11d      	bne.n	800400e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d016      	beq.n	800400e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e007      	b.n	800401e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d1ae      	bne.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403c:	d11b      	bne.n	8004076 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004046:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cc      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b68      	ldr	r3, [pc, #416]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90c      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b65      	ldr	r3, [pc, #404]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b63      	ldr	r3, [pc, #396]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b8      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d8:	4b59      	ldr	r3, [pc, #356]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a58      	ldr	r2, [pc, #352]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f0:	4b53      	ldr	r3, [pc, #332]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a52      	ldr	r2, [pc, #328]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b50      	ldr	r3, [pc, #320]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	494d      	ldr	r1, [pc, #308]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b47      	ldr	r3, [pc, #284]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	2b03      	cmp	r3, #3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b3f      	ldr	r3, [pc, #252]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e067      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b37      	ldr	r3, [pc, #220]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4934      	ldr	r1, [pc, #208]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7fe fcdc 	bl	8002b30 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fe fcd8 	bl	8002b30 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2b      	ldr	r3, [pc, #172]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20c      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b22      	ldr	r3, [pc, #136]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b20      	ldr	r3, [pc, #128]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4916      	ldr	r1, [pc, #88]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b12      	ldr	r3, [pc, #72]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	490e      	ldr	r1, [pc, #56]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800420a:	f000 fb6b 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 800420e:	4602      	mov	r2, r0
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	490a      	ldr	r1, [pc, #40]	@ (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	4a09      	ldr	r2, [pc, #36]	@ (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004226:	4b09      	ldr	r3, [pc, #36]	@ (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fc3c 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	080082c8 	.word	0x080082c8
 8004248:	20000070 	.word	0x20000070
 800424c:	20000074 	.word	0x20000074

08004250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004254:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <HAL_RCC_GetHCLKFreq+0x14>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000070 	.word	0x20000070

08004268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800426c:	f7ff fff0 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0a9b      	lsrs	r3, r3, #10
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4903      	ldr	r1, [pc, #12]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x24>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	080082d8 	.word	0x080082d8

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	@ 0x30
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80042c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ce:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	496c      	ldr	r1, [pc, #432]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80042e6:	2301      	movs	r3, #1
 80042e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80042f6:	4b64      	ldr	r3, [pc, #400]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042fc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	4960      	ldr	r1, [pc, #384]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004314:	2301      	movs	r3, #1
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d017      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004324:	4b58      	ldr	r3, [pc, #352]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800432a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	4955      	ldr	r1, [pc, #340]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004342:	d101      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004350:	2301      	movs	r3, #1
 8004352:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d017      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004360:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004366:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436e:	4946      	ldr	r1, [pc, #280]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800437e:	d101      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004380:	2301      	movs	r3, #1
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800438c:	2301      	movs	r3, #1
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 808a 	beq.w	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	4a38      	ldr	r2, [pc, #224]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ae:	4b36      	ldr	r3, [pc, #216]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ba:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a33      	ldr	r2, [pc, #204]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043c6:	f7fe fbb3 	bl	8002b30 <HAL_GetTick>
 80043ca:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fe fbaf 	bl	8002b30 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e278      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043e0:	4b2a      	ldr	r3, [pc, #168]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ec:	4b26      	ldr	r3, [pc, #152]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f4:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	429a      	cmp	r2, r3
 8004408:	d028      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800440a:	4b1f      	ldr	r3, [pc, #124]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004412:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004414:	4b1e      	ldr	r3, [pc, #120]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441a:	4b1d      	ldr	r3, [pc, #116]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004426:	4b18      	ldr	r3, [pc, #96]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d114      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004432:	f7fe fb7d 	bl	8002b30 <HAL_GetTick>
 8004436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fe fb79 	bl	8002b30 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e240      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ee      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004464:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004468:	d114      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800446a:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800447a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447e:	4902      	ldr	r1, [pc, #8]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]
 8004484:	e00c      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	40007000 	.word	0x40007000
 8004490:	42470e40 	.word	0x42470e40
 8004494:	4b4a      	ldr	r3, [pc, #296]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a49      	ldr	r2, [pc, #292]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800449a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800449e:	6093      	str	r3, [r2, #8]
 80044a0:	4b47      	ldr	r3, [pc, #284]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	4944      	ldr	r1, [pc, #272]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80044c4:	4b3f      	ldr	r3, [pc, #252]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80044c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80044d4:	4b3a      	ldr	r3, [pc, #232]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e2:	4937      	ldr	r1, [pc, #220]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044f6:	4b32      	ldr	r3, [pc, #200]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004504:	492e      	ldr	r1, [pc, #184]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d011      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004518:	4b29      	ldr	r3, [pc, #164]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800451e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	4926      	ldr	r1, [pc, #152]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004536:	d101      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004538:	2301      	movs	r3, #1
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	491a      	ldr	r1, [pc, #104]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004566:	2b00      	cmp	r3, #0
 8004568:	d011      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800456c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004570:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004578:	4911      	ldr	r1, [pc, #68]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800458a:	2301      	movs	r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d005      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459c:	f040 80ff 	bne.w	800479e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045a6:	f7fe fac3 	bl	8002b30 <HAL_GetTick>
 80045aa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ac:	e00e      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045ae:	f7fe fabf 	bl	8002b30 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d907      	bls.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e188      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80045c0:	40023800 	.word	0x40023800
 80045c4:	424711e0 	.word	0x424711e0
 80045c8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045cc:	4b7e      	ldr	r3, [pc, #504]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ea      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d028      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d124      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004600:	4b71      	ldr	r3, [pc, #452]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	3301      	adds	r3, #1
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004612:	4b6d      	ldr	r3, [pc, #436]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004618:	0e1b      	lsrs	r3, r3, #24
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	431a      	orrs	r2, r3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	3b01      	subs	r3, #1
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	071b      	lsls	r3, r3, #28
 8004642:	4961      	ldr	r1, [pc, #388]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004668:	2b00      	cmp	r3, #0
 800466a:	d035      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004674:	d130      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004676:	4b54      	ldr	r3, [pc, #336]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	3301      	adds	r3, #1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004688:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468e:	0f1b      	lsrs	r3, r3, #28
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	019b      	lsls	r3, r3, #6
 80046a0:	431a      	orrs	r2, r3
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	3b01      	subs	r3, #1
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	431a      	orrs	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	4943      	ldr	r1, [pc, #268]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046c0:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046c6:	f023 021f 	bic.w	r2, r3, #31
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	3b01      	subs	r3, #1
 80046d0:	493d      	ldr	r1, [pc, #244]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d029      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046ec:	d124      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80046ee:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	3301      	adds	r3, #1
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004700:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004706:	0f1b      	lsrs	r3, r3, #28
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	019b      	lsls	r3, r3, #6
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	3b01      	subs	r3, #1
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	431a      	orrs	r2, r3
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	431a      	orrs	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	071b      	lsls	r3, r3, #28
 8004730:	4925      	ldr	r1, [pc, #148]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004740:	2b00      	cmp	r3, #0
 8004742:	d016      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	071b      	lsls	r3, r3, #28
 800476a:	4917      	ldr	r1, [pc, #92]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004772:	4b16      	ldr	r3, [pc, #88]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004778:	f7fe f9da 	bl	8002b30 <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004780:	f7fe f9d6 	bl	8002b30 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e09f      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800479e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 8095 	bne.w	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047a6:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fe f9c0 	bl	8002b30 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047b2:	e00f      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047b4:	f7fe f9bc 	bl	8002b30 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d908      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e085      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	42470068 	.word	0x42470068
 80047d0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047d4:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047e0:	d0e8      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02b      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004806:	2b00      	cmp	r3, #0
 8004808:	d127      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800480a:	4b34      	ldr	r3, [pc, #208]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	019b      	lsls	r3, r3, #6
 8004826:	431a      	orrs	r2, r3
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	4928      	ldr	r1, [pc, #160]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004840:	4b26      	ldr	r3, [pc, #152]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004846:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	3b01      	subs	r3, #1
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	4922      	ldr	r1, [pc, #136]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01d      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800486e:	d118      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004870:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004876:	0e1b      	lsrs	r3, r3, #24
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	019b      	lsls	r3, r3, #6
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	3b01      	subs	r3, #1
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	4910      	ldr	r1, [pc, #64]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048a2:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048a8:	f7fe f942 	bl	8002b30 <HAL_GetTick>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048b0:	f7fe f93e 	bl	8002b30 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e007      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ce:	d1ef      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3730      	adds	r7, #48	@ 0x30
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	42470070 	.word	0x42470070

080048e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e8:	b0a6      	sub	sp, #152	@ 0x98
 80048ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490a:	4bc8      	ldr	r3, [pc, #800]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b0c      	cmp	r3, #12
 8004914:	f200 817e 	bhi.w	8004c14 <HAL_RCC_GetSysClockFreq+0x330>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <HAL_RCC_GetSysClockFreq+0x3c>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004955 	.word	0x08004955
 8004924:	08004c15 	.word	0x08004c15
 8004928:	08004c15 	.word	0x08004c15
 800492c:	08004c15 	.word	0x08004c15
 8004930:	0800495d 	.word	0x0800495d
 8004934:	08004c15 	.word	0x08004c15
 8004938:	08004c15 	.word	0x08004c15
 800493c:	08004c15 	.word	0x08004c15
 8004940:	08004965 	.word	0x08004965
 8004944:	08004c15 	.word	0x08004c15
 8004948:	08004c15 	.word	0x08004c15
 800494c:	08004c15 	.word	0x08004c15
 8004950:	08004acf 	.word	0x08004acf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4bb6      	ldr	r3, [pc, #728]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800495a:	e15f      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495c:	4bb5      	ldr	r3, [pc, #724]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x350>)
 800495e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004962:	e15b      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4bb1      	ldr	r3, [pc, #708]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004970:	4bae      	ldr	r3, [pc, #696]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d031      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497c:	4bab      	ldr	r3, [pc, #684]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	2200      	movs	r2, #0
 8004984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004990:	2300      	movs	r3, #0
 8004992:	667b      	str	r3, [r7, #100]	@ 0x64
 8004994:	4ba7      	ldr	r3, [pc, #668]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x350>)
 8004996:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800499a:	462a      	mov	r2, r5
 800499c:	fb03 f202 	mul.w	r2, r3, r2
 80049a0:	2300      	movs	r3, #0
 80049a2:	4621      	mov	r1, r4
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	4aa2      	ldr	r2, [pc, #648]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x350>)
 80049ac:	4621      	mov	r1, r4
 80049ae:	fba1 1202 	umull	r1, r2, r1, r2
 80049b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049b4:	460a      	mov	r2, r1
 80049b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80049b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049ba:	4413      	add	r3, r2
 80049bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c2:	2200      	movs	r2, #0
 80049c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80049c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80049d0:	f7fc f8fe 	bl	8000bd0 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4613      	mov	r3, r2
 80049da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049de:	e064      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e0:	4b92      	ldr	r3, [pc, #584]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	099b      	lsrs	r3, r3, #6
 80049e6:	2200      	movs	r2, #0
 80049e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80049ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f4:	2300      	movs	r3, #0
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80049fc:	4622      	mov	r2, r4
 80049fe:	462b      	mov	r3, r5
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a0e:	0150      	lsls	r0, r2, #5
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4621      	mov	r1, r4
 8004a16:	1a51      	subs	r1, r2, r1
 8004a18:	6139      	str	r1, [r7, #16]
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a2e:	4659      	mov	r1, fp
 8004a30:	018b      	lsls	r3, r1, #6
 8004a32:	4651      	mov	r1, sl
 8004a34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a38:	4651      	mov	r1, sl
 8004a3a:	018a      	lsls	r2, r1, #6
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	ebb2 0801 	subs.w	r8, r2, r1
 8004a42:	4659      	mov	r1, fp
 8004a44:	eb63 0901 	sbc.w	r9, r3, r1
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5c:	4690      	mov	r8, r2
 8004a5e:	4699      	mov	r9, r3
 8004a60:	4623      	mov	r3, r4
 8004a62:	eb18 0303 	adds.w	r3, r8, r3
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	462b      	mov	r3, r5
 8004a6a:	eb49 0303 	adc.w	r3, r9, r3
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	028b      	lsls	r3, r1, #10
 8004a80:	4621      	mov	r1, r4
 8004a82:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a86:	4621      	mov	r1, r4
 8004a88:	028a      	lsls	r2, r1, #10
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a92:	2200      	movs	r2, #0
 8004a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a9c:	f7fc f898 	bl	8000bd0 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004aaa:	4b60      	ldr	r3, [pc, #384]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	0c1b      	lsrs	r3, r3, #16
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004abc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004acc:	e0a6      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ace:	4b57      	ldr	r3, [pc, #348]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ada:	4b54      	ldr	r3, [pc, #336]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02a      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae6:	4b51      	ldr	r3, [pc, #324]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	099b      	lsrs	r3, r3, #6
 8004aec:	2200      	movs	r2, #0
 8004aee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004af0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004af8:	2100      	movs	r1, #0
 8004afa:	4b4e      	ldr	r3, [pc, #312]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x350>)
 8004afc:	fb03 f201 	mul.w	r2, r3, r1
 8004b00:	2300      	movs	r3, #0
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	4413      	add	r3, r2
 8004b08:	4a4a      	ldr	r2, [pc, #296]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b0a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b10:	460a      	mov	r2, r1
 8004b12:	673a      	str	r2, [r7, #112]	@ 0x70
 8004b14:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b16:	4413      	add	r3, r2
 8004b18:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b1e:	2200      	movs	r2, #0
 8004b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b22:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004b2c:	f7fc f850 	bl	8000bd0 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b3a:	e05b      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	2200      	movs	r2, #0
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	2300      	movs	r3, #0
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	f04f 0000 	mov.w	r0, #0
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	0159      	lsls	r1, r3, #5
 8004b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b6a:	0150      	lsls	r0, r2, #5
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4641      	mov	r1, r8
 8004b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b90:	ebb2 040a 	subs.w	r4, r2, sl
 8004b94:	eb63 050b 	sbc.w	r5, r3, fp
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	00eb      	lsls	r3, r5, #3
 8004ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba6:	00e2      	lsls	r2, r4, #3
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	4643      	mov	r3, r8
 8004bae:	18e3      	adds	r3, r4, r3
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	eb45 0303 	adc.w	r3, r5, r3
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	028b      	lsls	r3, r1, #10
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	028a      	lsls	r2, r1, #10
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bdc:	2200      	movs	r2, #0
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	61fa      	str	r2, [r7, #28]
 8004be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be6:	f7fb fff3 	bl	8000bd0 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4613      	mov	r3, r2
 8004bf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x348>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	0f1b      	lsrs	r3, r3, #28
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c12:	e003      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c14:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3798      	adds	r7, #152	@ 0x98
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	017d7840 	.word	0x017d7840

08004c38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e28d      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8083 	beq.w	8004d5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c58:	4b94      	ldr	r3, [pc, #592]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d019      	beq.n	8004c98 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c64:	4b91      	ldr	r3, [pc, #580]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d106      	bne.n	8004c7e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c70:	4b8e      	ldr	r3, [pc, #568]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c7c:	d00c      	beq.n	8004c98 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c86:	2b0c      	cmp	r3, #12
 8004c88:	d112      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8a:	4b88      	ldr	r3, [pc, #544]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c96:	d10b      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c98:	4b84      	ldr	r3, [pc, #528]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d05b      	beq.n	8004d5c <HAL_RCC_OscConfig+0x124>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d157      	bne.n	8004d5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e25a      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb8:	d106      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x90>
 8004cba:	4b7c      	ldr	r3, [pc, #496]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xcc>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0xb4>
 8004cd2:	4b76      	ldr	r3, [pc, #472]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a75      	ldr	r2, [pc, #468]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b73      	ldr	r3, [pc, #460]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a72      	ldr	r2, [pc, #456]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xcc>
 8004cec:	4b6f      	ldr	r3, [pc, #444]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6b      	ldr	r2, [pc, #428]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fd ff10 	bl	8002b30 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fd ff0c 	bl	8002b30 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	@ 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e21f      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b61      	ldr	r3, [pc, #388]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xdc>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd fefc 	bl	8002b30 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fd fef8 	bl	8002b30 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	@ 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e20b      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b57      	ldr	r3, [pc, #348]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x104>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d06f      	beq.n	8004e4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d6a:	4b50      	ldr	r3, [pc, #320]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d017      	beq.n	8004da6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d76:	4b4d      	ldr	r3, [pc, #308]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d105      	bne.n	8004d8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d82:	4b4a      	ldr	r3, [pc, #296]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8e:	4b47      	ldr	r3, [pc, #284]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d11c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9a:	4b44      	ldr	r3, [pc, #272]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d116      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da6:	4b41      	ldr	r3, [pc, #260]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_RCC_OscConfig+0x186>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e1d3      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4937      	ldr	r1, [pc, #220]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd2:	e03a      	b.n	8004e4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ddc:	4b34      	ldr	r3, [pc, #208]	@ (8004eb0 <HAL_RCC_OscConfig+0x278>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fd fea5 	bl	8002b30 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dea:	f7fd fea1 	bl	8002b30 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1b4      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	4b28      	ldr	r3, [pc, #160]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4925      	ldr	r1, [pc, #148]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]
 8004e1c:	e015      	b.n	8004e4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1e:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <HAL_RCC_OscConfig+0x278>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd fe84 	bl	8002b30 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fd fe80 	bl	8002b30 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e193      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d036      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d016      	beq.n	8004e8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e5e:	4b15      	ldr	r3, [pc, #84]	@ (8004eb4 <HAL_RCC_OscConfig+0x27c>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fd fe64 	bl	8002b30 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fd fe60 	bl	8002b30 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e173      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <HAL_RCC_OscConfig+0x274>)
 8004e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x234>
 8004e8a:	e01b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8c:	4b09      	ldr	r3, [pc, #36]	@ (8004eb4 <HAL_RCC_OscConfig+0x27c>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fd fe4d 	bl	8002b30 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	e00e      	b.n	8004eb8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fd fe49 	bl	8002b30 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d907      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e15c      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	42470000 	.word	0x42470000
 8004eb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	4b8a      	ldr	r3, [pc, #552]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ea      	bne.n	8004e9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8097 	beq.w	8005000 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed6:	4b83      	ldr	r3, [pc, #524]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	4a7e      	ldr	r2, [pc, #504]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f02:	4b79      	ldr	r3, [pc, #484]	@ (80050e8 <HAL_RCC_OscConfig+0x4b0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d118      	bne.n	8004f40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f0e:	4b76      	ldr	r3, [pc, #472]	@ (80050e8 <HAL_RCC_OscConfig+0x4b0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a75      	ldr	r2, [pc, #468]	@ (80050e8 <HAL_RCC_OscConfig+0x4b0>)
 8004f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1a:	f7fd fe09 	bl	8002b30 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f22:	f7fd fe05 	bl	8002b30 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e118      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	4b6c      	ldr	r3, [pc, #432]	@ (80050e8 <HAL_RCC_OscConfig+0x4b0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x31e>
 8004f48:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a65      	ldr	r2, [pc, #404]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f54:	e01c      	b.n	8004f90 <HAL_RCC_OscConfig+0x358>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x340>
 8004f5e:	4b61      	ldr	r3, [pc, #388]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	4a60      	ldr	r2, [pc, #384]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f64:	f043 0304 	orr.w	r3, r3, #4
 8004f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6a:	4b5e      	ldr	r3, [pc, #376]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6e:	4a5d      	ldr	r2, [pc, #372]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f76:	e00b      	b.n	8004f90 <HAL_RCC_OscConfig+0x358>
 8004f78:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a59      	ldr	r2, [pc, #356]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f84:	4b57      	ldr	r3, [pc, #348]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a56      	ldr	r2, [pc, #344]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	f023 0304 	bic.w	r3, r3, #4
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d015      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fd fdca 	bl	8002b30 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f7fd fdc6 	bl	8002b30 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e0d7      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0ee      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x368>
 8004fc2:	e014      	b.n	8004fee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fd fdb4 	bl	8002b30 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fd fdb0 	bl	8002b30 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e0c1      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe2:	4b40      	ldr	r3, [pc, #256]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ee      	bne.n	8004fcc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d105      	bne.n	8005000 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8004ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80ad 	beq.w	8005164 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800500a:	4b36      	ldr	r3, [pc, #216]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b08      	cmp	r3, #8
 8005014:	d060      	beq.n	80050d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d145      	bne.n	80050aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501e:	4b33      	ldr	r3, [pc, #204]	@ (80050ec <HAL_RCC_OscConfig+0x4b4>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fd fd84 	bl	8002b30 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fd fd80 	bl	8002b30 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e093      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	4b29      	ldr	r3, [pc, #164]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	3b01      	subs	r3, #1
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	071b      	lsls	r3, r3, #28
 8005076:	491b      	ldr	r1, [pc, #108]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	4313      	orrs	r3, r2
 800507a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800507c:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <HAL_RCC_OscConfig+0x4b4>)
 800507e:	2201      	movs	r2, #1
 8005080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fd fd55 	bl	8002b30 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fd fd51 	bl	8002b30 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e064      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509c:	4b11      	ldr	r3, [pc, #68]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x452>
 80050a8:	e05c      	b.n	8005164 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050aa:	4b10      	ldr	r3, [pc, #64]	@ (80050ec <HAL_RCC_OscConfig+0x4b4>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd fd3e 	bl	8002b30 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fd fd3a 	bl	8002b30 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e04d      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ca:	4b06      	ldr	r3, [pc, #24]	@ (80050e4 <HAL_RCC_OscConfig+0x4ac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x480>
 80050d6:	e045      	b.n	8005164 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e040      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
 80050e4:	40023800 	.word	0x40023800
 80050e8:	40007000 	.word	0x40007000
 80050ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005170 <HAL_RCC_OscConfig+0x538>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d030      	beq.n	8005160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d129      	bne.n	8005160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d122      	bne.n	8005160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005120:	4013      	ands	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005128:	4293      	cmp	r3, r2
 800512a:	d119      	bne.n	8005160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	3b01      	subs	r3, #1
 800513a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d10f      	bne.n	8005160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d107      	bne.n	8005160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800

08005174 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e073      	b.n	8005272 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7f5b      	ldrb	r3, [r3, #29]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd fbcc 	bl	8002938 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d055      	beq.n	8005260 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	22ca      	movs	r2, #202	@ 0xca
 80051ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2253      	movs	r2, #83	@ 0x53
 80051c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f87f 	bl	80052c8 <RTC_EnterInitMode>
 80051ca:	4603      	mov	r3, r0
 80051cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d12c      	bne.n	800522e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80051e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6919      	ldr	r1, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	041a      	lsls	r2, r3, #16
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f886 	bl	8005336 <RTC_ExitInitMode>
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d110      	bne.n	8005256 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005242:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	22ff      	movs	r2, #255	@ 0xff
 800525c:	625a      	str	r2, [r3, #36]	@ 0x24
 800525e:	e001      	b.n	8005264 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <HAL_RTC_WaitForSynchro+0x48>)
 800528e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005290:	f7fd fc4e 	bl	8002b30 <HAL_GetTick>
 8005294:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005296:	e009      	b.n	80052ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005298:	f7fd fc4a 	bl	8002b30 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052a6:	d901      	bls.n	80052ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e007      	b.n	80052bc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0ee      	beq.n	8005298 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	00017f5f 	.word	0x00017f5f

080052c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d122      	bne.n	800532c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052f6:	f7fd fc1b 	bl	8002b30 <HAL_GetTick>
 80052fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052fc:	e00c      	b.n	8005318 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052fe:	f7fd fc17 	bl	8002b30 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800530c:	d904      	bls.n	8005318 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2204      	movs	r2, #4
 8005312:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <RTC_EnterInitMode+0x64>
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d1e8      	bne.n	80052fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005350:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff8b 	bl	800527c <HAL_RTC_WaitForSynchro>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2204      	movs	r2, #4
 8005370:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <memset>:
 8005380:	4402      	add	r2, r0
 8005382:	4603      	mov	r3, r0
 8005384:	4293      	cmp	r3, r2
 8005386:	d100      	bne.n	800538a <memset+0xa>
 8005388:	4770      	bx	lr
 800538a:	f803 1b01 	strb.w	r1, [r3], #1
 800538e:	e7f9      	b.n	8005384 <memset+0x4>

08005390 <__errno>:
 8005390:	4b01      	ldr	r3, [pc, #4]	@ (8005398 <__errno+0x8>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000007c 	.word	0x2000007c

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4d0d      	ldr	r5, [pc, #52]	@ (80053d4 <__libc_init_array+0x38>)
 80053a0:	4c0d      	ldr	r4, [pc, #52]	@ (80053d8 <__libc_init_array+0x3c>)
 80053a2:	1b64      	subs	r4, r4, r5
 80053a4:	10a4      	asrs	r4, r4, #2
 80053a6:	2600      	movs	r6, #0
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	4d0b      	ldr	r5, [pc, #44]	@ (80053dc <__libc_init_array+0x40>)
 80053ae:	4c0c      	ldr	r4, [pc, #48]	@ (80053e0 <__libc_init_array+0x44>)
 80053b0:	f002 fe32 	bl	8008018 <_init>
 80053b4:	1b64      	subs	r4, r4, r5
 80053b6:	10a4      	asrs	r4, r4, #2
 80053b8:	2600      	movs	r6, #0
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	08008578 	.word	0x08008578
 80053d8:	08008578 	.word	0x08008578
 80053dc:	08008578 	.word	0x08008578
 80053e0:	0800857c 	.word	0x0800857c

080053e4 <memcpy>:
 80053e4:	440a      	add	r2, r1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	4770      	bx	lr
 80053f0:	b510      	push	{r4, lr}
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fa:	4291      	cmp	r1, r2
 80053fc:	d1f9      	bne.n	80053f2 <memcpy+0xe>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <acos>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	ed2d 8b02 	vpush	{d8}
 8005406:	ec55 4b10 	vmov	r4, r5, d0
 800540a:	f000 fc71 	bl	8005cf0 <__ieee754_acos>
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	eeb0 8a40 	vmov.f32	s16, s0
 800541a:	eef0 8a60 	vmov.f32	s17, s1
 800541e:	f7fb fb49 	bl	8000ab4 <__aeabi_dcmpun>
 8005422:	b9a8      	cbnz	r0, 8005450 <acos+0x50>
 8005424:	ec45 4b10 	vmov	d0, r4, r5
 8005428:	f000 f93e 	bl	80056a8 <fabs>
 800542c:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <acos+0x60>)
 800542e:	ec51 0b10 	vmov	r0, r1, d0
 8005432:	2200      	movs	r2, #0
 8005434:	f7fb fb34 	bl	8000aa0 <__aeabi_dcmpgt>
 8005438:	b150      	cbz	r0, 8005450 <acos+0x50>
 800543a:	f7ff ffa9 	bl	8005390 <__errno>
 800543e:	ecbd 8b02 	vpop	{d8}
 8005442:	2321      	movs	r3, #33	@ 0x21
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800544a:	4806      	ldr	r0, [pc, #24]	@ (8005464 <acos+0x64>)
 800544c:	f000 b994 	b.w	8005778 <nan>
 8005450:	eeb0 0a48 	vmov.f32	s0, s16
 8005454:	eef0 0a68 	vmov.f32	s1, s17
 8005458:	ecbd 8b02 	vpop	{d8}
 800545c:	bd38      	pop	{r3, r4, r5, pc}
 800545e:	bf00      	nop
 8005460:	3ff00000 	.word	0x3ff00000
 8005464:	080082e0 	.word	0x080082e0

08005468 <atan2>:
 8005468:	f000 be9e 	b.w	80061a8 <__ieee754_atan2>

0800546c <fmod>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	ed2d 8b02 	vpush	{d8}
 8005472:	ec57 6b10 	vmov	r6, r7, d0
 8005476:	ec55 4b11 	vmov	r4, r5, d1
 800547a:	f000 ff5b 	bl	8006334 <__ieee754_fmod>
 800547e:	4622      	mov	r2, r4
 8005480:	462b      	mov	r3, r5
 8005482:	4630      	mov	r0, r6
 8005484:	4639      	mov	r1, r7
 8005486:	eeb0 8a40 	vmov.f32	s16, s0
 800548a:	eef0 8a60 	vmov.f32	s17, s1
 800548e:	f7fb fb11 	bl	8000ab4 <__aeabi_dcmpun>
 8005492:	b990      	cbnz	r0, 80054ba <fmod+0x4e>
 8005494:	2200      	movs	r2, #0
 8005496:	2300      	movs	r3, #0
 8005498:	4620      	mov	r0, r4
 800549a:	4629      	mov	r1, r5
 800549c:	f7fb fad8 	bl	8000a50 <__aeabi_dcmpeq>
 80054a0:	b158      	cbz	r0, 80054ba <fmod+0x4e>
 80054a2:	f7ff ff75 	bl	8005390 <__errno>
 80054a6:	2321      	movs	r3, #33	@ 0x21
 80054a8:	6003      	str	r3, [r0, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	2300      	movs	r3, #0
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb f98f 	bl	80007d4 <__aeabi_ddiv>
 80054b6:	ec41 0b18 	vmov	d8, r0, r1
 80054ba:	eeb0 0a48 	vmov.f32	s0, s16
 80054be:	eef0 0a68 	vmov.f32	s1, s17
 80054c2:	ecbd 8b02 	vpop	{d8}
 80054c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054c8 <pow>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	ed2d 8b02 	vpush	{d8}
 80054ce:	eeb0 8a40 	vmov.f32	s16, s0
 80054d2:	eef0 8a60 	vmov.f32	s17, s1
 80054d6:	ec55 4b11 	vmov	r4, r5, d1
 80054da:	f001 f835 	bl	8006548 <__ieee754_pow>
 80054de:	4622      	mov	r2, r4
 80054e0:	462b      	mov	r3, r5
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	ec57 6b10 	vmov	r6, r7, d0
 80054ea:	f7fb fae3 	bl	8000ab4 <__aeabi_dcmpun>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d13b      	bne.n	800556a <pow+0xa2>
 80054f2:	ec51 0b18 	vmov	r0, r1, d8
 80054f6:	2200      	movs	r2, #0
 80054f8:	2300      	movs	r3, #0
 80054fa:	f7fb faa9 	bl	8000a50 <__aeabi_dcmpeq>
 80054fe:	b1b8      	cbz	r0, 8005530 <pow+0x68>
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	4620      	mov	r0, r4
 8005506:	4629      	mov	r1, r5
 8005508:	f7fb faa2 	bl	8000a50 <__aeabi_dcmpeq>
 800550c:	2800      	cmp	r0, #0
 800550e:	d146      	bne.n	800559e <pow+0xd6>
 8005510:	ec45 4b10 	vmov	d0, r4, r5
 8005514:	f000 f924 	bl	8005760 <finite>
 8005518:	b338      	cbz	r0, 800556a <pow+0xa2>
 800551a:	2200      	movs	r2, #0
 800551c:	2300      	movs	r3, #0
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fb fa9f 	bl	8000a64 <__aeabi_dcmplt>
 8005526:	b300      	cbz	r0, 800556a <pow+0xa2>
 8005528:	f7ff ff32 	bl	8005390 <__errno>
 800552c:	2322      	movs	r3, #34	@ 0x22
 800552e:	e01b      	b.n	8005568 <pow+0xa0>
 8005530:	ec47 6b10 	vmov	d0, r6, r7
 8005534:	f000 f914 	bl	8005760 <finite>
 8005538:	b9e0      	cbnz	r0, 8005574 <pow+0xac>
 800553a:	eeb0 0a48 	vmov.f32	s0, s16
 800553e:	eef0 0a68 	vmov.f32	s1, s17
 8005542:	f000 f90d 	bl	8005760 <finite>
 8005546:	b1a8      	cbz	r0, 8005574 <pow+0xac>
 8005548:	ec45 4b10 	vmov	d0, r4, r5
 800554c:	f000 f908 	bl	8005760 <finite>
 8005550:	b180      	cbz	r0, 8005574 <pow+0xac>
 8005552:	4632      	mov	r2, r6
 8005554:	463b      	mov	r3, r7
 8005556:	4630      	mov	r0, r6
 8005558:	4639      	mov	r1, r7
 800555a:	f7fb faab 	bl	8000ab4 <__aeabi_dcmpun>
 800555e:	2800      	cmp	r0, #0
 8005560:	d0e2      	beq.n	8005528 <pow+0x60>
 8005562:	f7ff ff15 	bl	8005390 <__errno>
 8005566:	2321      	movs	r3, #33	@ 0x21
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	ecbd 8b02 	vpop	{d8}
 800556e:	ec47 6b10 	vmov	d0, r6, r7
 8005572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005574:	2200      	movs	r2, #0
 8005576:	2300      	movs	r3, #0
 8005578:	4630      	mov	r0, r6
 800557a:	4639      	mov	r1, r7
 800557c:	f7fb fa68 	bl	8000a50 <__aeabi_dcmpeq>
 8005580:	2800      	cmp	r0, #0
 8005582:	d0f2      	beq.n	800556a <pow+0xa2>
 8005584:	eeb0 0a48 	vmov.f32	s0, s16
 8005588:	eef0 0a68 	vmov.f32	s1, s17
 800558c:	f000 f8e8 	bl	8005760 <finite>
 8005590:	2800      	cmp	r0, #0
 8005592:	d0ea      	beq.n	800556a <pow+0xa2>
 8005594:	ec45 4b10 	vmov	d0, r4, r5
 8005598:	f000 f8e2 	bl	8005760 <finite>
 800559c:	e7c3      	b.n	8005526 <pow+0x5e>
 800559e:	4f01      	ldr	r7, [pc, #4]	@ (80055a4 <pow+0xdc>)
 80055a0:	2600      	movs	r6, #0
 80055a2:	e7e2      	b.n	800556a <pow+0xa2>
 80055a4:	3ff00000 	.word	0x3ff00000

080055a8 <sqrt>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	ed2d 8b02 	vpush	{d8}
 80055ae:	ec55 4b10 	vmov	r4, r5, d0
 80055b2:	f000 f93d 	bl	8005830 <__ieee754_sqrt>
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	eeb0 8a40 	vmov.f32	s16, s0
 80055c2:	eef0 8a60 	vmov.f32	s17, s1
 80055c6:	f7fb fa75 	bl	8000ab4 <__aeabi_dcmpun>
 80055ca:	b990      	cbnz	r0, 80055f2 <sqrt+0x4a>
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	4620      	mov	r0, r4
 80055d2:	4629      	mov	r1, r5
 80055d4:	f7fb fa46 	bl	8000a64 <__aeabi_dcmplt>
 80055d8:	b158      	cbz	r0, 80055f2 <sqrt+0x4a>
 80055da:	f7ff fed9 	bl	8005390 <__errno>
 80055de:	2321      	movs	r3, #33	@ 0x21
 80055e0:	6003      	str	r3, [r0, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	f7fb f8f3 	bl	80007d4 <__aeabi_ddiv>
 80055ee:	ec41 0b18 	vmov	d8, r0, r1
 80055f2:	eeb0 0a48 	vmov.f32	s0, s16
 80055f6:	eef0 0a68 	vmov.f32	s1, s17
 80055fa:	ecbd 8b02 	vpop	{d8}
 80055fe:	bd38      	pop	{r3, r4, r5, pc}

08005600 <cos>:
 8005600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005602:	ec53 2b10 	vmov	r2, r3, d0
 8005606:	4826      	ldr	r0, [pc, #152]	@ (80056a0 <cos+0xa0>)
 8005608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800560c:	4281      	cmp	r1, r0
 800560e:	d806      	bhi.n	800561e <cos+0x1e>
 8005610:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005698 <cos+0x98>
 8005614:	b005      	add	sp, #20
 8005616:	f85d eb04 	ldr.w	lr, [sp], #4
 800561a:	f000 b9e5 	b.w	80059e8 <__kernel_cos>
 800561e:	4821      	ldr	r0, [pc, #132]	@ (80056a4 <cos+0xa4>)
 8005620:	4281      	cmp	r1, r0
 8005622:	d908      	bls.n	8005636 <cos+0x36>
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	f7fa fdf2 	bl	8000210 <__aeabi_dsub>
 800562c:	ec41 0b10 	vmov	d0, r0, r1
 8005630:	b005      	add	sp, #20
 8005632:	f85d fb04 	ldr.w	pc, [sp], #4
 8005636:	4668      	mov	r0, sp
 8005638:	f001 fcca 	bl	8006fd0 <__ieee754_rem_pio2>
 800563c:	f000 0003 	and.w	r0, r0, #3
 8005640:	2801      	cmp	r0, #1
 8005642:	d00b      	beq.n	800565c <cos+0x5c>
 8005644:	2802      	cmp	r0, #2
 8005646:	d015      	beq.n	8005674 <cos+0x74>
 8005648:	b9d8      	cbnz	r0, 8005682 <cos+0x82>
 800564a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800564e:	ed9d 0b00 	vldr	d0, [sp]
 8005652:	f000 f9c9 	bl	80059e8 <__kernel_cos>
 8005656:	ec51 0b10 	vmov	r0, r1, d0
 800565a:	e7e7      	b.n	800562c <cos+0x2c>
 800565c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005660:	ed9d 0b00 	vldr	d0, [sp]
 8005664:	f000 fa88 	bl	8005b78 <__kernel_sin>
 8005668:	ec53 2b10 	vmov	r2, r3, d0
 800566c:	4610      	mov	r0, r2
 800566e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005672:	e7db      	b.n	800562c <cos+0x2c>
 8005674:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005678:	ed9d 0b00 	vldr	d0, [sp]
 800567c:	f000 f9b4 	bl	80059e8 <__kernel_cos>
 8005680:	e7f2      	b.n	8005668 <cos+0x68>
 8005682:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005686:	ed9d 0b00 	vldr	d0, [sp]
 800568a:	2001      	movs	r0, #1
 800568c:	f000 fa74 	bl	8005b78 <__kernel_sin>
 8005690:	e7e1      	b.n	8005656 <cos+0x56>
 8005692:	bf00      	nop
 8005694:	f3af 8000 	nop.w
	...
 80056a0:	3fe921fb 	.word	0x3fe921fb
 80056a4:	7fefffff 	.word	0x7fefffff

080056a8 <fabs>:
 80056a8:	ec51 0b10 	vmov	r0, r1, d0
 80056ac:	4602      	mov	r2, r0
 80056ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80056b2:	ec43 2b10 	vmov	d0, r2, r3
 80056b6:	4770      	bx	lr

080056b8 <sin>:
 80056b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056ba:	ec53 2b10 	vmov	r2, r3, d0
 80056be:	4826      	ldr	r0, [pc, #152]	@ (8005758 <sin+0xa0>)
 80056c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80056c4:	4281      	cmp	r1, r0
 80056c6:	d807      	bhi.n	80056d8 <sin+0x20>
 80056c8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005750 <sin+0x98>
 80056cc:	2000      	movs	r0, #0
 80056ce:	b005      	add	sp, #20
 80056d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d4:	f000 ba50 	b.w	8005b78 <__kernel_sin>
 80056d8:	4820      	ldr	r0, [pc, #128]	@ (800575c <sin+0xa4>)
 80056da:	4281      	cmp	r1, r0
 80056dc:	d908      	bls.n	80056f0 <sin+0x38>
 80056de:	4610      	mov	r0, r2
 80056e0:	4619      	mov	r1, r3
 80056e2:	f7fa fd95 	bl	8000210 <__aeabi_dsub>
 80056e6:	ec41 0b10 	vmov	d0, r0, r1
 80056ea:	b005      	add	sp, #20
 80056ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80056f0:	4668      	mov	r0, sp
 80056f2:	f001 fc6d 	bl	8006fd0 <__ieee754_rem_pio2>
 80056f6:	f000 0003 	and.w	r0, r0, #3
 80056fa:	2801      	cmp	r0, #1
 80056fc:	d00c      	beq.n	8005718 <sin+0x60>
 80056fe:	2802      	cmp	r0, #2
 8005700:	d011      	beq.n	8005726 <sin+0x6e>
 8005702:	b9e8      	cbnz	r0, 8005740 <sin+0x88>
 8005704:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005708:	ed9d 0b00 	vldr	d0, [sp]
 800570c:	2001      	movs	r0, #1
 800570e:	f000 fa33 	bl	8005b78 <__kernel_sin>
 8005712:	ec51 0b10 	vmov	r0, r1, d0
 8005716:	e7e6      	b.n	80056e6 <sin+0x2e>
 8005718:	ed9d 1b02 	vldr	d1, [sp, #8]
 800571c:	ed9d 0b00 	vldr	d0, [sp]
 8005720:	f000 f962 	bl	80059e8 <__kernel_cos>
 8005724:	e7f5      	b.n	8005712 <sin+0x5a>
 8005726:	ed9d 1b02 	vldr	d1, [sp, #8]
 800572a:	ed9d 0b00 	vldr	d0, [sp]
 800572e:	2001      	movs	r0, #1
 8005730:	f000 fa22 	bl	8005b78 <__kernel_sin>
 8005734:	ec53 2b10 	vmov	r2, r3, d0
 8005738:	4610      	mov	r0, r2
 800573a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800573e:	e7d2      	b.n	80056e6 <sin+0x2e>
 8005740:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005744:	ed9d 0b00 	vldr	d0, [sp]
 8005748:	f000 f94e 	bl	80059e8 <__kernel_cos>
 800574c:	e7f2      	b.n	8005734 <sin+0x7c>
 800574e:	bf00      	nop
	...
 8005758:	3fe921fb 	.word	0x3fe921fb
 800575c:	7fefffff 	.word	0x7fefffff

08005760 <finite>:
 8005760:	b082      	sub	sp, #8
 8005762:	ed8d 0b00 	vstr	d0, [sp]
 8005766:	9801      	ldr	r0, [sp, #4]
 8005768:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800576c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005770:	0fc0      	lsrs	r0, r0, #31
 8005772:	b002      	add	sp, #8
 8005774:	4770      	bx	lr
	...

08005778 <nan>:
 8005778:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005780 <nan+0x8>
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	00000000 	.word	0x00000000
 8005784:	7ff80000 	.word	0x7ff80000

08005788 <fmax>:
 8005788:	b508      	push	{r3, lr}
 800578a:	ed2d 8b04 	vpush	{d8-d9}
 800578e:	eeb0 8a40 	vmov.f32	s16, s0
 8005792:	eef0 8a60 	vmov.f32	s17, s1
 8005796:	eeb0 9a41 	vmov.f32	s18, s2
 800579a:	eef0 9a61 	vmov.f32	s19, s3
 800579e:	f000 f81d 	bl	80057dc <__fpclassifyd>
 80057a2:	b950      	cbnz	r0, 80057ba <fmax+0x32>
 80057a4:	eeb0 8a49 	vmov.f32	s16, s18
 80057a8:	eef0 8a69 	vmov.f32	s17, s19
 80057ac:	eeb0 0a48 	vmov.f32	s0, s16
 80057b0:	eef0 0a68 	vmov.f32	s1, s17
 80057b4:	ecbd 8b04 	vpop	{d8-d9}
 80057b8:	bd08      	pop	{r3, pc}
 80057ba:	eeb0 0a49 	vmov.f32	s0, s18
 80057be:	eef0 0a69 	vmov.f32	s1, s19
 80057c2:	f000 f80b 	bl	80057dc <__fpclassifyd>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0f0      	beq.n	80057ac <fmax+0x24>
 80057ca:	ec53 2b19 	vmov	r2, r3, d9
 80057ce:	ec51 0b18 	vmov	r0, r1, d8
 80057d2:	f7fb f965 	bl	8000aa0 <__aeabi_dcmpgt>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d0e4      	beq.n	80057a4 <fmax+0x1c>
 80057da:	e7e7      	b.n	80057ac <fmax+0x24>

080057dc <__fpclassifyd>:
 80057dc:	ec51 0b10 	vmov	r0, r1, d0
 80057e0:	b510      	push	{r4, lr}
 80057e2:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80057e6:	460b      	mov	r3, r1
 80057e8:	d019      	beq.n	800581e <__fpclassifyd+0x42>
 80057ea:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80057ee:	490e      	ldr	r1, [pc, #56]	@ (8005828 <__fpclassifyd+0x4c>)
 80057f0:	428a      	cmp	r2, r1
 80057f2:	d90e      	bls.n	8005812 <__fpclassifyd+0x36>
 80057f4:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80057f8:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80057fc:	428a      	cmp	r2, r1
 80057fe:	d908      	bls.n	8005812 <__fpclassifyd+0x36>
 8005800:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <__fpclassifyd+0x50>)
 8005802:	4213      	tst	r3, r2
 8005804:	d007      	beq.n	8005816 <__fpclassifyd+0x3a>
 8005806:	4294      	cmp	r4, r2
 8005808:	d107      	bne.n	800581a <__fpclassifyd+0x3e>
 800580a:	fab0 f080 	clz	r0, r0
 800580e:	0940      	lsrs	r0, r0, #5
 8005810:	bd10      	pop	{r4, pc}
 8005812:	2004      	movs	r0, #4
 8005814:	e7fc      	b.n	8005810 <__fpclassifyd+0x34>
 8005816:	2003      	movs	r0, #3
 8005818:	e7fa      	b.n	8005810 <__fpclassifyd+0x34>
 800581a:	2000      	movs	r0, #0
 800581c:	e7f8      	b.n	8005810 <__fpclassifyd+0x34>
 800581e:	2800      	cmp	r0, #0
 8005820:	d1ee      	bne.n	8005800 <__fpclassifyd+0x24>
 8005822:	2002      	movs	r0, #2
 8005824:	e7f4      	b.n	8005810 <__fpclassifyd+0x34>
 8005826:	bf00      	nop
 8005828:	7fdfffff 	.word	0x7fdfffff
 800582c:	7ff00000 	.word	0x7ff00000

08005830 <__ieee754_sqrt>:
 8005830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	4a68      	ldr	r2, [pc, #416]	@ (80059d8 <__ieee754_sqrt+0x1a8>)
 8005836:	ec55 4b10 	vmov	r4, r5, d0
 800583a:	43aa      	bics	r2, r5
 800583c:	462b      	mov	r3, r5
 800583e:	4621      	mov	r1, r4
 8005840:	d110      	bne.n	8005864 <__ieee754_sqrt+0x34>
 8005842:	4622      	mov	r2, r4
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	f7fa fe9a 	bl	8000580 <__aeabi_dmul>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4620      	mov	r0, r4
 8005852:	4629      	mov	r1, r5
 8005854:	f7fa fcde 	bl	8000214 <__adddf3>
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	ec45 4b10 	vmov	d0, r4, r5
 8005860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	2d00      	cmp	r5, #0
 8005866:	dc0e      	bgt.n	8005886 <__ieee754_sqrt+0x56>
 8005868:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800586c:	4322      	orrs	r2, r4
 800586e:	d0f5      	beq.n	800585c <__ieee754_sqrt+0x2c>
 8005870:	b19d      	cbz	r5, 800589a <__ieee754_sqrt+0x6a>
 8005872:	4622      	mov	r2, r4
 8005874:	4620      	mov	r0, r4
 8005876:	4629      	mov	r1, r5
 8005878:	f7fa fcca 	bl	8000210 <__aeabi_dsub>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	f7fa ffa8 	bl	80007d4 <__aeabi_ddiv>
 8005884:	e7e8      	b.n	8005858 <__ieee754_sqrt+0x28>
 8005886:	152a      	asrs	r2, r5, #20
 8005888:	d115      	bne.n	80058b6 <__ieee754_sqrt+0x86>
 800588a:	2000      	movs	r0, #0
 800588c:	e009      	b.n	80058a2 <__ieee754_sqrt+0x72>
 800588e:	0acb      	lsrs	r3, r1, #11
 8005890:	3a15      	subs	r2, #21
 8005892:	0549      	lsls	r1, r1, #21
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0fa      	beq.n	800588e <__ieee754_sqrt+0x5e>
 8005898:	e7f7      	b.n	800588a <__ieee754_sqrt+0x5a>
 800589a:	462a      	mov	r2, r5
 800589c:	e7fa      	b.n	8005894 <__ieee754_sqrt+0x64>
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	3001      	adds	r0, #1
 80058a2:	02dc      	lsls	r4, r3, #11
 80058a4:	d5fb      	bpl.n	800589e <__ieee754_sqrt+0x6e>
 80058a6:	1e44      	subs	r4, r0, #1
 80058a8:	1b12      	subs	r2, r2, r4
 80058aa:	f1c0 0420 	rsb	r4, r0, #32
 80058ae:	fa21 f404 	lsr.w	r4, r1, r4
 80058b2:	4323      	orrs	r3, r4
 80058b4:	4081      	lsls	r1, r0
 80058b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80058be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058c2:	07d2      	lsls	r2, r2, #31
 80058c4:	bf5c      	itt	pl
 80058c6:	005b      	lslpl	r3, r3, #1
 80058c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80058cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058d0:	bf58      	it	pl
 80058d2:	0049      	lslpl	r1, r1, #1
 80058d4:	2600      	movs	r6, #0
 80058d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80058da:	106d      	asrs	r5, r5, #1
 80058dc:	0049      	lsls	r1, r1, #1
 80058de:	2016      	movs	r0, #22
 80058e0:	4632      	mov	r2, r6
 80058e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80058e6:	1917      	adds	r7, r2, r4
 80058e8:	429f      	cmp	r7, r3
 80058ea:	bfde      	ittt	le
 80058ec:	193a      	addle	r2, r7, r4
 80058ee:	1bdb      	suble	r3, r3, r7
 80058f0:	1936      	addle	r6, r6, r4
 80058f2:	0fcf      	lsrs	r7, r1, #31
 80058f4:	3801      	subs	r0, #1
 80058f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80058fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80058fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005902:	d1f0      	bne.n	80058e6 <__ieee754_sqrt+0xb6>
 8005904:	4604      	mov	r4, r0
 8005906:	2720      	movs	r7, #32
 8005908:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800590c:	429a      	cmp	r2, r3
 800590e:	eb00 0e0c 	add.w	lr, r0, ip
 8005912:	db02      	blt.n	800591a <__ieee754_sqrt+0xea>
 8005914:	d113      	bne.n	800593e <__ieee754_sqrt+0x10e>
 8005916:	458e      	cmp	lr, r1
 8005918:	d811      	bhi.n	800593e <__ieee754_sqrt+0x10e>
 800591a:	f1be 0f00 	cmp.w	lr, #0
 800591e:	eb0e 000c 	add.w	r0, lr, ip
 8005922:	da42      	bge.n	80059aa <__ieee754_sqrt+0x17a>
 8005924:	2800      	cmp	r0, #0
 8005926:	db40      	blt.n	80059aa <__ieee754_sqrt+0x17a>
 8005928:	f102 0801 	add.w	r8, r2, #1
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	458e      	cmp	lr, r1
 8005930:	bf88      	it	hi
 8005932:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005936:	eba1 010e 	sub.w	r1, r1, lr
 800593a:	4464      	add	r4, ip
 800593c:	4642      	mov	r2, r8
 800593e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005942:	3f01      	subs	r7, #1
 8005944:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005948:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800594c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005950:	d1dc      	bne.n	800590c <__ieee754_sqrt+0xdc>
 8005952:	4319      	orrs	r1, r3
 8005954:	d01b      	beq.n	800598e <__ieee754_sqrt+0x15e>
 8005956:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80059dc <__ieee754_sqrt+0x1ac>
 800595a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80059e0 <__ieee754_sqrt+0x1b0>
 800595e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005962:	e9db 2300 	ldrd	r2, r3, [fp]
 8005966:	f7fa fc53 	bl	8000210 <__aeabi_dsub>
 800596a:	e9da 8900 	ldrd	r8, r9, [sl]
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4640      	mov	r0, r8
 8005974:	4649      	mov	r1, r9
 8005976:	f7fb f87f 	bl	8000a78 <__aeabi_dcmple>
 800597a:	b140      	cbz	r0, 800598e <__ieee754_sqrt+0x15e>
 800597c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005980:	e9da 0100 	ldrd	r0, r1, [sl]
 8005984:	e9db 2300 	ldrd	r2, r3, [fp]
 8005988:	d111      	bne.n	80059ae <__ieee754_sqrt+0x17e>
 800598a:	3601      	adds	r6, #1
 800598c:	463c      	mov	r4, r7
 800598e:	1072      	asrs	r2, r6, #1
 8005990:	0863      	lsrs	r3, r4, #1
 8005992:	07f1      	lsls	r1, r6, #31
 8005994:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005998:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800599c:	bf48      	it	mi
 800599e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80059a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80059a6:	4618      	mov	r0, r3
 80059a8:	e756      	b.n	8005858 <__ieee754_sqrt+0x28>
 80059aa:	4690      	mov	r8, r2
 80059ac:	e7be      	b.n	800592c <__ieee754_sqrt+0xfc>
 80059ae:	f7fa fc31 	bl	8000214 <__adddf3>
 80059b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	f7fb f851 	bl	8000a64 <__aeabi_dcmplt>
 80059c2:	b120      	cbz	r0, 80059ce <__ieee754_sqrt+0x19e>
 80059c4:	1ca0      	adds	r0, r4, #2
 80059c6:	bf08      	it	eq
 80059c8:	3601      	addeq	r6, #1
 80059ca:	3402      	adds	r4, #2
 80059cc:	e7df      	b.n	800598e <__ieee754_sqrt+0x15e>
 80059ce:	1c63      	adds	r3, r4, #1
 80059d0:	f023 0401 	bic.w	r4, r3, #1
 80059d4:	e7db      	b.n	800598e <__ieee754_sqrt+0x15e>
 80059d6:	bf00      	nop
 80059d8:	7ff00000 	.word	0x7ff00000
 80059dc:	200000d8 	.word	0x200000d8
 80059e0:	200000d0 	.word	0x200000d0
 80059e4:	00000000 	.word	0x00000000

080059e8 <__kernel_cos>:
 80059e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ec57 6b10 	vmov	r6, r7, d0
 80059f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80059f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80059f8:	ed8d 1b00 	vstr	d1, [sp]
 80059fc:	d206      	bcs.n	8005a0c <__kernel_cos+0x24>
 80059fe:	4630      	mov	r0, r6
 8005a00:	4639      	mov	r1, r7
 8005a02:	f7fb f86d 	bl	8000ae0 <__aeabi_d2iz>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f000 8088 	beq.w	8005b1c <__kernel_cos+0x134>
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	463b      	mov	r3, r7
 8005a10:	4630      	mov	r0, r6
 8005a12:	4639      	mov	r1, r7
 8005a14:	f7fa fdb4 	bl	8000580 <__aeabi_dmul>
 8005a18:	4b51      	ldr	r3, [pc, #324]	@ (8005b60 <__kernel_cos+0x178>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	460d      	mov	r5, r1
 8005a20:	f7fa fdae 	bl	8000580 <__aeabi_dmul>
 8005a24:	a340      	add	r3, pc, #256	@ (adr r3, 8005b28 <__kernel_cos+0x140>)
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	4682      	mov	sl, r0
 8005a2c:	468b      	mov	fp, r1
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4629      	mov	r1, r5
 8005a32:	f7fa fda5 	bl	8000580 <__aeabi_dmul>
 8005a36:	a33e      	add	r3, pc, #248	@ (adr r3, 8005b30 <__kernel_cos+0x148>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f7fa fbea 	bl	8000214 <__adddf3>
 8005a40:	4622      	mov	r2, r4
 8005a42:	462b      	mov	r3, r5
 8005a44:	f7fa fd9c 	bl	8000580 <__aeabi_dmul>
 8005a48:	a33b      	add	r3, pc, #236	@ (adr r3, 8005b38 <__kernel_cos+0x150>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fa fbdf 	bl	8000210 <__aeabi_dsub>
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f7fa fd93 	bl	8000580 <__aeabi_dmul>
 8005a5a:	a339      	add	r3, pc, #228	@ (adr r3, 8005b40 <__kernel_cos+0x158>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fbd8 	bl	8000214 <__adddf3>
 8005a64:	4622      	mov	r2, r4
 8005a66:	462b      	mov	r3, r5
 8005a68:	f7fa fd8a 	bl	8000580 <__aeabi_dmul>
 8005a6c:	a336      	add	r3, pc, #216	@ (adr r3, 8005b48 <__kernel_cos+0x160>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f7fa fbcd 	bl	8000210 <__aeabi_dsub>
 8005a76:	4622      	mov	r2, r4
 8005a78:	462b      	mov	r3, r5
 8005a7a:	f7fa fd81 	bl	8000580 <__aeabi_dmul>
 8005a7e:	a334      	add	r3, pc, #208	@ (adr r3, 8005b50 <__kernel_cos+0x168>)
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fbc6 	bl	8000214 <__adddf3>
 8005a88:	4622      	mov	r2, r4
 8005a8a:	462b      	mov	r3, r5
 8005a8c:	f7fa fd78 	bl	8000580 <__aeabi_dmul>
 8005a90:	4622      	mov	r2, r4
 8005a92:	462b      	mov	r3, r5
 8005a94:	f7fa fd74 	bl	8000580 <__aeabi_dmul>
 8005a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	f7fa fd6c 	bl	8000580 <__aeabi_dmul>
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4602      	mov	r2, r0
 8005aac:	4629      	mov	r1, r5
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7fa fbae 	bl	8000210 <__aeabi_dsub>
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b64 <__kernel_cos+0x17c>)
 8005ab6:	4598      	cmp	r8, r3
 8005ab8:	4606      	mov	r6, r0
 8005aba:	460f      	mov	r7, r1
 8005abc:	d810      	bhi.n	8005ae0 <__kernel_cos+0xf8>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	f7fa fba3 	bl	8000210 <__aeabi_dsub>
 8005aca:	460b      	mov	r3, r1
 8005acc:	4926      	ldr	r1, [pc, #152]	@ (8005b68 <__kernel_cos+0x180>)
 8005ace:	4602      	mov	r2, r0
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f7fa fb9d 	bl	8000210 <__aeabi_dsub>
 8005ad6:	ec41 0b10 	vmov	d0, r0, r1
 8005ada:	b003      	add	sp, #12
 8005adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae0:	4b22      	ldr	r3, [pc, #136]	@ (8005b6c <__kernel_cos+0x184>)
 8005ae2:	4921      	ldr	r1, [pc, #132]	@ (8005b68 <__kernel_cos+0x180>)
 8005ae4:	4598      	cmp	r8, r3
 8005ae6:	bf8c      	ite	hi
 8005ae8:	4d21      	ldrhi	r5, [pc, #132]	@ (8005b70 <__kernel_cos+0x188>)
 8005aea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005aee:	2400      	movs	r4, #0
 8005af0:	4622      	mov	r2, r4
 8005af2:	462b      	mov	r3, r5
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fa fb8b 	bl	8000210 <__aeabi_dsub>
 8005afa:	4622      	mov	r2, r4
 8005afc:	4680      	mov	r8, r0
 8005afe:	4689      	mov	r9, r1
 8005b00:	462b      	mov	r3, r5
 8005b02:	4650      	mov	r0, sl
 8005b04:	4659      	mov	r1, fp
 8005b06:	f7fa fb83 	bl	8000210 <__aeabi_dsub>
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	f7fa fb7f 	bl	8000210 <__aeabi_dsub>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	e7da      	b.n	8005ad2 <__kernel_cos+0xea>
 8005b1c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005b58 <__kernel_cos+0x170>
 8005b20:	e7db      	b.n	8005ada <__kernel_cos+0xf2>
 8005b22:	bf00      	nop
 8005b24:	f3af 8000 	nop.w
 8005b28:	be8838d4 	.word	0xbe8838d4
 8005b2c:	bda8fae9 	.word	0xbda8fae9
 8005b30:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b34:	3e21ee9e 	.word	0x3e21ee9e
 8005b38:	809c52ad 	.word	0x809c52ad
 8005b3c:	3e927e4f 	.word	0x3e927e4f
 8005b40:	19cb1590 	.word	0x19cb1590
 8005b44:	3efa01a0 	.word	0x3efa01a0
 8005b48:	16c15177 	.word	0x16c15177
 8005b4c:	3f56c16c 	.word	0x3f56c16c
 8005b50:	5555554c 	.word	0x5555554c
 8005b54:	3fa55555 	.word	0x3fa55555
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	3ff00000 	.word	0x3ff00000
 8005b60:	3fe00000 	.word	0x3fe00000
 8005b64:	3fd33332 	.word	0x3fd33332
 8005b68:	3ff00000 	.word	0x3ff00000
 8005b6c:	3fe90000 	.word	0x3fe90000
 8005b70:	3fd20000 	.word	0x3fd20000
 8005b74:	00000000 	.word	0x00000000

08005b78 <__kernel_sin>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	ec55 4b10 	vmov	r4, r5, d0
 8005b80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005b84:	b085      	sub	sp, #20
 8005b86:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005b8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005b8e:	4680      	mov	r8, r0
 8005b90:	d205      	bcs.n	8005b9e <__kernel_sin+0x26>
 8005b92:	4620      	mov	r0, r4
 8005b94:	4629      	mov	r1, r5
 8005b96:	f7fa ffa3 	bl	8000ae0 <__aeabi_d2iz>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d052      	beq.n	8005c44 <__kernel_sin+0xcc>
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f7fa fceb 	bl	8000580 <__aeabi_dmul>
 8005baa:	4682      	mov	sl, r0
 8005bac:	468b      	mov	fp, r1
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f7fa fce3 	bl	8000580 <__aeabi_dmul>
 8005bba:	a342      	add	r3, pc, #264	@ (adr r3, 8005cc4 <__kernel_sin+0x14c>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8005bc4:	4650      	mov	r0, sl
 8005bc6:	4659      	mov	r1, fp
 8005bc8:	f7fa fcda 	bl	8000580 <__aeabi_dmul>
 8005bcc:	a33f      	add	r3, pc, #252	@ (adr r3, 8005ccc <__kernel_sin+0x154>)
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f7fa fb1d 	bl	8000210 <__aeabi_dsub>
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	465b      	mov	r3, fp
 8005bda:	f7fa fcd1 	bl	8000580 <__aeabi_dmul>
 8005bde:	a33d      	add	r3, pc, #244	@ (adr r3, 8005cd4 <__kernel_sin+0x15c>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fb16 	bl	8000214 <__adddf3>
 8005be8:	4652      	mov	r2, sl
 8005bea:	465b      	mov	r3, fp
 8005bec:	f7fa fcc8 	bl	8000580 <__aeabi_dmul>
 8005bf0:	a33a      	add	r3, pc, #232	@ (adr r3, 8005cdc <__kernel_sin+0x164>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fb0b 	bl	8000210 <__aeabi_dsub>
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	465b      	mov	r3, fp
 8005bfe:	f7fa fcbf 	bl	8000580 <__aeabi_dmul>
 8005c02:	a338      	add	r3, pc, #224	@ (adr r3, 8005ce4 <__kernel_sin+0x16c>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f7fa fb04 	bl	8000214 <__adddf3>
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	460f      	mov	r7, r1
 8005c10:	f1b8 0f00 	cmp.w	r8, #0
 8005c14:	d11b      	bne.n	8005c4e <__kernel_sin+0xd6>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	f7fa fcaf 	bl	8000580 <__aeabi_dmul>
 8005c22:	a325      	add	r3, pc, #148	@ (adr r3, 8005cb8 <__kernel_sin+0x140>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f7fa faf2 	bl	8000210 <__aeabi_dsub>
 8005c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c30:	f7fa fca6 	bl	8000580 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4620      	mov	r0, r4
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	f7fa faea 	bl	8000214 <__adddf3>
 8005c40:	4604      	mov	r4, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	ec45 4b10 	vmov	d0, r4, r5
 8005c48:	b005      	add	sp, #20
 8005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c52:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc0 <__kernel_sin+0x148>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	f7fa fc93 	bl	8000580 <__aeabi_dmul>
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4689      	mov	r9, r1
 8005c60:	463b      	mov	r3, r7
 8005c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c66:	f7fa fc8b 	bl	8000580 <__aeabi_dmul>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4649      	mov	r1, r9
 8005c72:	f7fa facd 	bl	8000210 <__aeabi_dsub>
 8005c76:	4652      	mov	r2, sl
 8005c78:	465b      	mov	r3, fp
 8005c7a:	f7fa fc81 	bl	8000580 <__aeabi_dmul>
 8005c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c82:	f7fa fac5 	bl	8000210 <__aeabi_dsub>
 8005c86:	a30c      	add	r3, pc, #48	@ (adr r3, 8005cb8 <__kernel_sin+0x140>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	460f      	mov	r7, r1
 8005c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c94:	f7fa fc74 	bl	8000580 <__aeabi_dmul>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa fab8 	bl	8000214 <__adddf3>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4620      	mov	r0, r4
 8005caa:	4629      	mov	r1, r5
 8005cac:	f7fa fab0 	bl	8000210 <__aeabi_dsub>
 8005cb0:	e7c6      	b.n	8005c40 <__kernel_sin+0xc8>
 8005cb2:	bf00      	nop
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	55555549 	.word	0x55555549
 8005cbc:	3fc55555 	.word	0x3fc55555
 8005cc0:	3fe00000 	.word	0x3fe00000
 8005cc4:	5acfd57c 	.word	0x5acfd57c
 8005cc8:	3de5d93a 	.word	0x3de5d93a
 8005ccc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005cd0:	3e5ae5e6 	.word	0x3e5ae5e6
 8005cd4:	57b1fe7d 	.word	0x57b1fe7d
 8005cd8:	3ec71de3 	.word	0x3ec71de3
 8005cdc:	19c161d5 	.word	0x19c161d5
 8005ce0:	3f2a01a0 	.word	0x3f2a01a0
 8005ce4:	1110f8a6 	.word	0x1110f8a6
 8005ce8:	3f811111 	.word	0x3f811111
 8005cec:	00000000 	.word	0x00000000

08005cf0 <__ieee754_acos>:
 8005cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	ec55 4b10 	vmov	r4, r5, d0
 8005cf8:	49b7      	ldr	r1, [pc, #732]	@ (8005fd8 <__ieee754_acos+0x2e8>)
 8005cfa:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005cfe:	428b      	cmp	r3, r1
 8005d00:	d919      	bls.n	8005d36 <__ieee754_acos+0x46>
 8005d02:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8005d06:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8005d0a:	4323      	orrs	r3, r4
 8005d0c:	d106      	bne.n	8005d1c <__ieee754_acos+0x2c>
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	f340 8210 	ble.w	8006134 <__ieee754_acos+0x444>
 8005d14:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8005f68 <__ieee754_acos+0x278>
 8005d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa fa74 	bl	8000210 <__aeabi_dsub>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	f7fa fd52 	bl	80007d4 <__aeabi_ddiv>
 8005d30:	ec41 0b10 	vmov	d0, r0, r1
 8005d34:	e7f0      	b.n	8005d18 <__ieee754_acos+0x28>
 8005d36:	49a9      	ldr	r1, [pc, #676]	@ (8005fdc <__ieee754_acos+0x2ec>)
 8005d38:	428b      	cmp	r3, r1
 8005d3a:	f200 8085 	bhi.w	8005e48 <__ieee754_acos+0x158>
 8005d3e:	4aa8      	ldr	r2, [pc, #672]	@ (8005fe0 <__ieee754_acos+0x2f0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	f240 81fa 	bls.w	800613a <__ieee754_acos+0x44a>
 8005d46:	4622      	mov	r2, r4
 8005d48:	462b      	mov	r3, r5
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa fc17 	bl	8000580 <__aeabi_dmul>
 8005d52:	a387      	add	r3, pc, #540	@ (adr r3, 8005f70 <__ieee754_acos+0x280>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	f7fa fc10 	bl	8000580 <__aeabi_dmul>
 8005d60:	a385      	add	r3, pc, #532	@ (adr r3, 8005f78 <__ieee754_acos+0x288>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f7fa fa55 	bl	8000214 <__adddf3>
 8005d6a:	4632      	mov	r2, r6
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	f7fa fc07 	bl	8000580 <__aeabi_dmul>
 8005d72:	a383      	add	r3, pc, #524	@ (adr r3, 8005f80 <__ieee754_acos+0x290>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fa4a 	bl	8000210 <__aeabi_dsub>
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	463b      	mov	r3, r7
 8005d80:	f7fa fbfe 	bl	8000580 <__aeabi_dmul>
 8005d84:	a380      	add	r3, pc, #512	@ (adr r3, 8005f88 <__ieee754_acos+0x298>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa fa43 	bl	8000214 <__adddf3>
 8005d8e:	4632      	mov	r2, r6
 8005d90:	463b      	mov	r3, r7
 8005d92:	f7fa fbf5 	bl	8000580 <__aeabi_dmul>
 8005d96:	a37e      	add	r3, pc, #504	@ (adr r3, 8005f90 <__ieee754_acos+0x2a0>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa fa38 	bl	8000210 <__aeabi_dsub>
 8005da0:	4632      	mov	r2, r6
 8005da2:	463b      	mov	r3, r7
 8005da4:	f7fa fbec 	bl	8000580 <__aeabi_dmul>
 8005da8:	a37b      	add	r3, pc, #492	@ (adr r3, 8005f98 <__ieee754_acos+0x2a8>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fa31 	bl	8000214 <__adddf3>
 8005db2:	4632      	mov	r2, r6
 8005db4:	463b      	mov	r3, r7
 8005db6:	f7fa fbe3 	bl	8000580 <__aeabi_dmul>
 8005dba:	a379      	add	r3, pc, #484	@ (adr r3, 8005fa0 <__ieee754_acos+0x2b0>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	4689      	mov	r9, r1
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fbda 	bl	8000580 <__aeabi_dmul>
 8005dcc:	a376      	add	r3, pc, #472	@ (adr r3, 8005fa8 <__ieee754_acos+0x2b8>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fa1d 	bl	8000210 <__aeabi_dsub>
 8005dd6:	4632      	mov	r2, r6
 8005dd8:	463b      	mov	r3, r7
 8005dda:	f7fa fbd1 	bl	8000580 <__aeabi_dmul>
 8005dde:	a374      	add	r3, pc, #464	@ (adr r3, 8005fb0 <__ieee754_acos+0x2c0>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fa16 	bl	8000214 <__adddf3>
 8005de8:	4632      	mov	r2, r6
 8005dea:	463b      	mov	r3, r7
 8005dec:	f7fa fbc8 	bl	8000580 <__aeabi_dmul>
 8005df0:	a371      	add	r3, pc, #452	@ (adr r3, 8005fb8 <__ieee754_acos+0x2c8>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa fa0b 	bl	8000210 <__aeabi_dsub>
 8005dfa:	4632      	mov	r2, r6
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	f7fa fbbf 	bl	8000580 <__aeabi_dmul>
 8005e02:	4b78      	ldr	r3, [pc, #480]	@ (8005fe4 <__ieee754_acos+0x2f4>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	f7fa fa05 	bl	8000214 <__adddf3>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4640      	mov	r0, r8
 8005e10:	4649      	mov	r1, r9
 8005e12:	f7fa fcdf 	bl	80007d4 <__aeabi_ddiv>
 8005e16:	4622      	mov	r2, r4
 8005e18:	462b      	mov	r3, r5
 8005e1a:	f7fa fbb1 	bl	8000580 <__aeabi_dmul>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	a167      	add	r1, pc, #412	@ (adr r1, 8005fc0 <__ieee754_acos+0x2d0>)
 8005e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e28:	f7fa f9f2 	bl	8000210 <__aeabi_dsub>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4620      	mov	r0, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	f7fa f9ec 	bl	8000210 <__aeabi_dsub>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	a162      	add	r1, pc, #392	@ (adr r1, 8005fc8 <__ieee754_acos+0x2d8>)
 8005e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e42:	f7fa f9e5 	bl	8000210 <__aeabi_dsub>
 8005e46:	e773      	b.n	8005d30 <__ieee754_acos+0x40>
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	f280 80cf 	bge.w	8005fec <__ieee754_acos+0x2fc>
 8005e4e:	4b65      	ldr	r3, [pc, #404]	@ (8005fe4 <__ieee754_acos+0x2f4>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa f9dd 	bl	8000214 <__adddf3>
 8005e5a:	4b63      	ldr	r3, [pc, #396]	@ (8005fe8 <__ieee754_acos+0x2f8>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f7fa fb8f 	bl	8000580 <__aeabi_dmul>
 8005e62:	a343      	add	r3, pc, #268	@ (adr r3, 8005f70 <__ieee754_acos+0x280>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	4604      	mov	r4, r0
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	f7fa fb88 	bl	8000580 <__aeabi_dmul>
 8005e70:	a341      	add	r3, pc, #260	@ (adr r3, 8005f78 <__ieee754_acos+0x288>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa f9cd 	bl	8000214 <__adddf3>
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	f7fa fb7f 	bl	8000580 <__aeabi_dmul>
 8005e82:	a33f      	add	r3, pc, #252	@ (adr r3, 8005f80 <__ieee754_acos+0x290>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa f9c2 	bl	8000210 <__aeabi_dsub>
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	462b      	mov	r3, r5
 8005e90:	f7fa fb76 	bl	8000580 <__aeabi_dmul>
 8005e94:	a33c      	add	r3, pc, #240	@ (adr r3, 8005f88 <__ieee754_acos+0x298>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f7fa f9bb 	bl	8000214 <__adddf3>
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	f7fa fb6d 	bl	8000580 <__aeabi_dmul>
 8005ea6:	a33a      	add	r3, pc, #232	@ (adr r3, 8005f90 <__ieee754_acos+0x2a0>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa f9b0 	bl	8000210 <__aeabi_dsub>
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	462b      	mov	r3, r5
 8005eb4:	f7fa fb64 	bl	8000580 <__aeabi_dmul>
 8005eb8:	a337      	add	r3, pc, #220	@ (adr r3, 8005f98 <__ieee754_acos+0x2a8>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa f9a9 	bl	8000214 <__adddf3>
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	f7fa fb5b 	bl	8000580 <__aeabi_dmul>
 8005eca:	a335      	add	r3, pc, #212	@ (adr r3, 8005fa0 <__ieee754_acos+0x2b0>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	460f      	mov	r7, r1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f7fa fb52 	bl	8000580 <__aeabi_dmul>
 8005edc:	a332      	add	r3, pc, #200	@ (adr r3, 8005fa8 <__ieee754_acos+0x2b8>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f7fa f995 	bl	8000210 <__aeabi_dsub>
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	462b      	mov	r3, r5
 8005eea:	f7fa fb49 	bl	8000580 <__aeabi_dmul>
 8005eee:	a330      	add	r3, pc, #192	@ (adr r3, 8005fb0 <__ieee754_acos+0x2c0>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa f98e 	bl	8000214 <__adddf3>
 8005ef8:	4622      	mov	r2, r4
 8005efa:	462b      	mov	r3, r5
 8005efc:	f7fa fb40 	bl	8000580 <__aeabi_dmul>
 8005f00:	a32d      	add	r3, pc, #180	@ (adr r3, 8005fb8 <__ieee754_acos+0x2c8>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa f983 	bl	8000210 <__aeabi_dsub>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	f7fa fb37 	bl	8000580 <__aeabi_dmul>
 8005f12:	4b34      	ldr	r3, [pc, #208]	@ (8005fe4 <__ieee754_acos+0x2f4>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	f7fa f97d 	bl	8000214 <__adddf3>
 8005f1a:	ec45 4b10 	vmov	d0, r4, r5
 8005f1e:	4680      	mov	r8, r0
 8005f20:	4689      	mov	r9, r1
 8005f22:	f7ff fc85 	bl	8005830 <__ieee754_sqrt>
 8005f26:	ec55 4b10 	vmov	r4, r5, d0
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa fc4f 	bl	80007d4 <__aeabi_ddiv>
 8005f36:	4622      	mov	r2, r4
 8005f38:	462b      	mov	r3, r5
 8005f3a:	f7fa fb21 	bl	8000580 <__aeabi_dmul>
 8005f3e:	a320      	add	r3, pc, #128	@ (adr r3, 8005fc0 <__ieee754_acos+0x2d0>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa f964 	bl	8000210 <__aeabi_dsub>
 8005f48:	4622      	mov	r2, r4
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	f7fa f962 	bl	8000214 <__adddf3>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	f7fa f95e 	bl	8000214 <__adddf3>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	a11c      	add	r1, pc, #112	@ (adr r1, 8005fd0 <__ieee754_acos+0x2e0>)
 8005f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f62:	e76e      	b.n	8005e42 <__ieee754_acos+0x152>
 8005f64:	f3af 8000 	nop.w
	...
 8005f70:	0dfdf709 	.word	0x0dfdf709
 8005f74:	3f023de1 	.word	0x3f023de1
 8005f78:	7501b288 	.word	0x7501b288
 8005f7c:	3f49efe0 	.word	0x3f49efe0
 8005f80:	b5688f3b 	.word	0xb5688f3b
 8005f84:	3fa48228 	.word	0x3fa48228
 8005f88:	0e884455 	.word	0x0e884455
 8005f8c:	3fc9c155 	.word	0x3fc9c155
 8005f90:	03eb6f7d 	.word	0x03eb6f7d
 8005f94:	3fd4d612 	.word	0x3fd4d612
 8005f98:	55555555 	.word	0x55555555
 8005f9c:	3fc55555 	.word	0x3fc55555
 8005fa0:	b12e9282 	.word	0xb12e9282
 8005fa4:	3fb3b8c5 	.word	0x3fb3b8c5
 8005fa8:	1b8d0159 	.word	0x1b8d0159
 8005fac:	3fe6066c 	.word	0x3fe6066c
 8005fb0:	9c598ac8 	.word	0x9c598ac8
 8005fb4:	40002ae5 	.word	0x40002ae5
 8005fb8:	1c8a2d4b 	.word	0x1c8a2d4b
 8005fbc:	40033a27 	.word	0x40033a27
 8005fc0:	33145c07 	.word	0x33145c07
 8005fc4:	3c91a626 	.word	0x3c91a626
 8005fc8:	54442d18 	.word	0x54442d18
 8005fcc:	3ff921fb 	.word	0x3ff921fb
 8005fd0:	54442d18 	.word	0x54442d18
 8005fd4:	400921fb 	.word	0x400921fb
 8005fd8:	3fefffff 	.word	0x3fefffff
 8005fdc:	3fdfffff 	.word	0x3fdfffff
 8005fe0:	3c600000 	.word	0x3c600000
 8005fe4:	3ff00000 	.word	0x3ff00000
 8005fe8:	3fe00000 	.word	0x3fe00000
 8005fec:	4622      	mov	r2, r4
 8005fee:	462b      	mov	r3, r5
 8005ff0:	496b      	ldr	r1, [pc, #428]	@ (80061a0 <__ieee754_acos+0x4b0>)
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f7fa f90c 	bl	8000210 <__aeabi_dsub>
 8005ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80061a4 <__ieee754_acos+0x4b4>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f7fa fac0 	bl	8000580 <__aeabi_dmul>
 8006000:	4604      	mov	r4, r0
 8006002:	460d      	mov	r5, r1
 8006004:	ec45 4b10 	vmov	d0, r4, r5
 8006008:	f7ff fc12 	bl	8005830 <__ieee754_sqrt>
 800600c:	a34c      	add	r3, pc, #304	@ (adr r3, 8006140 <__ieee754_acos+0x450>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	4620      	mov	r0, r4
 8006014:	4629      	mov	r1, r5
 8006016:	ec59 8b10 	vmov	r8, r9, d0
 800601a:	f7fa fab1 	bl	8000580 <__aeabi_dmul>
 800601e:	a34a      	add	r3, pc, #296	@ (adr r3, 8006148 <__ieee754_acos+0x458>)
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f7fa f8f6 	bl	8000214 <__adddf3>
 8006028:	4622      	mov	r2, r4
 800602a:	462b      	mov	r3, r5
 800602c:	f7fa faa8 	bl	8000580 <__aeabi_dmul>
 8006030:	a347      	add	r3, pc, #284	@ (adr r3, 8006150 <__ieee754_acos+0x460>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa f8eb 	bl	8000210 <__aeabi_dsub>
 800603a:	4622      	mov	r2, r4
 800603c:	462b      	mov	r3, r5
 800603e:	f7fa fa9f 	bl	8000580 <__aeabi_dmul>
 8006042:	a345      	add	r3, pc, #276	@ (adr r3, 8006158 <__ieee754_acos+0x468>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f8e4 	bl	8000214 <__adddf3>
 800604c:	4622      	mov	r2, r4
 800604e:	462b      	mov	r3, r5
 8006050:	f7fa fa96 	bl	8000580 <__aeabi_dmul>
 8006054:	a342      	add	r3, pc, #264	@ (adr r3, 8006160 <__ieee754_acos+0x470>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa f8d9 	bl	8000210 <__aeabi_dsub>
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	f7fa fa8d 	bl	8000580 <__aeabi_dmul>
 8006066:	a340      	add	r3, pc, #256	@ (adr r3, 8006168 <__ieee754_acos+0x478>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa f8d2 	bl	8000214 <__adddf3>
 8006070:	4622      	mov	r2, r4
 8006072:	462b      	mov	r3, r5
 8006074:	f7fa fa84 	bl	8000580 <__aeabi_dmul>
 8006078:	a33d      	add	r3, pc, #244	@ (adr r3, 8006170 <__ieee754_acos+0x480>)
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	4682      	mov	sl, r0
 8006080:	468b      	mov	fp, r1
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa fa7b 	bl	8000580 <__aeabi_dmul>
 800608a:	a33b      	add	r3, pc, #236	@ (adr r3, 8006178 <__ieee754_acos+0x488>)
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f7fa f8be 	bl	8000210 <__aeabi_dsub>
 8006094:	4622      	mov	r2, r4
 8006096:	462b      	mov	r3, r5
 8006098:	f7fa fa72 	bl	8000580 <__aeabi_dmul>
 800609c:	a338      	add	r3, pc, #224	@ (adr r3, 8006180 <__ieee754_acos+0x490>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	f7fa f8b7 	bl	8000214 <__adddf3>
 80060a6:	4622      	mov	r2, r4
 80060a8:	462b      	mov	r3, r5
 80060aa:	f7fa fa69 	bl	8000580 <__aeabi_dmul>
 80060ae:	a336      	add	r3, pc, #216	@ (adr r3, 8006188 <__ieee754_acos+0x498>)
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f7fa f8ac 	bl	8000210 <__aeabi_dsub>
 80060b8:	4622      	mov	r2, r4
 80060ba:	462b      	mov	r3, r5
 80060bc:	f7fa fa60 	bl	8000580 <__aeabi_dmul>
 80060c0:	4b37      	ldr	r3, [pc, #220]	@ (80061a0 <__ieee754_acos+0x4b0>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	f7fa f8a6 	bl	8000214 <__adddf3>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4650      	mov	r0, sl
 80060ce:	4659      	mov	r1, fp
 80060d0:	f7fa fb80 	bl	80007d4 <__aeabi_ddiv>
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	f7fa fa52 	bl	8000580 <__aeabi_dmul>
 80060dc:	2600      	movs	r6, #0
 80060de:	4682      	mov	sl, r0
 80060e0:	468b      	mov	fp, r1
 80060e2:	4632      	mov	r2, r6
 80060e4:	464b      	mov	r3, r9
 80060e6:	4630      	mov	r0, r6
 80060e8:	4649      	mov	r1, r9
 80060ea:	f7fa fa49 	bl	8000580 <__aeabi_dmul>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4620      	mov	r0, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	f7fa f88b 	bl	8000210 <__aeabi_dsub>
 80060fa:	4632      	mov	r2, r6
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	464b      	mov	r3, r9
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa f885 	bl	8000214 <__adddf3>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa fb5f 	bl	80007d4 <__aeabi_ddiv>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa f879 	bl	8000214 <__adddf3>
 8006122:	4632      	mov	r2, r6
 8006124:	464b      	mov	r3, r9
 8006126:	f7fa f875 	bl	8000214 <__adddf3>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	f7fa f871 	bl	8000214 <__adddf3>
 8006132:	e5fd      	b.n	8005d30 <__ieee754_acos+0x40>
 8006134:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8006190 <__ieee754_acos+0x4a0>
 8006138:	e5ee      	b.n	8005d18 <__ieee754_acos+0x28>
 800613a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006198 <__ieee754_acos+0x4a8>
 800613e:	e5eb      	b.n	8005d18 <__ieee754_acos+0x28>
 8006140:	0dfdf709 	.word	0x0dfdf709
 8006144:	3f023de1 	.word	0x3f023de1
 8006148:	7501b288 	.word	0x7501b288
 800614c:	3f49efe0 	.word	0x3f49efe0
 8006150:	b5688f3b 	.word	0xb5688f3b
 8006154:	3fa48228 	.word	0x3fa48228
 8006158:	0e884455 	.word	0x0e884455
 800615c:	3fc9c155 	.word	0x3fc9c155
 8006160:	03eb6f7d 	.word	0x03eb6f7d
 8006164:	3fd4d612 	.word	0x3fd4d612
 8006168:	55555555 	.word	0x55555555
 800616c:	3fc55555 	.word	0x3fc55555
 8006170:	b12e9282 	.word	0xb12e9282
 8006174:	3fb3b8c5 	.word	0x3fb3b8c5
 8006178:	1b8d0159 	.word	0x1b8d0159
 800617c:	3fe6066c 	.word	0x3fe6066c
 8006180:	9c598ac8 	.word	0x9c598ac8
 8006184:	40002ae5 	.word	0x40002ae5
 8006188:	1c8a2d4b 	.word	0x1c8a2d4b
 800618c:	40033a27 	.word	0x40033a27
 8006190:	54442d18 	.word	0x54442d18
 8006194:	400921fb 	.word	0x400921fb
 8006198:	54442d18 	.word	0x54442d18
 800619c:	3ff921fb 	.word	0x3ff921fb
 80061a0:	3ff00000 	.word	0x3ff00000
 80061a4:	3fe00000 	.word	0x3fe00000

080061a8 <__ieee754_atan2>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	ec57 6b11 	vmov	r6, r7, d1
 80061b0:	4273      	negs	r3, r6
 80061b2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006330 <__ieee754_atan2+0x188>
 80061b6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80061ba:	4333      	orrs	r3, r6
 80061bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80061c0:	4543      	cmp	r3, r8
 80061c2:	ec51 0b10 	vmov	r0, r1, d0
 80061c6:	4635      	mov	r5, r6
 80061c8:	d809      	bhi.n	80061de <__ieee754_atan2+0x36>
 80061ca:	4244      	negs	r4, r0
 80061cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80061d0:	4304      	orrs	r4, r0
 80061d2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80061d6:	4544      	cmp	r4, r8
 80061d8:	468e      	mov	lr, r1
 80061da:	4681      	mov	r9, r0
 80061dc:	d907      	bls.n	80061ee <__ieee754_atan2+0x46>
 80061de:	4632      	mov	r2, r6
 80061e0:	463b      	mov	r3, r7
 80061e2:	f7fa f817 	bl	8000214 <__adddf3>
 80061e6:	ec41 0b10 	vmov	d0, r0, r1
 80061ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ee:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80061f2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80061f6:	4334      	orrs	r4, r6
 80061f8:	d103      	bne.n	8006202 <__ieee754_atan2+0x5a>
 80061fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061fe:	f001 b8e3 	b.w	80073c8 <atan>
 8006202:	17bc      	asrs	r4, r7, #30
 8006204:	f004 0402 	and.w	r4, r4, #2
 8006208:	ea53 0909 	orrs.w	r9, r3, r9
 800620c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006210:	d107      	bne.n	8006222 <__ieee754_atan2+0x7a>
 8006212:	2c02      	cmp	r4, #2
 8006214:	d05f      	beq.n	80062d6 <__ieee754_atan2+0x12e>
 8006216:	2c03      	cmp	r4, #3
 8006218:	d1e5      	bne.n	80061e6 <__ieee754_atan2+0x3e>
 800621a:	a141      	add	r1, pc, #260	@ (adr r1, 8006320 <__ieee754_atan2+0x178>)
 800621c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006220:	e7e1      	b.n	80061e6 <__ieee754_atan2+0x3e>
 8006222:	4315      	orrs	r5, r2
 8006224:	d106      	bne.n	8006234 <__ieee754_atan2+0x8c>
 8006226:	f1be 0f00 	cmp.w	lr, #0
 800622a:	da5f      	bge.n	80062ec <__ieee754_atan2+0x144>
 800622c:	a13e      	add	r1, pc, #248	@ (adr r1, 8006328 <__ieee754_atan2+0x180>)
 800622e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006232:	e7d8      	b.n	80061e6 <__ieee754_atan2+0x3e>
 8006234:	4542      	cmp	r2, r8
 8006236:	d10f      	bne.n	8006258 <__ieee754_atan2+0xb0>
 8006238:	4293      	cmp	r3, r2
 800623a:	f104 34ff 	add.w	r4, r4, #4294967295
 800623e:	d107      	bne.n	8006250 <__ieee754_atan2+0xa8>
 8006240:	2c02      	cmp	r4, #2
 8006242:	d84c      	bhi.n	80062de <__ieee754_atan2+0x136>
 8006244:	4b34      	ldr	r3, [pc, #208]	@ (8006318 <__ieee754_atan2+0x170>)
 8006246:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800624a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800624e:	e7ca      	b.n	80061e6 <__ieee754_atan2+0x3e>
 8006250:	2c02      	cmp	r4, #2
 8006252:	d848      	bhi.n	80062e6 <__ieee754_atan2+0x13e>
 8006254:	4b31      	ldr	r3, [pc, #196]	@ (800631c <__ieee754_atan2+0x174>)
 8006256:	e7f6      	b.n	8006246 <__ieee754_atan2+0x9e>
 8006258:	4543      	cmp	r3, r8
 800625a:	d0e4      	beq.n	8006226 <__ieee754_atan2+0x7e>
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006262:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006266:	da1e      	bge.n	80062a6 <__ieee754_atan2+0xfe>
 8006268:	2f00      	cmp	r7, #0
 800626a:	da01      	bge.n	8006270 <__ieee754_atan2+0xc8>
 800626c:	323c      	adds	r2, #60	@ 0x3c
 800626e:	db1e      	blt.n	80062ae <__ieee754_atan2+0x106>
 8006270:	4632      	mov	r2, r6
 8006272:	463b      	mov	r3, r7
 8006274:	f7fa faae 	bl	80007d4 <__aeabi_ddiv>
 8006278:	ec41 0b10 	vmov	d0, r0, r1
 800627c:	f7ff fa14 	bl	80056a8 <fabs>
 8006280:	f001 f8a2 	bl	80073c8 <atan>
 8006284:	ec51 0b10 	vmov	r0, r1, d0
 8006288:	2c01      	cmp	r4, #1
 800628a:	d013      	beq.n	80062b4 <__ieee754_atan2+0x10c>
 800628c:	2c02      	cmp	r4, #2
 800628e:	d015      	beq.n	80062bc <__ieee754_atan2+0x114>
 8006290:	2c00      	cmp	r4, #0
 8006292:	d0a8      	beq.n	80061e6 <__ieee754_atan2+0x3e>
 8006294:	a318      	add	r3, pc, #96	@ (adr r3, 80062f8 <__ieee754_atan2+0x150>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f7f9 ffb9 	bl	8000210 <__aeabi_dsub>
 800629e:	a318      	add	r3, pc, #96	@ (adr r3, 8006300 <__ieee754_atan2+0x158>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	e014      	b.n	80062d0 <__ieee754_atan2+0x128>
 80062a6:	a118      	add	r1, pc, #96	@ (adr r1, 8006308 <__ieee754_atan2+0x160>)
 80062a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ac:	e7ec      	b.n	8006288 <__ieee754_atan2+0xe0>
 80062ae:	2000      	movs	r0, #0
 80062b0:	2100      	movs	r1, #0
 80062b2:	e7e9      	b.n	8006288 <__ieee754_atan2+0xe0>
 80062b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062b8:	4619      	mov	r1, r3
 80062ba:	e794      	b.n	80061e6 <__ieee754_atan2+0x3e>
 80062bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80062f8 <__ieee754_atan2+0x150>)
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f7f9 ffa5 	bl	8000210 <__aeabi_dsub>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	a10d      	add	r1, pc, #52	@ (adr r1, 8006300 <__ieee754_atan2+0x158>)
 80062cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062d0:	f7f9 ff9e 	bl	8000210 <__aeabi_dsub>
 80062d4:	e787      	b.n	80061e6 <__ieee754_atan2+0x3e>
 80062d6:	a10a      	add	r1, pc, #40	@ (adr r1, 8006300 <__ieee754_atan2+0x158>)
 80062d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062dc:	e783      	b.n	80061e6 <__ieee754_atan2+0x3e>
 80062de:	a10c      	add	r1, pc, #48	@ (adr r1, 8006310 <__ieee754_atan2+0x168>)
 80062e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062e4:	e77f      	b.n	80061e6 <__ieee754_atan2+0x3e>
 80062e6:	2000      	movs	r0, #0
 80062e8:	2100      	movs	r1, #0
 80062ea:	e77c      	b.n	80061e6 <__ieee754_atan2+0x3e>
 80062ec:	a106      	add	r1, pc, #24	@ (adr r1, 8006308 <__ieee754_atan2+0x160>)
 80062ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062f2:	e778      	b.n	80061e6 <__ieee754_atan2+0x3e>
 80062f4:	f3af 8000 	nop.w
 80062f8:	33145c07 	.word	0x33145c07
 80062fc:	3ca1a626 	.word	0x3ca1a626
 8006300:	54442d18 	.word	0x54442d18
 8006304:	400921fb 	.word	0x400921fb
 8006308:	54442d18 	.word	0x54442d18
 800630c:	3ff921fb 	.word	0x3ff921fb
 8006310:	54442d18 	.word	0x54442d18
 8006314:	3fe921fb 	.word	0x3fe921fb
 8006318:	08008300 	.word	0x08008300
 800631c:	080082e8 	.word	0x080082e8
 8006320:	54442d18 	.word	0x54442d18
 8006324:	c00921fb 	.word	0xc00921fb
 8006328:	54442d18 	.word	0x54442d18
 800632c:	bff921fb 	.word	0xbff921fb
 8006330:	7ff00000 	.word	0x7ff00000

08006334 <__ieee754_fmod>:
 8006334:	ec53 2b11 	vmov	r2, r3, d1
 8006338:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800633c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006340:	ea52 040c 	orrs.w	r4, r2, ip
 8006344:	ec51 0b10 	vmov	r0, r1, d0
 8006348:	461e      	mov	r6, r3
 800634a:	4617      	mov	r7, r2
 800634c:	4696      	mov	lr, r2
 800634e:	d00c      	beq.n	800636a <__ieee754_fmod+0x36>
 8006350:	4c77      	ldr	r4, [pc, #476]	@ (8006530 <__ieee754_fmod+0x1fc>)
 8006352:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8006356:	45a0      	cmp	r8, r4
 8006358:	4689      	mov	r9, r1
 800635a:	d806      	bhi.n	800636a <__ieee754_fmod+0x36>
 800635c:	4254      	negs	r4, r2
 800635e:	4d75      	ldr	r5, [pc, #468]	@ (8006534 <__ieee754_fmod+0x200>)
 8006360:	4314      	orrs	r4, r2
 8006362:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8006366:	42ac      	cmp	r4, r5
 8006368:	d909      	bls.n	800637e <__ieee754_fmod+0x4a>
 800636a:	f7fa f909 	bl	8000580 <__aeabi_dmul>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	f7fa fa2f 	bl	80007d4 <__aeabi_ddiv>
 8006376:	ec41 0b10 	vmov	d0, r0, r1
 800637a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637e:	45e0      	cmp	r8, ip
 8006380:	4682      	mov	sl, r0
 8006382:	4604      	mov	r4, r0
 8006384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006388:	dc09      	bgt.n	800639e <__ieee754_fmod+0x6a>
 800638a:	dbf4      	blt.n	8006376 <__ieee754_fmod+0x42>
 800638c:	4282      	cmp	r2, r0
 800638e:	d8f2      	bhi.n	8006376 <__ieee754_fmod+0x42>
 8006390:	d105      	bne.n	800639e <__ieee754_fmod+0x6a>
 8006392:	4b69      	ldr	r3, [pc, #420]	@ (8006538 <__ieee754_fmod+0x204>)
 8006394:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8006398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800639c:	e7eb      	b.n	8006376 <__ieee754_fmod+0x42>
 800639e:	4a65      	ldr	r2, [pc, #404]	@ (8006534 <__ieee754_fmod+0x200>)
 80063a0:	ea19 0f02 	tst.w	r9, r2
 80063a4:	d148      	bne.n	8006438 <__ieee754_fmod+0x104>
 80063a6:	f1b8 0f00 	cmp.w	r8, #0
 80063aa:	d13d      	bne.n	8006428 <__ieee754_fmod+0xf4>
 80063ac:	4963      	ldr	r1, [pc, #396]	@ (800653c <__ieee754_fmod+0x208>)
 80063ae:	4653      	mov	r3, sl
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dc36      	bgt.n	8006422 <__ieee754_fmod+0xee>
 80063b4:	4216      	tst	r6, r2
 80063b6:	d14f      	bne.n	8006458 <__ieee754_fmod+0x124>
 80063b8:	f1bc 0f00 	cmp.w	ip, #0
 80063bc:	d144      	bne.n	8006448 <__ieee754_fmod+0x114>
 80063be:	4a5f      	ldr	r2, [pc, #380]	@ (800653c <__ieee754_fmod+0x208>)
 80063c0:	463b      	mov	r3, r7
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	dc3d      	bgt.n	8006442 <__ieee754_fmod+0x10e>
 80063c6:	485e      	ldr	r0, [pc, #376]	@ (8006540 <__ieee754_fmod+0x20c>)
 80063c8:	4281      	cmp	r1, r0
 80063ca:	db4a      	blt.n	8006462 <__ieee754_fmod+0x12e>
 80063cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063d4:	485a      	ldr	r0, [pc, #360]	@ (8006540 <__ieee754_fmod+0x20c>)
 80063d6:	4282      	cmp	r2, r0
 80063d8:	db57      	blt.n	800648a <__ieee754_fmod+0x156>
 80063da:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80063de:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80063e2:	1a89      	subs	r1, r1, r2
 80063e4:	1b98      	subs	r0, r3, r6
 80063e6:	eba4 070e 	sub.w	r7, r4, lr
 80063ea:	2900      	cmp	r1, #0
 80063ec:	d162      	bne.n	80064b4 <__ieee754_fmod+0x180>
 80063ee:	4574      	cmp	r4, lr
 80063f0:	bf38      	it	cc
 80063f2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80063f6:	2800      	cmp	r0, #0
 80063f8:	bfa4      	itt	ge
 80063fa:	463c      	movge	r4, r7
 80063fc:	4603      	movge	r3, r0
 80063fe:	ea53 0104 	orrs.w	r1, r3, r4
 8006402:	d0c6      	beq.n	8006392 <__ieee754_fmod+0x5e>
 8006404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006408:	db69      	blt.n	80064de <__ieee754_fmod+0x1aa>
 800640a:	494d      	ldr	r1, [pc, #308]	@ (8006540 <__ieee754_fmod+0x20c>)
 800640c:	428a      	cmp	r2, r1
 800640e:	db6c      	blt.n	80064ea <__ieee754_fmod+0x1b6>
 8006410:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006414:	432b      	orrs	r3, r5
 8006416:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800641a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800641e:	4620      	mov	r0, r4
 8006420:	e7a9      	b.n	8006376 <__ieee754_fmod+0x42>
 8006422:	3901      	subs	r1, #1
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	e7c3      	b.n	80063b0 <__ieee754_fmod+0x7c>
 8006428:	4945      	ldr	r1, [pc, #276]	@ (8006540 <__ieee754_fmod+0x20c>)
 800642a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800642e:	2b00      	cmp	r3, #0
 8006430:	ddc0      	ble.n	80063b4 <__ieee754_fmod+0x80>
 8006432:	3901      	subs	r1, #1
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	e7fa      	b.n	800642e <__ieee754_fmod+0xfa>
 8006438:	ea4f 5128 	mov.w	r1, r8, asr #20
 800643c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006440:	e7b8      	b.n	80063b4 <__ieee754_fmod+0x80>
 8006442:	3a01      	subs	r2, #1
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	e7bc      	b.n	80063c2 <__ieee754_fmod+0x8e>
 8006448:	4a3d      	ldr	r2, [pc, #244]	@ (8006540 <__ieee754_fmod+0x20c>)
 800644a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800644e:	2b00      	cmp	r3, #0
 8006450:	ddb9      	ble.n	80063c6 <__ieee754_fmod+0x92>
 8006452:	3a01      	subs	r2, #1
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	e7fa      	b.n	800644e <__ieee754_fmod+0x11a>
 8006458:	ea4f 522c 	mov.w	r2, ip, asr #20
 800645c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006460:	e7b1      	b.n	80063c6 <__ieee754_fmod+0x92>
 8006462:	1a40      	subs	r0, r0, r1
 8006464:	281f      	cmp	r0, #31
 8006466:	dc0a      	bgt.n	800647e <__ieee754_fmod+0x14a>
 8006468:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800646c:	fa08 f800 	lsl.w	r8, r8, r0
 8006470:	fa2a f303 	lsr.w	r3, sl, r3
 8006474:	ea43 0308 	orr.w	r3, r3, r8
 8006478:	fa0a f400 	lsl.w	r4, sl, r0
 800647c:	e7aa      	b.n	80063d4 <__ieee754_fmod+0xa0>
 800647e:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <__ieee754_fmod+0x210>)
 8006480:	1a5b      	subs	r3, r3, r1
 8006482:	fa0a f303 	lsl.w	r3, sl, r3
 8006486:	2400      	movs	r4, #0
 8006488:	e7a4      	b.n	80063d4 <__ieee754_fmod+0xa0>
 800648a:	1a80      	subs	r0, r0, r2
 800648c:	281f      	cmp	r0, #31
 800648e:	dc0a      	bgt.n	80064a6 <__ieee754_fmod+0x172>
 8006490:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8006494:	fa0c fc00 	lsl.w	ip, ip, r0
 8006498:	fa27 f606 	lsr.w	r6, r7, r6
 800649c:	ea46 060c 	orr.w	r6, r6, ip
 80064a0:	fa07 fe00 	lsl.w	lr, r7, r0
 80064a4:	e79d      	b.n	80063e2 <__ieee754_fmod+0xae>
 80064a6:	4e27      	ldr	r6, [pc, #156]	@ (8006544 <__ieee754_fmod+0x210>)
 80064a8:	1ab6      	subs	r6, r6, r2
 80064aa:	fa07 f606 	lsl.w	r6, r7, r6
 80064ae:	f04f 0e00 	mov.w	lr, #0
 80064b2:	e796      	b.n	80063e2 <__ieee754_fmod+0xae>
 80064b4:	4574      	cmp	r4, lr
 80064b6:	bf38      	it	cc
 80064b8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80064bc:	2800      	cmp	r0, #0
 80064be:	da05      	bge.n	80064cc <__ieee754_fmod+0x198>
 80064c0:	0fe0      	lsrs	r0, r4, #31
 80064c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80064c6:	0064      	lsls	r4, r4, #1
 80064c8:	3901      	subs	r1, #1
 80064ca:	e78b      	b.n	80063e4 <__ieee754_fmod+0xb0>
 80064cc:	ea50 0307 	orrs.w	r3, r0, r7
 80064d0:	f43f af5f 	beq.w	8006392 <__ieee754_fmod+0x5e>
 80064d4:	0ffb      	lsrs	r3, r7, #31
 80064d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80064da:	007c      	lsls	r4, r7, #1
 80064dc:	e7f4      	b.n	80064c8 <__ieee754_fmod+0x194>
 80064de:	0fe1      	lsrs	r1, r4, #31
 80064e0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80064e4:	0064      	lsls	r4, r4, #1
 80064e6:	3a01      	subs	r2, #1
 80064e8:	e78c      	b.n	8006404 <__ieee754_fmod+0xd0>
 80064ea:	1a89      	subs	r1, r1, r2
 80064ec:	2914      	cmp	r1, #20
 80064ee:	dc0a      	bgt.n	8006506 <__ieee754_fmod+0x1d2>
 80064f0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80064f4:	fa03 f202 	lsl.w	r2, r3, r2
 80064f8:	40cc      	lsrs	r4, r1
 80064fa:	4322      	orrs	r2, r4
 80064fc:	410b      	asrs	r3, r1
 80064fe:	ea43 0105 	orr.w	r1, r3, r5
 8006502:	4610      	mov	r0, r2
 8006504:	e737      	b.n	8006376 <__ieee754_fmod+0x42>
 8006506:	291f      	cmp	r1, #31
 8006508:	dc07      	bgt.n	800651a <__ieee754_fmod+0x1e6>
 800650a:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800650e:	40cc      	lsrs	r4, r1
 8006510:	fa03 f202 	lsl.w	r2, r3, r2
 8006514:	4322      	orrs	r2, r4
 8006516:	462b      	mov	r3, r5
 8006518:	e7f1      	b.n	80064fe <__ieee754_fmod+0x1ca>
 800651a:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800651e:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8006522:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8006526:	32e2      	adds	r2, #226	@ 0xe2
 8006528:	fa43 f202 	asr.w	r2, r3, r2
 800652c:	e7f3      	b.n	8006516 <__ieee754_fmod+0x1e2>
 800652e:	bf00      	nop
 8006530:	7fefffff 	.word	0x7fefffff
 8006534:	7ff00000 	.word	0x7ff00000
 8006538:	08008318 	.word	0x08008318
 800653c:	fffffbed 	.word	0xfffffbed
 8006540:	fffffc02 	.word	0xfffffc02
 8006544:	fffffbe2 	.word	0xfffffbe2

08006548 <__ieee754_pow>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	b091      	sub	sp, #68	@ 0x44
 800654e:	ed8d 1b00 	vstr	d1, [sp]
 8006552:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006556:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800655a:	ea5a 0001 	orrs.w	r0, sl, r1
 800655e:	ec57 6b10 	vmov	r6, r7, d0
 8006562:	d113      	bne.n	800658c <__ieee754_pow+0x44>
 8006564:	19b3      	adds	r3, r6, r6
 8006566:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800656a:	4152      	adcs	r2, r2
 800656c:	4298      	cmp	r0, r3
 800656e:	4b98      	ldr	r3, [pc, #608]	@ (80067d0 <__ieee754_pow+0x288>)
 8006570:	4193      	sbcs	r3, r2
 8006572:	f080 84ea 	bcs.w	8006f4a <__ieee754_pow+0xa02>
 8006576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7f9 fe49 	bl	8000214 <__adddf3>
 8006582:	ec41 0b10 	vmov	d0, r0, r1
 8006586:	b011      	add	sp, #68	@ 0x44
 8006588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658c:	4a91      	ldr	r2, [pc, #580]	@ (80067d4 <__ieee754_pow+0x28c>)
 800658e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006592:	4590      	cmp	r8, r2
 8006594:	463d      	mov	r5, r7
 8006596:	4633      	mov	r3, r6
 8006598:	d806      	bhi.n	80065a8 <__ieee754_pow+0x60>
 800659a:	d101      	bne.n	80065a0 <__ieee754_pow+0x58>
 800659c:	2e00      	cmp	r6, #0
 800659e:	d1ea      	bne.n	8006576 <__ieee754_pow+0x2e>
 80065a0:	4592      	cmp	sl, r2
 80065a2:	d801      	bhi.n	80065a8 <__ieee754_pow+0x60>
 80065a4:	d10e      	bne.n	80065c4 <__ieee754_pow+0x7c>
 80065a6:	b169      	cbz	r1, 80065c4 <__ieee754_pow+0x7c>
 80065a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80065ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80065b0:	431d      	orrs	r5, r3
 80065b2:	d1e0      	bne.n	8006576 <__ieee754_pow+0x2e>
 80065b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80065b8:	18db      	adds	r3, r3, r3
 80065ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80065be:	4152      	adcs	r2, r2
 80065c0:	429d      	cmp	r5, r3
 80065c2:	e7d4      	b.n	800656e <__ieee754_pow+0x26>
 80065c4:	2d00      	cmp	r5, #0
 80065c6:	46c3      	mov	fp, r8
 80065c8:	da3a      	bge.n	8006640 <__ieee754_pow+0xf8>
 80065ca:	4a83      	ldr	r2, [pc, #524]	@ (80067d8 <__ieee754_pow+0x290>)
 80065cc:	4592      	cmp	sl, r2
 80065ce:	d84d      	bhi.n	800666c <__ieee754_pow+0x124>
 80065d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80065d4:	4592      	cmp	sl, r2
 80065d6:	f240 84c7 	bls.w	8006f68 <__ieee754_pow+0xa20>
 80065da:	ea4f 522a 	mov.w	r2, sl, asr #20
 80065de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80065e2:	2a14      	cmp	r2, #20
 80065e4:	dd0f      	ble.n	8006606 <__ieee754_pow+0xbe>
 80065e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80065ea:	fa21 f402 	lsr.w	r4, r1, r2
 80065ee:	fa04 f202 	lsl.w	r2, r4, r2
 80065f2:	428a      	cmp	r2, r1
 80065f4:	f040 84b8 	bne.w	8006f68 <__ieee754_pow+0xa20>
 80065f8:	f004 0401 	and.w	r4, r4, #1
 80065fc:	f1c4 0402 	rsb	r4, r4, #2
 8006600:	2900      	cmp	r1, #0
 8006602:	d158      	bne.n	80066b6 <__ieee754_pow+0x16e>
 8006604:	e00e      	b.n	8006624 <__ieee754_pow+0xdc>
 8006606:	2900      	cmp	r1, #0
 8006608:	d154      	bne.n	80066b4 <__ieee754_pow+0x16c>
 800660a:	f1c2 0214 	rsb	r2, r2, #20
 800660e:	fa4a f402 	asr.w	r4, sl, r2
 8006612:	fa04 f202 	lsl.w	r2, r4, r2
 8006616:	4552      	cmp	r2, sl
 8006618:	f040 84a3 	bne.w	8006f62 <__ieee754_pow+0xa1a>
 800661c:	f004 0401 	and.w	r4, r4, #1
 8006620:	f1c4 0402 	rsb	r4, r4, #2
 8006624:	4a6d      	ldr	r2, [pc, #436]	@ (80067dc <__ieee754_pow+0x294>)
 8006626:	4592      	cmp	sl, r2
 8006628:	d12e      	bne.n	8006688 <__ieee754_pow+0x140>
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	f280 8494 	bge.w	8006f5a <__ieee754_pow+0xa12>
 8006632:	496a      	ldr	r1, [pc, #424]	@ (80067dc <__ieee754_pow+0x294>)
 8006634:	4632      	mov	r2, r6
 8006636:	463b      	mov	r3, r7
 8006638:	2000      	movs	r0, #0
 800663a:	f7fa f8cb 	bl	80007d4 <__aeabi_ddiv>
 800663e:	e7a0      	b.n	8006582 <__ieee754_pow+0x3a>
 8006640:	2400      	movs	r4, #0
 8006642:	bbc1      	cbnz	r1, 80066b6 <__ieee754_pow+0x16e>
 8006644:	4a63      	ldr	r2, [pc, #396]	@ (80067d4 <__ieee754_pow+0x28c>)
 8006646:	4592      	cmp	sl, r2
 8006648:	d1ec      	bne.n	8006624 <__ieee754_pow+0xdc>
 800664a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800664e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006652:	431a      	orrs	r2, r3
 8006654:	f000 8479 	beq.w	8006f4a <__ieee754_pow+0xa02>
 8006658:	4b61      	ldr	r3, [pc, #388]	@ (80067e0 <__ieee754_pow+0x298>)
 800665a:	4598      	cmp	r8, r3
 800665c:	d908      	bls.n	8006670 <__ieee754_pow+0x128>
 800665e:	f1b9 0f00 	cmp.w	r9, #0
 8006662:	f2c0 8476 	blt.w	8006f52 <__ieee754_pow+0xa0a>
 8006666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800666a:	e78a      	b.n	8006582 <__ieee754_pow+0x3a>
 800666c:	2402      	movs	r4, #2
 800666e:	e7e8      	b.n	8006642 <__ieee754_pow+0xfa>
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	f04f 0000 	mov.w	r0, #0
 8006678:	f04f 0100 	mov.w	r1, #0
 800667c:	da81      	bge.n	8006582 <__ieee754_pow+0x3a>
 800667e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006682:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006686:	e77c      	b.n	8006582 <__ieee754_pow+0x3a>
 8006688:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800668c:	d106      	bne.n	800669c <__ieee754_pow+0x154>
 800668e:	4632      	mov	r2, r6
 8006690:	463b      	mov	r3, r7
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7f9 ff73 	bl	8000580 <__aeabi_dmul>
 800669a:	e772      	b.n	8006582 <__ieee754_pow+0x3a>
 800669c:	4a51      	ldr	r2, [pc, #324]	@ (80067e4 <__ieee754_pow+0x29c>)
 800669e:	4591      	cmp	r9, r2
 80066a0:	d109      	bne.n	80066b6 <__ieee754_pow+0x16e>
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	db07      	blt.n	80066b6 <__ieee754_pow+0x16e>
 80066a6:	ec47 6b10 	vmov	d0, r6, r7
 80066aa:	b011      	add	sp, #68	@ 0x44
 80066ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	f7ff b8be 	b.w	8005830 <__ieee754_sqrt>
 80066b4:	2400      	movs	r4, #0
 80066b6:	ec47 6b10 	vmov	d0, r6, r7
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	f7fe fff4 	bl	80056a8 <fabs>
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	ec51 0b10 	vmov	r0, r1, d0
 80066c6:	bb53      	cbnz	r3, 800671e <__ieee754_pow+0x1d6>
 80066c8:	4b44      	ldr	r3, [pc, #272]	@ (80067dc <__ieee754_pow+0x294>)
 80066ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d002      	beq.n	80066d8 <__ieee754_pow+0x190>
 80066d2:	f1b8 0f00 	cmp.w	r8, #0
 80066d6:	d122      	bne.n	800671e <__ieee754_pow+0x1d6>
 80066d8:	f1b9 0f00 	cmp.w	r9, #0
 80066dc:	da05      	bge.n	80066ea <__ieee754_pow+0x1a2>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	2000      	movs	r0, #0
 80066e4:	493d      	ldr	r1, [pc, #244]	@ (80067dc <__ieee754_pow+0x294>)
 80066e6:	f7fa f875 	bl	80007d4 <__aeabi_ddiv>
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	f6bf af49 	bge.w	8006582 <__ieee754_pow+0x3a>
 80066f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80066f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80066f8:	ea58 0804 	orrs.w	r8, r8, r4
 80066fc:	d108      	bne.n	8006710 <__ieee754_pow+0x1c8>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4610      	mov	r0, r2
 8006704:	4619      	mov	r1, r3
 8006706:	f7f9 fd83 	bl	8000210 <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	e794      	b.n	800663a <__ieee754_pow+0xf2>
 8006710:	2c01      	cmp	r4, #1
 8006712:	f47f af36 	bne.w	8006582 <__ieee754_pow+0x3a>
 8006716:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800671a:	4619      	mov	r1, r3
 800671c:	e731      	b.n	8006582 <__ieee754_pow+0x3a>
 800671e:	0feb      	lsrs	r3, r5, #31
 8006720:	3b01      	subs	r3, #1
 8006722:	ea53 0204 	orrs.w	r2, r3, r4
 8006726:	d102      	bne.n	800672e <__ieee754_pow+0x1e6>
 8006728:	4632      	mov	r2, r6
 800672a:	463b      	mov	r3, r7
 800672c:	e7e9      	b.n	8006702 <__ieee754_pow+0x1ba>
 800672e:	3c01      	subs	r4, #1
 8006730:	431c      	orrs	r4, r3
 8006732:	d016      	beq.n	8006762 <__ieee754_pow+0x21a>
 8006734:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80067c0 <__ieee754_pow+0x278>
 8006738:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800673c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006740:	f240 8112 	bls.w	8006968 <__ieee754_pow+0x420>
 8006744:	4b28      	ldr	r3, [pc, #160]	@ (80067e8 <__ieee754_pow+0x2a0>)
 8006746:	459a      	cmp	sl, r3
 8006748:	4b25      	ldr	r3, [pc, #148]	@ (80067e0 <__ieee754_pow+0x298>)
 800674a:	d916      	bls.n	800677a <__ieee754_pow+0x232>
 800674c:	4598      	cmp	r8, r3
 800674e:	d80b      	bhi.n	8006768 <__ieee754_pow+0x220>
 8006750:	f1b9 0f00 	cmp.w	r9, #0
 8006754:	da0b      	bge.n	800676e <__ieee754_pow+0x226>
 8006756:	2000      	movs	r0, #0
 8006758:	b011      	add	sp, #68	@ 0x44
 800675a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675e:	f001 b87f 	b.w	8007860 <__math_oflow>
 8006762:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80067c8 <__ieee754_pow+0x280>
 8006766:	e7e7      	b.n	8006738 <__ieee754_pow+0x1f0>
 8006768:	f1b9 0f00 	cmp.w	r9, #0
 800676c:	dcf3      	bgt.n	8006756 <__ieee754_pow+0x20e>
 800676e:	2000      	movs	r0, #0
 8006770:	b011      	add	sp, #68	@ 0x44
 8006772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006776:	f001 b86b 	b.w	8007850 <__math_uflow>
 800677a:	4598      	cmp	r8, r3
 800677c:	d20c      	bcs.n	8006798 <__ieee754_pow+0x250>
 800677e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006782:	2200      	movs	r2, #0
 8006784:	2300      	movs	r3, #0
 8006786:	f7fa f96d 	bl	8000a64 <__aeabi_dcmplt>
 800678a:	3800      	subs	r0, #0
 800678c:	bf18      	it	ne
 800678e:	2001      	movne	r0, #1
 8006790:	f1b9 0f00 	cmp.w	r9, #0
 8006794:	daec      	bge.n	8006770 <__ieee754_pow+0x228>
 8006796:	e7df      	b.n	8006758 <__ieee754_pow+0x210>
 8006798:	4b10      	ldr	r3, [pc, #64]	@ (80067dc <__ieee754_pow+0x294>)
 800679a:	4598      	cmp	r8, r3
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	d924      	bls.n	80067ec <__ieee754_pow+0x2a4>
 80067a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a6:	2300      	movs	r3, #0
 80067a8:	f7fa f95c 	bl	8000a64 <__aeabi_dcmplt>
 80067ac:	3800      	subs	r0, #0
 80067ae:	bf18      	it	ne
 80067b0:	2001      	movne	r0, #1
 80067b2:	f1b9 0f00 	cmp.w	r9, #0
 80067b6:	dccf      	bgt.n	8006758 <__ieee754_pow+0x210>
 80067b8:	e7da      	b.n	8006770 <__ieee754_pow+0x228>
 80067ba:	bf00      	nop
 80067bc:	f3af 8000 	nop.w
 80067c0:	00000000 	.word	0x00000000
 80067c4:	3ff00000 	.word	0x3ff00000
 80067c8:	00000000 	.word	0x00000000
 80067cc:	bff00000 	.word	0xbff00000
 80067d0:	fff00000 	.word	0xfff00000
 80067d4:	7ff00000 	.word	0x7ff00000
 80067d8:	433fffff 	.word	0x433fffff
 80067dc:	3ff00000 	.word	0x3ff00000
 80067e0:	3fefffff 	.word	0x3fefffff
 80067e4:	3fe00000 	.word	0x3fe00000
 80067e8:	43f00000 	.word	0x43f00000
 80067ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006958 <__ieee754_pow+0x410>)
 80067ee:	f7f9 fd0f 	bl	8000210 <__aeabi_dsub>
 80067f2:	a351      	add	r3, pc, #324	@ (adr r3, 8006938 <__ieee754_pow+0x3f0>)
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	4604      	mov	r4, r0
 80067fa:	460d      	mov	r5, r1
 80067fc:	f7f9 fec0 	bl	8000580 <__aeabi_dmul>
 8006800:	a34f      	add	r3, pc, #316	@ (adr r3, 8006940 <__ieee754_pow+0x3f8>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	4606      	mov	r6, r0
 8006808:	460f      	mov	r7, r1
 800680a:	4620      	mov	r0, r4
 800680c:	4629      	mov	r1, r5
 800680e:	f7f9 feb7 	bl	8000580 <__aeabi_dmul>
 8006812:	4b52      	ldr	r3, [pc, #328]	@ (800695c <__ieee754_pow+0x414>)
 8006814:	4682      	mov	sl, r0
 8006816:	468b      	mov	fp, r1
 8006818:	2200      	movs	r2, #0
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7f9 feaf 	bl	8000580 <__aeabi_dmul>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	a148      	add	r1, pc, #288	@ (adr r1, 8006948 <__ieee754_pow+0x400>)
 8006828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800682c:	f7f9 fcf0 	bl	8000210 <__aeabi_dsub>
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	f7f9 fea4 	bl	8000580 <__aeabi_dmul>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	2000      	movs	r0, #0
 800683e:	4948      	ldr	r1, [pc, #288]	@ (8006960 <__ieee754_pow+0x418>)
 8006840:	f7f9 fce6 	bl	8000210 <__aeabi_dsub>
 8006844:	4622      	mov	r2, r4
 8006846:	4680      	mov	r8, r0
 8006848:	4689      	mov	r9, r1
 800684a:	462b      	mov	r3, r5
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fe96 	bl	8000580 <__aeabi_dmul>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4640      	mov	r0, r8
 800685a:	4649      	mov	r1, r9
 800685c:	f7f9 fe90 	bl	8000580 <__aeabi_dmul>
 8006860:	a33b      	add	r3, pc, #236	@ (adr r3, 8006950 <__ieee754_pow+0x408>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f7f9 fe8b 	bl	8000580 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4650      	mov	r0, sl
 8006870:	4659      	mov	r1, fp
 8006872:	f7f9 fccd 	bl	8000210 <__aeabi_dsub>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	4630      	mov	r0, r6
 8006880:	4639      	mov	r1, r7
 8006882:	f7f9 fcc7 	bl	8000214 <__adddf3>
 8006886:	2400      	movs	r4, #0
 8006888:	4632      	mov	r2, r6
 800688a:	463b      	mov	r3, r7
 800688c:	4620      	mov	r0, r4
 800688e:	460d      	mov	r5, r1
 8006890:	f7f9 fcbe 	bl	8000210 <__aeabi_dsub>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4640      	mov	r0, r8
 800689a:	4649      	mov	r1, r9
 800689c:	f7f9 fcb8 	bl	8000210 <__aeabi_dsub>
 80068a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068a8:	2300      	movs	r3, #0
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	4652      	mov	r2, sl
 80068b6:	465b      	mov	r3, fp
 80068b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068bc:	f7f9 fca8 	bl	8000210 <__aeabi_dsub>
 80068c0:	4622      	mov	r2, r4
 80068c2:	462b      	mov	r3, r5
 80068c4:	f7f9 fe5c 	bl	8000580 <__aeabi_dmul>
 80068c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068cc:	4680      	mov	r8, r0
 80068ce:	4689      	mov	r9, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7f9 fe54 	bl	8000580 <__aeabi_dmul>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4640      	mov	r0, r8
 80068de:	4649      	mov	r1, r9
 80068e0:	f7f9 fc98 	bl	8000214 <__adddf3>
 80068e4:	4652      	mov	r2, sl
 80068e6:	465b      	mov	r3, fp
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fe46 	bl	8000580 <__aeabi_dmul>
 80068f4:	460b      	mov	r3, r1
 80068f6:	4602      	mov	r2, r0
 80068f8:	4680      	mov	r8, r0
 80068fa:	4689      	mov	r9, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fc88 	bl	8000214 <__adddf3>
 8006904:	4b17      	ldr	r3, [pc, #92]	@ (8006964 <__ieee754_pow+0x41c>)
 8006906:	4299      	cmp	r1, r3
 8006908:	4604      	mov	r4, r0
 800690a:	460d      	mov	r5, r1
 800690c:	468a      	mov	sl, r1
 800690e:	468b      	mov	fp, r1
 8006910:	f340 82ef 	ble.w	8006ef2 <__ieee754_pow+0x9aa>
 8006914:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006918:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800691c:	4303      	orrs	r3, r0
 800691e:	f000 81e8 	beq.w	8006cf2 <__ieee754_pow+0x7aa>
 8006922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	2300      	movs	r3, #0
 800692a:	f7fa f89b 	bl	8000a64 <__aeabi_dcmplt>
 800692e:	3800      	subs	r0, #0
 8006930:	bf18      	it	ne
 8006932:	2001      	movne	r0, #1
 8006934:	e710      	b.n	8006758 <__ieee754_pow+0x210>
 8006936:	bf00      	nop
 8006938:	60000000 	.word	0x60000000
 800693c:	3ff71547 	.word	0x3ff71547
 8006940:	f85ddf44 	.word	0xf85ddf44
 8006944:	3e54ae0b 	.word	0x3e54ae0b
 8006948:	55555555 	.word	0x55555555
 800694c:	3fd55555 	.word	0x3fd55555
 8006950:	652b82fe 	.word	0x652b82fe
 8006954:	3ff71547 	.word	0x3ff71547
 8006958:	3ff00000 	.word	0x3ff00000
 800695c:	3fd00000 	.word	0x3fd00000
 8006960:	3fe00000 	.word	0x3fe00000
 8006964:	408fffff 	.word	0x408fffff
 8006968:	4bd5      	ldr	r3, [pc, #852]	@ (8006cc0 <__ieee754_pow+0x778>)
 800696a:	402b      	ands	r3, r5
 800696c:	2200      	movs	r2, #0
 800696e:	b92b      	cbnz	r3, 800697c <__ieee754_pow+0x434>
 8006970:	4bd4      	ldr	r3, [pc, #848]	@ (8006cc4 <__ieee754_pow+0x77c>)
 8006972:	f7f9 fe05 	bl	8000580 <__aeabi_dmul>
 8006976:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800697a:	468b      	mov	fp, r1
 800697c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006980:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006984:	4413      	add	r3, r2
 8006986:	930a      	str	r3, [sp, #40]	@ 0x28
 8006988:	4bcf      	ldr	r3, [pc, #828]	@ (8006cc8 <__ieee754_pow+0x780>)
 800698a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800698e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006992:	459b      	cmp	fp, r3
 8006994:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006998:	dd08      	ble.n	80069ac <__ieee754_pow+0x464>
 800699a:	4bcc      	ldr	r3, [pc, #816]	@ (8006ccc <__ieee754_pow+0x784>)
 800699c:	459b      	cmp	fp, r3
 800699e:	f340 81a5 	ble.w	8006cec <__ieee754_pow+0x7a4>
 80069a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069a4:	3301      	adds	r3, #1
 80069a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069a8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80069ac:	f04f 0a00 	mov.w	sl, #0
 80069b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80069b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069b6:	4bc6      	ldr	r3, [pc, #792]	@ (8006cd0 <__ieee754_pow+0x788>)
 80069b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069bc:	ed93 7b00 	vldr	d7, [r3]
 80069c0:	4629      	mov	r1, r5
 80069c2:	ec53 2b17 	vmov	r2, r3, d7
 80069c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80069ce:	f7f9 fc1f 	bl	8000210 <__aeabi_dsub>
 80069d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069de:	f7f9 fc19 	bl	8000214 <__adddf3>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	2000      	movs	r0, #0
 80069e8:	49ba      	ldr	r1, [pc, #744]	@ (8006cd4 <__ieee754_pow+0x78c>)
 80069ea:	f7f9 fef3 	bl	80007d4 <__aeabi_ddiv>
 80069ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	f7f9 fdc1 	bl	8000580 <__aeabi_dmul>
 80069fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006a06:	106d      	asrs	r5, r5, #1
 8006a08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006a0c:	f04f 0b00 	mov.w	fp, #0
 8006a10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006a14:	4661      	mov	r1, ip
 8006a16:	2200      	movs	r2, #0
 8006a18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	46e1      	mov	r9, ip
 8006a20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006a24:	4614      	mov	r4, r2
 8006a26:	461d      	mov	r5, r3
 8006a28:	f7f9 fdaa 	bl	8000580 <__aeabi_dmul>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4630      	mov	r0, r6
 8006a32:	4639      	mov	r1, r7
 8006a34:	f7f9 fbec 	bl	8000210 <__aeabi_dsub>
 8006a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	460f      	mov	r7, r1
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fbe4 	bl	8000210 <__aeabi_dsub>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a50:	f7f9 fbde 	bl	8000210 <__aeabi_dsub>
 8006a54:	465a      	mov	r2, fp
 8006a56:	464b      	mov	r3, r9
 8006a58:	f7f9 fd92 	bl	8000580 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4630      	mov	r0, r6
 8006a62:	4639      	mov	r1, r7
 8006a64:	f7f9 fbd4 	bl	8000210 <__aeabi_dsub>
 8006a68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a6c:	f7f9 fd88 	bl	8000580 <__aeabi_dmul>
 8006a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f7f9 fd80 	bl	8000580 <__aeabi_dmul>
 8006a80:	a37d      	add	r3, pc, #500	@ (adr r3, 8006c78 <__ieee754_pow+0x730>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	f7f9 fd79 	bl	8000580 <__aeabi_dmul>
 8006a8e:	a37c      	add	r3, pc, #496	@ (adr r3, 8006c80 <__ieee754_pow+0x738>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fbbe 	bl	8000214 <__adddf3>
 8006a98:	4622      	mov	r2, r4
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	f7f9 fd70 	bl	8000580 <__aeabi_dmul>
 8006aa0:	a379      	add	r3, pc, #484	@ (adr r3, 8006c88 <__ieee754_pow+0x740>)
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 fbb5 	bl	8000214 <__adddf3>
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	f7f9 fd67 	bl	8000580 <__aeabi_dmul>
 8006ab2:	a377      	add	r3, pc, #476	@ (adr r3, 8006c90 <__ieee754_pow+0x748>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7f9 fbac 	bl	8000214 <__adddf3>
 8006abc:	4622      	mov	r2, r4
 8006abe:	462b      	mov	r3, r5
 8006ac0:	f7f9 fd5e 	bl	8000580 <__aeabi_dmul>
 8006ac4:	a374      	add	r3, pc, #464	@ (adr r3, 8006c98 <__ieee754_pow+0x750>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fba3 	bl	8000214 <__adddf3>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f7f9 fd55 	bl	8000580 <__aeabi_dmul>
 8006ad6:	a372      	add	r3, pc, #456	@ (adr r3, 8006ca0 <__ieee754_pow+0x758>)
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 fb9a 	bl	8000214 <__adddf3>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	4620      	mov	r0, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	f7f9 fd48 	bl	8000580 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7f9 fd42 	bl	8000580 <__aeabi_dmul>
 8006afc:	465a      	mov	r2, fp
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	464b      	mov	r3, r9
 8006b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b08:	f7f9 fb84 	bl	8000214 <__adddf3>
 8006b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b10:	f7f9 fd36 	bl	8000580 <__aeabi_dmul>
 8006b14:	4622      	mov	r2, r4
 8006b16:	462b      	mov	r3, r5
 8006b18:	f7f9 fb7c 	bl	8000214 <__adddf3>
 8006b1c:	465a      	mov	r2, fp
 8006b1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b22:	464b      	mov	r3, r9
 8006b24:	4658      	mov	r0, fp
 8006b26:	4649      	mov	r1, r9
 8006b28:	f7f9 fd2a 	bl	8000580 <__aeabi_dmul>
 8006b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8006cd8 <__ieee754_pow+0x790>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4606      	mov	r6, r0
 8006b32:	460f      	mov	r7, r1
 8006b34:	f7f9 fb6e 	bl	8000214 <__adddf3>
 8006b38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b3c:	f7f9 fb6a 	bl	8000214 <__adddf3>
 8006b40:	46d8      	mov	r8, fp
 8006b42:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006b46:	460d      	mov	r5, r1
 8006b48:	465a      	mov	r2, fp
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	4649      	mov	r1, r9
 8006b50:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006b54:	f7f9 fd14 	bl	8000580 <__aeabi_dmul>
 8006b58:	465c      	mov	r4, fp
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	4689      	mov	r9, r1
 8006b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd8 <__ieee754_pow+0x790>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 fb53 	bl	8000210 <__aeabi_dsub>
 8006b6a:	4632      	mov	r2, r6
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	f7f9 fb4f 	bl	8000210 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b7a:	f7f9 fb49 	bl	8000210 <__aeabi_dsub>
 8006b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b82:	f7f9 fcfd 	bl	8000580 <__aeabi_dmul>
 8006b86:	4622      	mov	r2, r4
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b92:	f7f9 fcf5 	bl	8000580 <__aeabi_dmul>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	f7f9 fb39 	bl	8000214 <__adddf3>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 fb31 	bl	8000214 <__adddf3>
 8006bb2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006bb6:	a33c      	add	r3, pc, #240	@ (adr r3, 8006ca8 <__ieee754_pow+0x760>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	4658      	mov	r0, fp
 8006bbe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	f7f9 fcdc 	bl	8000580 <__aeabi_dmul>
 8006bc8:	465c      	mov	r4, fp
 8006bca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bce:	4642      	mov	r2, r8
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7f9 fb1b 	bl	8000210 <__aeabi_dsub>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4630      	mov	r0, r6
 8006be0:	4639      	mov	r1, r7
 8006be2:	f7f9 fb15 	bl	8000210 <__aeabi_dsub>
 8006be6:	a332      	add	r3, pc, #200	@ (adr r3, 8006cb0 <__ieee754_pow+0x768>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 fcc8 	bl	8000580 <__aeabi_dmul>
 8006bf0:	a331      	add	r3, pc, #196	@ (adr r3, 8006cb8 <__ieee754_pow+0x770>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 fcbf 	bl	8000580 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4630      	mov	r0, r6
 8006c08:	4639      	mov	r1, r7
 8006c0a:	f7f9 fb03 	bl	8000214 <__adddf3>
 8006c0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c10:	4b32      	ldr	r3, [pc, #200]	@ (8006cdc <__ieee754_pow+0x794>)
 8006c12:	4413      	add	r3, r2
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fafc 	bl	8000214 <__adddf3>
 8006c1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c22:	f7f9 fc43 	bl	80004ac <__aeabi_i2d>
 8006c26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c28:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce0 <__ieee754_pow+0x798>)
 8006c2a:	4413      	add	r3, r2
 8006c2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c30:	4606      	mov	r6, r0
 8006c32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c36:	460f      	mov	r7, r1
 8006c38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3c:	f7f9 faea 	bl	8000214 <__adddf3>
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	f7f9 fae6 	bl	8000214 <__adddf3>
 8006c48:	4632      	mov	r2, r6
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	f7f9 fae2 	bl	8000214 <__adddf3>
 8006c50:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006c54:	4632      	mov	r2, r6
 8006c56:	463b      	mov	r3, r7
 8006c58:	4658      	mov	r0, fp
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	f7f9 fad8 	bl	8000210 <__aeabi_dsub>
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	f7f9 fad4 	bl	8000210 <__aeabi_dsub>
 8006c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c6c:	f7f9 fad0 	bl	8000210 <__aeabi_dsub>
 8006c70:	465c      	mov	r4, fp
 8006c72:	4602      	mov	r2, r0
 8006c74:	e036      	b.n	8006ce4 <__ieee754_pow+0x79c>
 8006c76:	bf00      	nop
 8006c78:	4a454eef 	.word	0x4a454eef
 8006c7c:	3fca7e28 	.word	0x3fca7e28
 8006c80:	93c9db65 	.word	0x93c9db65
 8006c84:	3fcd864a 	.word	0x3fcd864a
 8006c88:	a91d4101 	.word	0xa91d4101
 8006c8c:	3fd17460 	.word	0x3fd17460
 8006c90:	518f264d 	.word	0x518f264d
 8006c94:	3fd55555 	.word	0x3fd55555
 8006c98:	db6fabff 	.word	0xdb6fabff
 8006c9c:	3fdb6db6 	.word	0x3fdb6db6
 8006ca0:	33333303 	.word	0x33333303
 8006ca4:	3fe33333 	.word	0x3fe33333
 8006ca8:	e0000000 	.word	0xe0000000
 8006cac:	3feec709 	.word	0x3feec709
 8006cb0:	dc3a03fd 	.word	0xdc3a03fd
 8006cb4:	3feec709 	.word	0x3feec709
 8006cb8:	145b01f5 	.word	0x145b01f5
 8006cbc:	be3e2fe0 	.word	0xbe3e2fe0
 8006cc0:	7ff00000 	.word	0x7ff00000
 8006cc4:	43400000 	.word	0x43400000
 8006cc8:	0003988e 	.word	0x0003988e
 8006ccc:	000bb679 	.word	0x000bb679
 8006cd0:	08008348 	.word	0x08008348
 8006cd4:	3ff00000 	.word	0x3ff00000
 8006cd8:	40080000 	.word	0x40080000
 8006cdc:	08008328 	.word	0x08008328
 8006ce0:	08008338 	.word	0x08008338
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cea:	e5d7      	b.n	800689c <__ieee754_pow+0x354>
 8006cec:	f04f 0a01 	mov.w	sl, #1
 8006cf0:	e65e      	b.n	80069b0 <__ieee754_pow+0x468>
 8006cf2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006fc4 <__ieee754_pow+0xa7c>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f7f9 fa8a 	bl	8000214 <__adddf3>
 8006d00:	4642      	mov	r2, r8
 8006d02:	e9cd 0100 	strd	r0, r1, [sp]
 8006d06:	464b      	mov	r3, r9
 8006d08:	4620      	mov	r0, r4
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	f7f9 fa80 	bl	8000210 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d18:	f7f9 fec2 	bl	8000aa0 <__aeabi_dcmpgt>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f47f ae00 	bne.w	8006922 <__ieee754_pow+0x3da>
 8006d22:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006d26:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006d2a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006d2e:	fa43 fa0a 	asr.w	sl, r3, sl
 8006d32:	44da      	add	sl, fp
 8006d34:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006d38:	489d      	ldr	r0, [pc, #628]	@ (8006fb0 <__ieee754_pow+0xa68>)
 8006d3a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006d3e:	4108      	asrs	r0, r1
 8006d40:	ea00 030a 	and.w	r3, r0, sl
 8006d44:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006d48:	f1c1 0114 	rsb	r1, r1, #20
 8006d4c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006d50:	fa4a fa01 	asr.w	sl, sl, r1
 8006d54:	f1bb 0f00 	cmp.w	fp, #0
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	bfb8      	it	lt
 8006d62:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d66:	f7f9 fa53 	bl	8000210 <__aeabi_dsub>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	4632      	mov	r2, r6
 8006d70:	463b      	mov	r3, r7
 8006d72:	4640      	mov	r0, r8
 8006d74:	4649      	mov	r1, r9
 8006d76:	f7f9 fa4d 	bl	8000214 <__adddf3>
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	a37c      	add	r3, pc, #496	@ (adr r3, 8006f70 <__ieee754_pow+0xa28>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	4620      	mov	r0, r4
 8006d84:	460d      	mov	r5, r1
 8006d86:	f7f9 fbfb 	bl	8000580 <__aeabi_dmul>
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8006d90:	464b      	mov	r3, r9
 8006d92:	4620      	mov	r0, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	f7f9 fa3b 	bl	8000210 <__aeabi_dsub>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4630      	mov	r0, r6
 8006da0:	4639      	mov	r1, r7
 8006da2:	f7f9 fa35 	bl	8000210 <__aeabi_dsub>
 8006da6:	a374      	add	r3, pc, #464	@ (adr r3, 8006f78 <__ieee754_pow+0xa30>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fbe8 	bl	8000580 <__aeabi_dmul>
 8006db0:	a373      	add	r3, pc, #460	@ (adr r3, 8006f80 <__ieee754_pow+0xa38>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	4680      	mov	r8, r0
 8006db8:	4689      	mov	r9, r1
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	f7f9 fbdf 	bl	8000580 <__aeabi_dmul>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	f7f9 fa23 	bl	8000214 <__adddf3>
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dda:	f7f9 fa1b 	bl	8000214 <__adddf3>
 8006dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006de2:	4680      	mov	r8, r0
 8006de4:	4689      	mov	r9, r1
 8006de6:	f7f9 fa13 	bl	8000210 <__aeabi_dsub>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fa0d 	bl	8000210 <__aeabi_dsub>
 8006df6:	4642      	mov	r2, r8
 8006df8:	4606      	mov	r6, r0
 8006dfa:	460f      	mov	r7, r1
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4649      	mov	r1, r9
 8006e02:	f7f9 fbbd 	bl	8000580 <__aeabi_dmul>
 8006e06:	a360      	add	r3, pc, #384	@ (adr r3, 8006f88 <__ieee754_pow+0xa40>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	460d      	mov	r5, r1
 8006e10:	f7f9 fbb6 	bl	8000580 <__aeabi_dmul>
 8006e14:	a35e      	add	r3, pc, #376	@ (adr r3, 8006f90 <__ieee754_pow+0xa48>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 f9f9 	bl	8000210 <__aeabi_dsub>
 8006e1e:	4622      	mov	r2, r4
 8006e20:	462b      	mov	r3, r5
 8006e22:	f7f9 fbad 	bl	8000580 <__aeabi_dmul>
 8006e26:	a35c      	add	r3, pc, #368	@ (adr r3, 8006f98 <__ieee754_pow+0xa50>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f7f9 f9f2 	bl	8000214 <__adddf3>
 8006e30:	4622      	mov	r2, r4
 8006e32:	462b      	mov	r3, r5
 8006e34:	f7f9 fba4 	bl	8000580 <__aeabi_dmul>
 8006e38:	a359      	add	r3, pc, #356	@ (adr r3, 8006fa0 <__ieee754_pow+0xa58>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f7f9 f9e7 	bl	8000210 <__aeabi_dsub>
 8006e42:	4622      	mov	r2, r4
 8006e44:	462b      	mov	r3, r5
 8006e46:	f7f9 fb9b 	bl	8000580 <__aeabi_dmul>
 8006e4a:	a357      	add	r3, pc, #348	@ (adr r3, 8006fa8 <__ieee754_pow+0xa60>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 f9e0 	bl	8000214 <__adddf3>
 8006e54:	4622      	mov	r2, r4
 8006e56:	462b      	mov	r3, r5
 8006e58:	f7f9 fb92 	bl	8000580 <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 f9d4 	bl	8000210 <__aeabi_dsub>
 8006e68:	4604      	mov	r4, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fb84 	bl	8000580 <__aeabi_dmul>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	e9cd 0100 	strd	r0, r1, [sp]
 8006e7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 f9c3 	bl	8000210 <__aeabi_dsub>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e92:	f7f9 fc9f 	bl	80007d4 <__aeabi_ddiv>
 8006e96:	4632      	mov	r2, r6
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	f7f9 fb6d 	bl	8000580 <__aeabi_dmul>
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	f7f9 f9b3 	bl	8000214 <__adddf3>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	f7f9 f9ab 	bl	8000210 <__aeabi_dsub>
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	f7f9 f9a7 	bl	8000210 <__aeabi_dsub>
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	493b      	ldr	r1, [pc, #236]	@ (8006fb4 <__ieee754_pow+0xa6c>)
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f7f9 f9a1 	bl	8000210 <__aeabi_dsub>
 8006ece:	ec41 0b10 	vmov	d0, r0, r1
 8006ed2:	ee10 3a90 	vmov	r3, s1
 8006ed6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ede:	da30      	bge.n	8006f42 <__ieee754_pow+0x9fa>
 8006ee0:	4650      	mov	r0, sl
 8006ee2:	f000 fc09 	bl	80076f8 <scalbn>
 8006ee6:	ec51 0b10 	vmov	r0, r1, d0
 8006eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eee:	f7ff bbd2 	b.w	8006696 <__ieee754_pow+0x14e>
 8006ef2:	4c31      	ldr	r4, [pc, #196]	@ (8006fb8 <__ieee754_pow+0xa70>)
 8006ef4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d91a      	bls.n	8006f32 <__ieee754_pow+0x9ea>
 8006efc:	4b2f      	ldr	r3, [pc, #188]	@ (8006fbc <__ieee754_pow+0xa74>)
 8006efe:	440b      	add	r3, r1
 8006f00:	4303      	orrs	r3, r0
 8006f02:	d009      	beq.n	8006f18 <__ieee754_pow+0x9d0>
 8006f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f7f9 fdaa 	bl	8000a64 <__aeabi_dcmplt>
 8006f10:	3800      	subs	r0, #0
 8006f12:	bf18      	it	ne
 8006f14:	2001      	movne	r0, #1
 8006f16:	e42b      	b.n	8006770 <__ieee754_pow+0x228>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	f7f9 f978 	bl	8000210 <__aeabi_dsub>
 8006f20:	4632      	mov	r2, r6
 8006f22:	463b      	mov	r3, r7
 8006f24:	f7f9 fdb2 	bl	8000a8c <__aeabi_dcmpge>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d1eb      	bne.n	8006f04 <__ieee754_pow+0x9bc>
 8006f2c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8006fcc <__ieee754_pow+0xa84>
 8006f30:	e6f7      	b.n	8006d22 <__ieee754_pow+0x7da>
 8006f32:	469a      	mov	sl, r3
 8006f34:	4b22      	ldr	r3, [pc, #136]	@ (8006fc0 <__ieee754_pow+0xa78>)
 8006f36:	459a      	cmp	sl, r3
 8006f38:	f63f aef3 	bhi.w	8006d22 <__ieee754_pow+0x7da>
 8006f3c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006f40:	e715      	b.n	8006d6e <__ieee754_pow+0x826>
 8006f42:	ec51 0b10 	vmov	r0, r1, d0
 8006f46:	4619      	mov	r1, r3
 8006f48:	e7cf      	b.n	8006eea <__ieee754_pow+0x9a2>
 8006f4a:	491a      	ldr	r1, [pc, #104]	@ (8006fb4 <__ieee754_pow+0xa6c>)
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	f7ff bb18 	b.w	8006582 <__ieee754_pow+0x3a>
 8006f52:	2000      	movs	r0, #0
 8006f54:	2100      	movs	r1, #0
 8006f56:	f7ff bb14 	b.w	8006582 <__ieee754_pow+0x3a>
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f7ff bb10 	b.w	8006582 <__ieee754_pow+0x3a>
 8006f62:	460c      	mov	r4, r1
 8006f64:	f7ff bb5e 	b.w	8006624 <__ieee754_pow+0xdc>
 8006f68:	2400      	movs	r4, #0
 8006f6a:	f7ff bb49 	b.w	8006600 <__ieee754_pow+0xb8>
 8006f6e:	bf00      	nop
 8006f70:	00000000 	.word	0x00000000
 8006f74:	3fe62e43 	.word	0x3fe62e43
 8006f78:	fefa39ef 	.word	0xfefa39ef
 8006f7c:	3fe62e42 	.word	0x3fe62e42
 8006f80:	0ca86c39 	.word	0x0ca86c39
 8006f84:	be205c61 	.word	0xbe205c61
 8006f88:	72bea4d0 	.word	0x72bea4d0
 8006f8c:	3e663769 	.word	0x3e663769
 8006f90:	c5d26bf1 	.word	0xc5d26bf1
 8006f94:	3ebbbd41 	.word	0x3ebbbd41
 8006f98:	af25de2c 	.word	0xaf25de2c
 8006f9c:	3f11566a 	.word	0x3f11566a
 8006fa0:	16bebd93 	.word	0x16bebd93
 8006fa4:	3f66c16c 	.word	0x3f66c16c
 8006fa8:	5555553e 	.word	0x5555553e
 8006fac:	3fc55555 	.word	0x3fc55555
 8006fb0:	fff00000 	.word	0xfff00000
 8006fb4:	3ff00000 	.word	0x3ff00000
 8006fb8:	4090cbff 	.word	0x4090cbff
 8006fbc:	3f6f3400 	.word	0x3f6f3400
 8006fc0:	3fe00000 	.word	0x3fe00000
 8006fc4:	652b82fe 	.word	0x652b82fe
 8006fc8:	3c971547 	.word	0x3c971547
 8006fcc:	4090cc00 	.word	0x4090cc00

08006fd0 <__ieee754_rem_pio2>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	ec57 6b10 	vmov	r6, r7, d0
 8006fd8:	4bc5      	ldr	r3, [pc, #788]	@ (80072f0 <__ieee754_rem_pio2+0x320>)
 8006fda:	b08d      	sub	sp, #52	@ 0x34
 8006fdc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006fe0:	4598      	cmp	r8, r3
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	9704      	str	r7, [sp, #16]
 8006fe6:	d807      	bhi.n	8006ff8 <__ieee754_rem_pio2+0x28>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	ed80 0b00 	vstr	d0, [r0]
 8006ff0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006ff4:	2500      	movs	r5, #0
 8006ff6:	e028      	b.n	800704a <__ieee754_rem_pio2+0x7a>
 8006ff8:	4bbe      	ldr	r3, [pc, #760]	@ (80072f4 <__ieee754_rem_pio2+0x324>)
 8006ffa:	4598      	cmp	r8, r3
 8006ffc:	d878      	bhi.n	80070f0 <__ieee754_rem_pio2+0x120>
 8006ffe:	9b04      	ldr	r3, [sp, #16]
 8007000:	4dbd      	ldr	r5, [pc, #756]	@ (80072f8 <__ieee754_rem_pio2+0x328>)
 8007002:	2b00      	cmp	r3, #0
 8007004:	4630      	mov	r0, r6
 8007006:	a3ac      	add	r3, pc, #688	@ (adr r3, 80072b8 <__ieee754_rem_pio2+0x2e8>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	4639      	mov	r1, r7
 800700e:	dd38      	ble.n	8007082 <__ieee754_rem_pio2+0xb2>
 8007010:	f7f9 f8fe 	bl	8000210 <__aeabi_dsub>
 8007014:	45a8      	cmp	r8, r5
 8007016:	4606      	mov	r6, r0
 8007018:	460f      	mov	r7, r1
 800701a:	d01a      	beq.n	8007052 <__ieee754_rem_pio2+0x82>
 800701c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80072c0 <__ieee754_rem_pio2+0x2f0>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 f8f5 	bl	8000210 <__aeabi_dsub>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4680      	mov	r8, r0
 800702c:	4689      	mov	r9, r1
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 f8ed 	bl	8000210 <__aeabi_dsub>
 8007036:	a3a2      	add	r3, pc, #648	@ (adr r3, 80072c0 <__ieee754_rem_pio2+0x2f0>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f7f9 f8e8 	bl	8000210 <__aeabi_dsub>
 8007040:	e9c4 8900 	strd	r8, r9, [r4]
 8007044:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007048:	2501      	movs	r5, #1
 800704a:	4628      	mov	r0, r5
 800704c:	b00d      	add	sp, #52	@ 0x34
 800704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007052:	a39d      	add	r3, pc, #628	@ (adr r3, 80072c8 <__ieee754_rem_pio2+0x2f8>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 f8da 	bl	8000210 <__aeabi_dsub>
 800705c:	a39c      	add	r3, pc, #624	@ (adr r3, 80072d0 <__ieee754_rem_pio2+0x300>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	4606      	mov	r6, r0
 8007064:	460f      	mov	r7, r1
 8007066:	f7f9 f8d3 	bl	8000210 <__aeabi_dsub>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4680      	mov	r8, r0
 8007070:	4689      	mov	r9, r1
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	f7f9 f8cb 	bl	8000210 <__aeabi_dsub>
 800707a:	a395      	add	r3, pc, #596	@ (adr r3, 80072d0 <__ieee754_rem_pio2+0x300>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	e7dc      	b.n	800703c <__ieee754_rem_pio2+0x6c>
 8007082:	f7f9 f8c7 	bl	8000214 <__adddf3>
 8007086:	45a8      	cmp	r8, r5
 8007088:	4606      	mov	r6, r0
 800708a:	460f      	mov	r7, r1
 800708c:	d018      	beq.n	80070c0 <__ieee754_rem_pio2+0xf0>
 800708e:	a38c      	add	r3, pc, #560	@ (adr r3, 80072c0 <__ieee754_rem_pio2+0x2f0>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	f7f9 f8be 	bl	8000214 <__adddf3>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 f8b4 	bl	8000210 <__aeabi_dsub>
 80070a8:	a385      	add	r3, pc, #532	@ (adr r3, 80072c0 <__ieee754_rem_pio2+0x2f0>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f7f9 f8b1 	bl	8000214 <__adddf3>
 80070b2:	f04f 35ff 	mov.w	r5, #4294967295
 80070b6:	e9c4 8900 	strd	r8, r9, [r4]
 80070ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80070be:	e7c4      	b.n	800704a <__ieee754_rem_pio2+0x7a>
 80070c0:	a381      	add	r3, pc, #516	@ (adr r3, 80072c8 <__ieee754_rem_pio2+0x2f8>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 f8a5 	bl	8000214 <__adddf3>
 80070ca:	a381      	add	r3, pc, #516	@ (adr r3, 80072d0 <__ieee754_rem_pio2+0x300>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	4606      	mov	r6, r0
 80070d2:	460f      	mov	r7, r1
 80070d4:	f7f9 f89e 	bl	8000214 <__adddf3>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4680      	mov	r8, r0
 80070de:	4689      	mov	r9, r1
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 f894 	bl	8000210 <__aeabi_dsub>
 80070e8:	a379      	add	r3, pc, #484	@ (adr r3, 80072d0 <__ieee754_rem_pio2+0x300>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	e7de      	b.n	80070ae <__ieee754_rem_pio2+0xde>
 80070f0:	4b82      	ldr	r3, [pc, #520]	@ (80072fc <__ieee754_rem_pio2+0x32c>)
 80070f2:	4598      	cmp	r8, r3
 80070f4:	f200 80d1 	bhi.w	800729a <__ieee754_rem_pio2+0x2ca>
 80070f8:	f7fe fad6 	bl	80056a8 <fabs>
 80070fc:	ec57 6b10 	vmov	r6, r7, d0
 8007100:	a375      	add	r3, pc, #468	@ (adr r3, 80072d8 <__ieee754_rem_pio2+0x308>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	4630      	mov	r0, r6
 8007108:	4639      	mov	r1, r7
 800710a:	f7f9 fa39 	bl	8000580 <__aeabi_dmul>
 800710e:	4b7c      	ldr	r3, [pc, #496]	@ (8007300 <__ieee754_rem_pio2+0x330>)
 8007110:	2200      	movs	r2, #0
 8007112:	f7f9 f87f 	bl	8000214 <__adddf3>
 8007116:	f7f9 fce3 	bl	8000ae0 <__aeabi_d2iz>
 800711a:	4605      	mov	r5, r0
 800711c:	f7f9 f9c6 	bl	80004ac <__aeabi_i2d>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007128:	a363      	add	r3, pc, #396	@ (adr r3, 80072b8 <__ieee754_rem_pio2+0x2e8>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 fa27 	bl	8000580 <__aeabi_dmul>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4630      	mov	r0, r6
 8007138:	4639      	mov	r1, r7
 800713a:	f7f9 f869 	bl	8000210 <__aeabi_dsub>
 800713e:	a360      	add	r3, pc, #384	@ (adr r3, 80072c0 <__ieee754_rem_pio2+0x2f0>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	4682      	mov	sl, r0
 8007146:	468b      	mov	fp, r1
 8007148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800714c:	f7f9 fa18 	bl	8000580 <__aeabi_dmul>
 8007150:	2d1f      	cmp	r5, #31
 8007152:	4606      	mov	r6, r0
 8007154:	460f      	mov	r7, r1
 8007156:	dc0c      	bgt.n	8007172 <__ieee754_rem_pio2+0x1a2>
 8007158:	4b6a      	ldr	r3, [pc, #424]	@ (8007304 <__ieee754_rem_pio2+0x334>)
 800715a:	1e6a      	subs	r2, r5, #1
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	4543      	cmp	r3, r8
 8007162:	d006      	beq.n	8007172 <__ieee754_rem_pio2+0x1a2>
 8007164:	4632      	mov	r2, r6
 8007166:	463b      	mov	r3, r7
 8007168:	4650      	mov	r0, sl
 800716a:	4659      	mov	r1, fp
 800716c:	f7f9 f850 	bl	8000210 <__aeabi_dsub>
 8007170:	e00e      	b.n	8007190 <__ieee754_rem_pio2+0x1c0>
 8007172:	463b      	mov	r3, r7
 8007174:	4632      	mov	r2, r6
 8007176:	4650      	mov	r0, sl
 8007178:	4659      	mov	r1, fp
 800717a:	f7f9 f849 	bl	8000210 <__aeabi_dsub>
 800717e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007188:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800718c:	2b10      	cmp	r3, #16
 800718e:	dc02      	bgt.n	8007196 <__ieee754_rem_pio2+0x1c6>
 8007190:	e9c4 0100 	strd	r0, r1, [r4]
 8007194:	e039      	b.n	800720a <__ieee754_rem_pio2+0x23a>
 8007196:	a34c      	add	r3, pc, #304	@ (adr r3, 80072c8 <__ieee754_rem_pio2+0x2f8>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a0:	f7f9 f9ee 	bl	8000580 <__aeabi_dmul>
 80071a4:	4606      	mov	r6, r0
 80071a6:	460f      	mov	r7, r1
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4650      	mov	r0, sl
 80071ae:	4659      	mov	r1, fp
 80071b0:	f7f9 f82e 	bl	8000210 <__aeabi_dsub>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4680      	mov	r8, r0
 80071ba:	4689      	mov	r9, r1
 80071bc:	4650      	mov	r0, sl
 80071be:	4659      	mov	r1, fp
 80071c0:	f7f9 f826 	bl	8000210 <__aeabi_dsub>
 80071c4:	4632      	mov	r2, r6
 80071c6:	463b      	mov	r3, r7
 80071c8:	f7f9 f822 	bl	8000210 <__aeabi_dsub>
 80071cc:	a340      	add	r3, pc, #256	@ (adr r3, 80072d0 <__ieee754_rem_pio2+0x300>)
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071da:	f7f9 f9d1 	bl	8000580 <__aeabi_dmul>
 80071de:	4632      	mov	r2, r6
 80071e0:	463b      	mov	r3, r7
 80071e2:	f7f9 f815 	bl	8000210 <__aeabi_dsub>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	4640      	mov	r0, r8
 80071f0:	4649      	mov	r1, r9
 80071f2:	f7f9 f80d 	bl	8000210 <__aeabi_dsub>
 80071f6:	9a05      	ldr	r2, [sp, #20]
 80071f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b31      	cmp	r3, #49	@ 0x31
 8007200:	dc20      	bgt.n	8007244 <__ieee754_rem_pio2+0x274>
 8007202:	e9c4 0100 	strd	r0, r1, [r4]
 8007206:	46c2      	mov	sl, r8
 8007208:	46cb      	mov	fp, r9
 800720a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800720e:	4650      	mov	r0, sl
 8007210:	4642      	mov	r2, r8
 8007212:	464b      	mov	r3, r9
 8007214:	4659      	mov	r1, fp
 8007216:	f7f8 fffb 	bl	8000210 <__aeabi_dsub>
 800721a:	463b      	mov	r3, r7
 800721c:	4632      	mov	r2, r6
 800721e:	f7f8 fff7 	bl	8000210 <__aeabi_dsub>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800722a:	f6bf af0e 	bge.w	800704a <__ieee754_rem_pio2+0x7a>
 800722e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007232:	6063      	str	r3, [r4, #4]
 8007234:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007238:	f8c4 8000 	str.w	r8, [r4]
 800723c:	60a0      	str	r0, [r4, #8]
 800723e:	60e3      	str	r3, [r4, #12]
 8007240:	426d      	negs	r5, r5
 8007242:	e702      	b.n	800704a <__ieee754_rem_pio2+0x7a>
 8007244:	a326      	add	r3, pc, #152	@ (adr r3, 80072e0 <__ieee754_rem_pio2+0x310>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724e:	f7f9 f997 	bl	8000580 <__aeabi_dmul>
 8007252:	4606      	mov	r6, r0
 8007254:	460f      	mov	r7, r1
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4640      	mov	r0, r8
 800725c:	4649      	mov	r1, r9
 800725e:	f7f8 ffd7 	bl	8000210 <__aeabi_dsub>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4682      	mov	sl, r0
 8007268:	468b      	mov	fp, r1
 800726a:	4640      	mov	r0, r8
 800726c:	4649      	mov	r1, r9
 800726e:	f7f8 ffcf 	bl	8000210 <__aeabi_dsub>
 8007272:	4632      	mov	r2, r6
 8007274:	463b      	mov	r3, r7
 8007276:	f7f8 ffcb 	bl	8000210 <__aeabi_dsub>
 800727a:	a31b      	add	r3, pc, #108	@ (adr r3, 80072e8 <__ieee754_rem_pio2+0x318>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	4606      	mov	r6, r0
 8007282:	460f      	mov	r7, r1
 8007284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007288:	f7f9 f97a 	bl	8000580 <__aeabi_dmul>
 800728c:	4632      	mov	r2, r6
 800728e:	463b      	mov	r3, r7
 8007290:	f7f8 ffbe 	bl	8000210 <__aeabi_dsub>
 8007294:	4606      	mov	r6, r0
 8007296:	460f      	mov	r7, r1
 8007298:	e764      	b.n	8007164 <__ieee754_rem_pio2+0x194>
 800729a:	4b1b      	ldr	r3, [pc, #108]	@ (8007308 <__ieee754_rem_pio2+0x338>)
 800729c:	4598      	cmp	r8, r3
 800729e:	d935      	bls.n	800730c <__ieee754_rem_pio2+0x33c>
 80072a0:	4632      	mov	r2, r6
 80072a2:	463b      	mov	r3, r7
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f8 ffb2 	bl	8000210 <__aeabi_dsub>
 80072ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072b0:	e9c4 0100 	strd	r0, r1, [r4]
 80072b4:	e69e      	b.n	8006ff4 <__ieee754_rem_pio2+0x24>
 80072b6:	bf00      	nop
 80072b8:	54400000 	.word	0x54400000
 80072bc:	3ff921fb 	.word	0x3ff921fb
 80072c0:	1a626331 	.word	0x1a626331
 80072c4:	3dd0b461 	.word	0x3dd0b461
 80072c8:	1a600000 	.word	0x1a600000
 80072cc:	3dd0b461 	.word	0x3dd0b461
 80072d0:	2e037073 	.word	0x2e037073
 80072d4:	3ba3198a 	.word	0x3ba3198a
 80072d8:	6dc9c883 	.word	0x6dc9c883
 80072dc:	3fe45f30 	.word	0x3fe45f30
 80072e0:	2e000000 	.word	0x2e000000
 80072e4:	3ba3198a 	.word	0x3ba3198a
 80072e8:	252049c1 	.word	0x252049c1
 80072ec:	397b839a 	.word	0x397b839a
 80072f0:	3fe921fb 	.word	0x3fe921fb
 80072f4:	4002d97b 	.word	0x4002d97b
 80072f8:	3ff921fb 	.word	0x3ff921fb
 80072fc:	413921fb 	.word	0x413921fb
 8007300:	3fe00000 	.word	0x3fe00000
 8007304:	08008358 	.word	0x08008358
 8007308:	7fefffff 	.word	0x7fefffff
 800730c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007310:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007314:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007318:	4630      	mov	r0, r6
 800731a:	460f      	mov	r7, r1
 800731c:	f7f9 fbe0 	bl	8000ae0 <__aeabi_d2iz>
 8007320:	f7f9 f8c4 	bl	80004ac <__aeabi_i2d>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007330:	f7f8 ff6e 	bl	8000210 <__aeabi_dsub>
 8007334:	4b22      	ldr	r3, [pc, #136]	@ (80073c0 <__ieee754_rem_pio2+0x3f0>)
 8007336:	2200      	movs	r2, #0
 8007338:	f7f9 f922 	bl	8000580 <__aeabi_dmul>
 800733c:	460f      	mov	r7, r1
 800733e:	4606      	mov	r6, r0
 8007340:	f7f9 fbce 	bl	8000ae0 <__aeabi_d2iz>
 8007344:	f7f9 f8b2 	bl	80004ac <__aeabi_i2d>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4630      	mov	r0, r6
 800734e:	4639      	mov	r1, r7
 8007350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007354:	f7f8 ff5c 	bl	8000210 <__aeabi_dsub>
 8007358:	4b19      	ldr	r3, [pc, #100]	@ (80073c0 <__ieee754_rem_pio2+0x3f0>)
 800735a:	2200      	movs	r2, #0
 800735c:	f7f9 f910 	bl	8000580 <__aeabi_dmul>
 8007360:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007364:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007368:	f04f 0803 	mov.w	r8, #3
 800736c:	2600      	movs	r6, #0
 800736e:	2700      	movs	r7, #0
 8007370:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	46c2      	mov	sl, r8
 800737a:	f108 38ff 	add.w	r8, r8, #4294967295
 800737e:	f7f9 fb67 	bl	8000a50 <__aeabi_dcmpeq>
 8007382:	2800      	cmp	r0, #0
 8007384:	d1f4      	bne.n	8007370 <__ieee754_rem_pio2+0x3a0>
 8007386:	4b0f      	ldr	r3, [pc, #60]	@ (80073c4 <__ieee754_rem_pio2+0x3f4>)
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	2302      	movs	r3, #2
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	462a      	mov	r2, r5
 8007390:	4653      	mov	r3, sl
 8007392:	4621      	mov	r1, r4
 8007394:	a806      	add	r0, sp, #24
 8007396:	f000 fa6b 	bl	8007870 <__kernel_rem_pio2>
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	4605      	mov	r5, r0
 80073a0:	f6bf ae53 	bge.w	800704a <__ieee754_rem_pio2+0x7a>
 80073a4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80073a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073ac:	e9c4 2300 	strd	r2, r3, [r4]
 80073b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80073b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80073bc:	e740      	b.n	8007240 <__ieee754_rem_pio2+0x270>
 80073be:	bf00      	nop
 80073c0:	41700000 	.word	0x41700000
 80073c4:	080083d8 	.word	0x080083d8

080073c8 <atan>:
 80073c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	ec55 4b10 	vmov	r4, r5, d0
 80073d0:	4bbf      	ldr	r3, [pc, #764]	@ (80076d0 <atan+0x308>)
 80073d2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80073d6:	429e      	cmp	r6, r3
 80073d8:	46ab      	mov	fp, r5
 80073da:	d918      	bls.n	800740e <atan+0x46>
 80073dc:	4bbd      	ldr	r3, [pc, #756]	@ (80076d4 <atan+0x30c>)
 80073de:	429e      	cmp	r6, r3
 80073e0:	d801      	bhi.n	80073e6 <atan+0x1e>
 80073e2:	d109      	bne.n	80073f8 <atan+0x30>
 80073e4:	b144      	cbz	r4, 80073f8 <atan+0x30>
 80073e6:	4622      	mov	r2, r4
 80073e8:	462b      	mov	r3, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	f7f8 ff11 	bl	8000214 <__adddf3>
 80073f2:	4604      	mov	r4, r0
 80073f4:	460d      	mov	r5, r1
 80073f6:	e006      	b.n	8007406 <atan+0x3e>
 80073f8:	f1bb 0f00 	cmp.w	fp, #0
 80073fc:	f340 812b 	ble.w	8007656 <atan+0x28e>
 8007400:	a597      	add	r5, pc, #604	@ (adr r5, 8007660 <atan+0x298>)
 8007402:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007406:	ec45 4b10 	vmov	d0, r4, r5
 800740a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	4bb2      	ldr	r3, [pc, #712]	@ (80076d8 <atan+0x310>)
 8007410:	429e      	cmp	r6, r3
 8007412:	d813      	bhi.n	800743c <atan+0x74>
 8007414:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007418:	429e      	cmp	r6, r3
 800741a:	d80c      	bhi.n	8007436 <atan+0x6e>
 800741c:	a392      	add	r3, pc, #584	@ (adr r3, 8007668 <atan+0x2a0>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	4620      	mov	r0, r4
 8007424:	4629      	mov	r1, r5
 8007426:	f7f8 fef5 	bl	8000214 <__adddf3>
 800742a:	4bac      	ldr	r3, [pc, #688]	@ (80076dc <atan+0x314>)
 800742c:	2200      	movs	r2, #0
 800742e:	f7f9 fb37 	bl	8000aa0 <__aeabi_dcmpgt>
 8007432:	2800      	cmp	r0, #0
 8007434:	d1e7      	bne.n	8007406 <atan+0x3e>
 8007436:	f04f 3aff 	mov.w	sl, #4294967295
 800743a:	e029      	b.n	8007490 <atan+0xc8>
 800743c:	f7fe f934 	bl	80056a8 <fabs>
 8007440:	4ba7      	ldr	r3, [pc, #668]	@ (80076e0 <atan+0x318>)
 8007442:	429e      	cmp	r6, r3
 8007444:	ec55 4b10 	vmov	r4, r5, d0
 8007448:	f200 80bc 	bhi.w	80075c4 <atan+0x1fc>
 800744c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007450:	429e      	cmp	r6, r3
 8007452:	f200 809e 	bhi.w	8007592 <atan+0x1ca>
 8007456:	4622      	mov	r2, r4
 8007458:	462b      	mov	r3, r5
 800745a:	4620      	mov	r0, r4
 800745c:	4629      	mov	r1, r5
 800745e:	f7f8 fed9 	bl	8000214 <__adddf3>
 8007462:	4b9e      	ldr	r3, [pc, #632]	@ (80076dc <atan+0x314>)
 8007464:	2200      	movs	r2, #0
 8007466:	f7f8 fed3 	bl	8000210 <__aeabi_dsub>
 800746a:	2200      	movs	r2, #0
 800746c:	4606      	mov	r6, r0
 800746e:	460f      	mov	r7, r1
 8007470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007474:	4620      	mov	r0, r4
 8007476:	4629      	mov	r1, r5
 8007478:	f7f8 fecc 	bl	8000214 <__adddf3>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4630      	mov	r0, r6
 8007482:	4639      	mov	r1, r7
 8007484:	f7f9 f9a6 	bl	80007d4 <__aeabi_ddiv>
 8007488:	f04f 0a00 	mov.w	sl, #0
 800748c:	4604      	mov	r4, r0
 800748e:	460d      	mov	r5, r1
 8007490:	4622      	mov	r2, r4
 8007492:	462b      	mov	r3, r5
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	f7f9 f872 	bl	8000580 <__aeabi_dmul>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4680      	mov	r8, r0
 80074a2:	4689      	mov	r9, r1
 80074a4:	f7f9 f86c 	bl	8000580 <__aeabi_dmul>
 80074a8:	a371      	add	r3, pc, #452	@ (adr r3, 8007670 <atan+0x2a8>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	4606      	mov	r6, r0
 80074b0:	460f      	mov	r7, r1
 80074b2:	f7f9 f865 	bl	8000580 <__aeabi_dmul>
 80074b6:	a370      	add	r3, pc, #448	@ (adr r3, 8007678 <atan+0x2b0>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f7f8 feaa 	bl	8000214 <__adddf3>
 80074c0:	4632      	mov	r2, r6
 80074c2:	463b      	mov	r3, r7
 80074c4:	f7f9 f85c 	bl	8000580 <__aeabi_dmul>
 80074c8:	a36d      	add	r3, pc, #436	@ (adr r3, 8007680 <atan+0x2b8>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f8 fea1 	bl	8000214 <__adddf3>
 80074d2:	4632      	mov	r2, r6
 80074d4:	463b      	mov	r3, r7
 80074d6:	f7f9 f853 	bl	8000580 <__aeabi_dmul>
 80074da:	a36b      	add	r3, pc, #428	@ (adr r3, 8007688 <atan+0x2c0>)
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	f7f8 fe98 	bl	8000214 <__adddf3>
 80074e4:	4632      	mov	r2, r6
 80074e6:	463b      	mov	r3, r7
 80074e8:	f7f9 f84a 	bl	8000580 <__aeabi_dmul>
 80074ec:	a368      	add	r3, pc, #416	@ (adr r3, 8007690 <atan+0x2c8>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f8 fe8f 	bl	8000214 <__adddf3>
 80074f6:	4632      	mov	r2, r6
 80074f8:	463b      	mov	r3, r7
 80074fa:	f7f9 f841 	bl	8000580 <__aeabi_dmul>
 80074fe:	a366      	add	r3, pc, #408	@ (adr r3, 8007698 <atan+0x2d0>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f7f8 fe86 	bl	8000214 <__adddf3>
 8007508:	4642      	mov	r2, r8
 800750a:	464b      	mov	r3, r9
 800750c:	f7f9 f838 	bl	8000580 <__aeabi_dmul>
 8007510:	a363      	add	r3, pc, #396	@ (adr r3, 80076a0 <atan+0x2d8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	4680      	mov	r8, r0
 8007518:	4689      	mov	r9, r1
 800751a:	4630      	mov	r0, r6
 800751c:	4639      	mov	r1, r7
 800751e:	f7f9 f82f 	bl	8000580 <__aeabi_dmul>
 8007522:	a361      	add	r3, pc, #388	@ (adr r3, 80076a8 <atan+0x2e0>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f8 fe72 	bl	8000210 <__aeabi_dsub>
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	f7f9 f826 	bl	8000580 <__aeabi_dmul>
 8007534:	a35e      	add	r3, pc, #376	@ (adr r3, 80076b0 <atan+0x2e8>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f8 fe69 	bl	8000210 <__aeabi_dsub>
 800753e:	4632      	mov	r2, r6
 8007540:	463b      	mov	r3, r7
 8007542:	f7f9 f81d 	bl	8000580 <__aeabi_dmul>
 8007546:	a35c      	add	r3, pc, #368	@ (adr r3, 80076b8 <atan+0x2f0>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f7f8 fe60 	bl	8000210 <__aeabi_dsub>
 8007550:	4632      	mov	r2, r6
 8007552:	463b      	mov	r3, r7
 8007554:	f7f9 f814 	bl	8000580 <__aeabi_dmul>
 8007558:	a359      	add	r3, pc, #356	@ (adr r3, 80076c0 <atan+0x2f8>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f8 fe57 	bl	8000210 <__aeabi_dsub>
 8007562:	4632      	mov	r2, r6
 8007564:	463b      	mov	r3, r7
 8007566:	f7f9 f80b 	bl	8000580 <__aeabi_dmul>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	f7f8 fe4f 	bl	8000214 <__adddf3>
 8007576:	4622      	mov	r2, r4
 8007578:	462b      	mov	r3, r5
 800757a:	f7f9 f801 	bl	8000580 <__aeabi_dmul>
 800757e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	d148      	bne.n	800761a <atan+0x252>
 8007588:	4620      	mov	r0, r4
 800758a:	4629      	mov	r1, r5
 800758c:	f7f8 fe40 	bl	8000210 <__aeabi_dsub>
 8007590:	e72f      	b.n	80073f2 <atan+0x2a>
 8007592:	4b52      	ldr	r3, [pc, #328]	@ (80076dc <atan+0x314>)
 8007594:	2200      	movs	r2, #0
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f8 fe39 	bl	8000210 <__aeabi_dsub>
 800759e:	4b4f      	ldr	r3, [pc, #316]	@ (80076dc <atan+0x314>)
 80075a0:	4606      	mov	r6, r0
 80075a2:	460f      	mov	r7, r1
 80075a4:	2200      	movs	r2, #0
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f8 fe33 	bl	8000214 <__adddf3>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4630      	mov	r0, r6
 80075b4:	4639      	mov	r1, r7
 80075b6:	f7f9 f90d 	bl	80007d4 <__aeabi_ddiv>
 80075ba:	f04f 0a01 	mov.w	sl, #1
 80075be:	4604      	mov	r4, r0
 80075c0:	460d      	mov	r5, r1
 80075c2:	e765      	b.n	8007490 <atan+0xc8>
 80075c4:	4b47      	ldr	r3, [pc, #284]	@ (80076e4 <atan+0x31c>)
 80075c6:	429e      	cmp	r6, r3
 80075c8:	d21c      	bcs.n	8007604 <atan+0x23c>
 80075ca:	4b47      	ldr	r3, [pc, #284]	@ (80076e8 <atan+0x320>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f8 fe1d 	bl	8000210 <__aeabi_dsub>
 80075d6:	4b44      	ldr	r3, [pc, #272]	@ (80076e8 <atan+0x320>)
 80075d8:	4606      	mov	r6, r0
 80075da:	460f      	mov	r7, r1
 80075dc:	2200      	movs	r2, #0
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7f8 ffcd 	bl	8000580 <__aeabi_dmul>
 80075e6:	4b3d      	ldr	r3, [pc, #244]	@ (80076dc <atan+0x314>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	f7f8 fe13 	bl	8000214 <__adddf3>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f9 f8ed 	bl	80007d4 <__aeabi_ddiv>
 80075fa:	f04f 0a02 	mov.w	sl, #2
 80075fe:	4604      	mov	r4, r0
 8007600:	460d      	mov	r5, r1
 8007602:	e745      	b.n	8007490 <atan+0xc8>
 8007604:	4622      	mov	r2, r4
 8007606:	462b      	mov	r3, r5
 8007608:	4938      	ldr	r1, [pc, #224]	@ (80076ec <atan+0x324>)
 800760a:	2000      	movs	r0, #0
 800760c:	f7f9 f8e2 	bl	80007d4 <__aeabi_ddiv>
 8007610:	f04f 0a03 	mov.w	sl, #3
 8007614:	4604      	mov	r4, r0
 8007616:	460d      	mov	r5, r1
 8007618:	e73a      	b.n	8007490 <atan+0xc8>
 800761a:	4b35      	ldr	r3, [pc, #212]	@ (80076f0 <atan+0x328>)
 800761c:	4e35      	ldr	r6, [pc, #212]	@ (80076f4 <atan+0x32c>)
 800761e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f7f8 fdf3 	bl	8000210 <__aeabi_dsub>
 800762a:	4622      	mov	r2, r4
 800762c:	462b      	mov	r3, r5
 800762e:	f7f8 fdef 	bl	8000210 <__aeabi_dsub>
 8007632:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800763e:	f7f8 fde7 	bl	8000210 <__aeabi_dsub>
 8007642:	f1bb 0f00 	cmp.w	fp, #0
 8007646:	4604      	mov	r4, r0
 8007648:	460d      	mov	r5, r1
 800764a:	f6bf aedc 	bge.w	8007406 <atan+0x3e>
 800764e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007652:	461d      	mov	r5, r3
 8007654:	e6d7      	b.n	8007406 <atan+0x3e>
 8007656:	a51c      	add	r5, pc, #112	@ (adr r5, 80076c8 <atan+0x300>)
 8007658:	e9d5 4500 	ldrd	r4, r5, [r5]
 800765c:	e6d3      	b.n	8007406 <atan+0x3e>
 800765e:	bf00      	nop
 8007660:	54442d18 	.word	0x54442d18
 8007664:	3ff921fb 	.word	0x3ff921fb
 8007668:	8800759c 	.word	0x8800759c
 800766c:	7e37e43c 	.word	0x7e37e43c
 8007670:	e322da11 	.word	0xe322da11
 8007674:	3f90ad3a 	.word	0x3f90ad3a
 8007678:	24760deb 	.word	0x24760deb
 800767c:	3fa97b4b 	.word	0x3fa97b4b
 8007680:	a0d03d51 	.word	0xa0d03d51
 8007684:	3fb10d66 	.word	0x3fb10d66
 8007688:	c54c206e 	.word	0xc54c206e
 800768c:	3fb745cd 	.word	0x3fb745cd
 8007690:	920083ff 	.word	0x920083ff
 8007694:	3fc24924 	.word	0x3fc24924
 8007698:	5555550d 	.word	0x5555550d
 800769c:	3fd55555 	.word	0x3fd55555
 80076a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80076a4:	bfa2b444 	.word	0xbfa2b444
 80076a8:	52defd9a 	.word	0x52defd9a
 80076ac:	3fadde2d 	.word	0x3fadde2d
 80076b0:	af749a6d 	.word	0xaf749a6d
 80076b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80076b8:	fe231671 	.word	0xfe231671
 80076bc:	3fbc71c6 	.word	0x3fbc71c6
 80076c0:	9998ebc4 	.word	0x9998ebc4
 80076c4:	3fc99999 	.word	0x3fc99999
 80076c8:	54442d18 	.word	0x54442d18
 80076cc:	bff921fb 	.word	0xbff921fb
 80076d0:	440fffff 	.word	0x440fffff
 80076d4:	7ff00000 	.word	0x7ff00000
 80076d8:	3fdbffff 	.word	0x3fdbffff
 80076dc:	3ff00000 	.word	0x3ff00000
 80076e0:	3ff2ffff 	.word	0x3ff2ffff
 80076e4:	40038000 	.word	0x40038000
 80076e8:	3ff80000 	.word	0x3ff80000
 80076ec:	bff00000 	.word	0xbff00000
 80076f0:	080084e0 	.word	0x080084e0
 80076f4:	08008500 	.word	0x08008500

080076f8 <scalbn>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	ec55 4b10 	vmov	r4, r5, d0
 80076fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007702:	4606      	mov	r6, r0
 8007704:	462b      	mov	r3, r5
 8007706:	b991      	cbnz	r1, 800772e <scalbn+0x36>
 8007708:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800770c:	4323      	orrs	r3, r4
 800770e:	d03d      	beq.n	800778c <scalbn+0x94>
 8007710:	4b35      	ldr	r3, [pc, #212]	@ (80077e8 <scalbn+0xf0>)
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	2200      	movs	r2, #0
 8007718:	f7f8 ff32 	bl	8000580 <__aeabi_dmul>
 800771c:	4b33      	ldr	r3, [pc, #204]	@ (80077ec <scalbn+0xf4>)
 800771e:	429e      	cmp	r6, r3
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
 8007724:	da0f      	bge.n	8007746 <scalbn+0x4e>
 8007726:	a328      	add	r3, pc, #160	@ (adr r3, 80077c8 <scalbn+0xd0>)
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	e01e      	b.n	800776c <scalbn+0x74>
 800772e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007732:	4291      	cmp	r1, r2
 8007734:	d10b      	bne.n	800774e <scalbn+0x56>
 8007736:	4622      	mov	r2, r4
 8007738:	4620      	mov	r0, r4
 800773a:	4629      	mov	r1, r5
 800773c:	f7f8 fd6a 	bl	8000214 <__adddf3>
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	e022      	b.n	800778c <scalbn+0x94>
 8007746:	460b      	mov	r3, r1
 8007748:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800774c:	3936      	subs	r1, #54	@ 0x36
 800774e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007752:	4296      	cmp	r6, r2
 8007754:	dd0d      	ble.n	8007772 <scalbn+0x7a>
 8007756:	2d00      	cmp	r5, #0
 8007758:	a11d      	add	r1, pc, #116	@ (adr r1, 80077d0 <scalbn+0xd8>)
 800775a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800775e:	da02      	bge.n	8007766 <scalbn+0x6e>
 8007760:	a11d      	add	r1, pc, #116	@ (adr r1, 80077d8 <scalbn+0xe0>)
 8007762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007766:	a31a      	add	r3, pc, #104	@ (adr r3, 80077d0 <scalbn+0xd8>)
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f7f8 ff08 	bl	8000580 <__aeabi_dmul>
 8007770:	e7e6      	b.n	8007740 <scalbn+0x48>
 8007772:	1872      	adds	r2, r6, r1
 8007774:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007778:	428a      	cmp	r2, r1
 800777a:	dcec      	bgt.n	8007756 <scalbn+0x5e>
 800777c:	2a00      	cmp	r2, #0
 800777e:	dd08      	ble.n	8007792 <scalbn+0x9a>
 8007780:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007784:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007788:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800778c:	ec45 4b10 	vmov	d0, r4, r5
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007796:	da08      	bge.n	80077aa <scalbn+0xb2>
 8007798:	2d00      	cmp	r5, #0
 800779a:	a10b      	add	r1, pc, #44	@ (adr r1, 80077c8 <scalbn+0xd0>)
 800779c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077a0:	dac1      	bge.n	8007726 <scalbn+0x2e>
 80077a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80077e0 <scalbn+0xe8>)
 80077a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077a8:	e7bd      	b.n	8007726 <scalbn+0x2e>
 80077aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80077ae:	3236      	adds	r2, #54	@ 0x36
 80077b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80077b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80077b8:	4620      	mov	r0, r4
 80077ba:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <scalbn+0xf8>)
 80077bc:	4629      	mov	r1, r5
 80077be:	2200      	movs	r2, #0
 80077c0:	e7d4      	b.n	800776c <scalbn+0x74>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	c2f8f359 	.word	0xc2f8f359
 80077cc:	01a56e1f 	.word	0x01a56e1f
 80077d0:	8800759c 	.word	0x8800759c
 80077d4:	7e37e43c 	.word	0x7e37e43c
 80077d8:	8800759c 	.word	0x8800759c
 80077dc:	fe37e43c 	.word	0xfe37e43c
 80077e0:	c2f8f359 	.word	0xc2f8f359
 80077e4:	81a56e1f 	.word	0x81a56e1f
 80077e8:	43500000 	.word	0x43500000
 80077ec:	ffff3cb0 	.word	0xffff3cb0
 80077f0:	3c900000 	.word	0x3c900000

080077f4 <with_errno>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	ed2d 8b02 	vpush	{d8}
 80077fa:	eeb0 8a40 	vmov.f32	s16, s0
 80077fe:	eef0 8a60 	vmov.f32	s17, s1
 8007802:	4604      	mov	r4, r0
 8007804:	f7fd fdc4 	bl	8005390 <__errno>
 8007808:	eeb0 0a48 	vmov.f32	s0, s16
 800780c:	eef0 0a68 	vmov.f32	s1, s17
 8007810:	ecbd 8b02 	vpop	{d8}
 8007814:	6004      	str	r4, [r0, #0]
 8007816:	bd10      	pop	{r4, pc}

08007818 <xflow>:
 8007818:	4603      	mov	r3, r0
 800781a:	b507      	push	{r0, r1, r2, lr}
 800781c:	ec51 0b10 	vmov	r0, r1, d0
 8007820:	b183      	cbz	r3, 8007844 <xflow+0x2c>
 8007822:	4602      	mov	r2, r0
 8007824:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007828:	e9cd 2300 	strd	r2, r3, [sp]
 800782c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007830:	f7f8 fea6 	bl	8000580 <__aeabi_dmul>
 8007834:	ec41 0b10 	vmov	d0, r0, r1
 8007838:	2022      	movs	r0, #34	@ 0x22
 800783a:	b003      	add	sp, #12
 800783c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007840:	f7ff bfd8 	b.w	80077f4 <with_errno>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	e7ee      	b.n	8007828 <xflow+0x10>
 800784a:	0000      	movs	r0, r0
 800784c:	0000      	movs	r0, r0
	...

08007850 <__math_uflow>:
 8007850:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007858 <__math_uflow+0x8>
 8007854:	f7ff bfe0 	b.w	8007818 <xflow>
 8007858:	00000000 	.word	0x00000000
 800785c:	10000000 	.word	0x10000000

08007860 <__math_oflow>:
 8007860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007868 <__math_oflow+0x8>
 8007864:	f7ff bfd8 	b.w	8007818 <xflow>
 8007868:	00000000 	.word	0x00000000
 800786c:	70000000 	.word	0x70000000

08007870 <__kernel_rem_pio2>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	ed2d 8b02 	vpush	{d8}
 8007878:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800787c:	f112 0f14 	cmn.w	r2, #20
 8007880:	9306      	str	r3, [sp, #24]
 8007882:	9104      	str	r1, [sp, #16]
 8007884:	4bbe      	ldr	r3, [pc, #760]	@ (8007b80 <__kernel_rem_pio2+0x310>)
 8007886:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007888:	9008      	str	r0, [sp, #32]
 800788a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	9b06      	ldr	r3, [sp, #24]
 8007892:	f103 33ff 	add.w	r3, r3, #4294967295
 8007896:	bfa8      	it	ge
 8007898:	1ed4      	subge	r4, r2, #3
 800789a:	9305      	str	r3, [sp, #20]
 800789c:	bfb2      	itee	lt
 800789e:	2400      	movlt	r4, #0
 80078a0:	2318      	movge	r3, #24
 80078a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80078a6:	f06f 0317 	mvn.w	r3, #23
 80078aa:	fb04 3303 	mla	r3, r4, r3, r3
 80078ae:	eb03 0b02 	add.w	fp, r3, r2
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	9a05      	ldr	r2, [sp, #20]
 80078b6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007b70 <__kernel_rem_pio2+0x300>
 80078ba:	eb03 0802 	add.w	r8, r3, r2
 80078be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80078c0:	1aa7      	subs	r7, r4, r2
 80078c2:	ae20      	add	r6, sp, #128	@ 0x80
 80078c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80078c8:	2500      	movs	r5, #0
 80078ca:	4545      	cmp	r5, r8
 80078cc:	dd13      	ble.n	80078f6 <__kernel_rem_pio2+0x86>
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	aa20      	add	r2, sp, #128	@ 0x80
 80078d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80078d6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80078da:	f04f 0800 	mov.w	r8, #0
 80078de:	9b00      	ldr	r3, [sp, #0]
 80078e0:	4598      	cmp	r8, r3
 80078e2:	dc31      	bgt.n	8007948 <__kernel_rem_pio2+0xd8>
 80078e4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007b70 <__kernel_rem_pio2+0x300>
 80078e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078f0:	462f      	mov	r7, r5
 80078f2:	2600      	movs	r6, #0
 80078f4:	e01b      	b.n	800792e <__kernel_rem_pio2+0xbe>
 80078f6:	42ef      	cmn	r7, r5
 80078f8:	d407      	bmi.n	800790a <__kernel_rem_pio2+0x9a>
 80078fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80078fe:	f7f8 fdd5 	bl	80004ac <__aeabi_i2d>
 8007902:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007906:	3501      	adds	r5, #1
 8007908:	e7df      	b.n	80078ca <__kernel_rem_pio2+0x5a>
 800790a:	ec51 0b18 	vmov	r0, r1, d8
 800790e:	e7f8      	b.n	8007902 <__kernel_rem_pio2+0x92>
 8007910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007914:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007918:	f7f8 fe32 	bl	8000580 <__aeabi_dmul>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007924:	f7f8 fc76 	bl	8000214 <__adddf3>
 8007928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800792c:	3601      	adds	r6, #1
 800792e:	9b05      	ldr	r3, [sp, #20]
 8007930:	429e      	cmp	r6, r3
 8007932:	f1a7 0708 	sub.w	r7, r7, #8
 8007936:	ddeb      	ble.n	8007910 <__kernel_rem_pio2+0xa0>
 8007938:	ed9d 7b02 	vldr	d7, [sp, #8]
 800793c:	f108 0801 	add.w	r8, r8, #1
 8007940:	ecaa 7b02 	vstmia	sl!, {d7}
 8007944:	3508      	adds	r5, #8
 8007946:	e7ca      	b.n	80078de <__kernel_rem_pio2+0x6e>
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	f8dd 8000 	ldr.w	r8, [sp]
 800794e:	aa0c      	add	r2, sp, #48	@ 0x30
 8007950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007954:	930a      	str	r3, [sp, #40]	@ 0x28
 8007956:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007958:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800795c:	9309      	str	r3, [sp, #36]	@ 0x24
 800795e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007964:	ab98      	add	r3, sp, #608	@ 0x260
 8007966:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800796a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800796e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007972:	ac0c      	add	r4, sp, #48	@ 0x30
 8007974:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007976:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800797a:	46a1      	mov	r9, r4
 800797c:	46c2      	mov	sl, r8
 800797e:	f1ba 0f00 	cmp.w	sl, #0
 8007982:	f1a5 0508 	sub.w	r5, r5, #8
 8007986:	dc77      	bgt.n	8007a78 <__kernel_rem_pio2+0x208>
 8007988:	4658      	mov	r0, fp
 800798a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800798e:	f7ff feb3 	bl	80076f8 <scalbn>
 8007992:	ec57 6b10 	vmov	r6, r7, d0
 8007996:	2200      	movs	r2, #0
 8007998:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800799c:	4630      	mov	r0, r6
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f8 fdee 	bl	8000580 <__aeabi_dmul>
 80079a4:	ec41 0b10 	vmov	d0, r0, r1
 80079a8:	f000 faba 	bl	8007f20 <floor>
 80079ac:	4b75      	ldr	r3, [pc, #468]	@ (8007b84 <__kernel_rem_pio2+0x314>)
 80079ae:	ec51 0b10 	vmov	r0, r1, d0
 80079b2:	2200      	movs	r2, #0
 80079b4:	f7f8 fde4 	bl	8000580 <__aeabi_dmul>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f8 fc26 	bl	8000210 <__aeabi_dsub>
 80079c4:	460f      	mov	r7, r1
 80079c6:	4606      	mov	r6, r0
 80079c8:	f7f9 f88a 	bl	8000ae0 <__aeabi_d2iz>
 80079cc:	9002      	str	r0, [sp, #8]
 80079ce:	f7f8 fd6d 	bl	80004ac <__aeabi_i2d>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4630      	mov	r0, r6
 80079d8:	4639      	mov	r1, r7
 80079da:	f7f8 fc19 	bl	8000210 <__aeabi_dsub>
 80079de:	f1bb 0f00 	cmp.w	fp, #0
 80079e2:	4606      	mov	r6, r0
 80079e4:	460f      	mov	r7, r1
 80079e6:	dd6c      	ble.n	8007ac2 <__kernel_rem_pio2+0x252>
 80079e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80079ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80079ee:	9d02      	ldr	r5, [sp, #8]
 80079f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079f4:	f1cb 0018 	rsb	r0, fp, #24
 80079f8:	fa43 f200 	asr.w	r2, r3, r0
 80079fc:	4415      	add	r5, r2
 80079fe:	4082      	lsls	r2, r0
 8007a00:	1a9b      	subs	r3, r3, r2
 8007a02:	aa0c      	add	r2, sp, #48	@ 0x30
 8007a04:	9502      	str	r5, [sp, #8]
 8007a06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007a0a:	f1cb 0217 	rsb	r2, fp, #23
 8007a0e:	fa43 f902 	asr.w	r9, r3, r2
 8007a12:	f1b9 0f00 	cmp.w	r9, #0
 8007a16:	dd64      	ble.n	8007ae2 <__kernel_rem_pio2+0x272>
 8007a18:	9b02      	ldr	r3, [sp, #8]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	9302      	str	r3, [sp, #8]
 8007a20:	4615      	mov	r5, r2
 8007a22:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007a26:	4590      	cmp	r8, r2
 8007a28:	f300 80b8 	bgt.w	8007b9c <__kernel_rem_pio2+0x32c>
 8007a2c:	f1bb 0f00 	cmp.w	fp, #0
 8007a30:	dd07      	ble.n	8007a42 <__kernel_rem_pio2+0x1d2>
 8007a32:	f1bb 0f01 	cmp.w	fp, #1
 8007a36:	f000 80bf 	beq.w	8007bb8 <__kernel_rem_pio2+0x348>
 8007a3a:	f1bb 0f02 	cmp.w	fp, #2
 8007a3e:	f000 80c6 	beq.w	8007bce <__kernel_rem_pio2+0x35e>
 8007a42:	f1b9 0f02 	cmp.w	r9, #2
 8007a46:	d14c      	bne.n	8007ae2 <__kernel_rem_pio2+0x272>
 8007a48:	4632      	mov	r2, r6
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	494e      	ldr	r1, [pc, #312]	@ (8007b88 <__kernel_rem_pio2+0x318>)
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f7f8 fbde 	bl	8000210 <__aeabi_dsub>
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	d042      	beq.n	8007ae2 <__kernel_rem_pio2+0x272>
 8007a5c:	4658      	mov	r0, fp
 8007a5e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007b78 <__kernel_rem_pio2+0x308>
 8007a62:	f7ff fe49 	bl	80076f8 <scalbn>
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	ec53 2b10 	vmov	r2, r3, d0
 8007a6e:	f7f8 fbcf 	bl	8000210 <__aeabi_dsub>
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	e034      	b.n	8007ae2 <__kernel_rem_pio2+0x272>
 8007a78:	4b44      	ldr	r3, [pc, #272]	@ (8007b8c <__kernel_rem_pio2+0x31c>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a80:	f7f8 fd7e 	bl	8000580 <__aeabi_dmul>
 8007a84:	f7f9 f82c 	bl	8000ae0 <__aeabi_d2iz>
 8007a88:	f7f8 fd10 	bl	80004ac <__aeabi_i2d>
 8007a8c:	4b40      	ldr	r3, [pc, #256]	@ (8007b90 <__kernel_rem_pio2+0x320>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4606      	mov	r6, r0
 8007a92:	460f      	mov	r7, r1
 8007a94:	f7f8 fd74 	bl	8000580 <__aeabi_dmul>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa0:	f7f8 fbb6 	bl	8000210 <__aeabi_dsub>
 8007aa4:	f7f9 f81c 	bl	8000ae0 <__aeabi_d2iz>
 8007aa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aac:	f849 0b04 	str.w	r0, [r9], #4
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7f8 fbae 	bl	8000214 <__adddf3>
 8007ab8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac0:	e75d      	b.n	800797e <__kernel_rem_pio2+0x10e>
 8007ac2:	d107      	bne.n	8007ad4 <__kernel_rem_pio2+0x264>
 8007ac4:	f108 33ff 	add.w	r3, r8, #4294967295
 8007ac8:	aa0c      	add	r2, sp, #48	@ 0x30
 8007aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ace:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007ad2:	e79e      	b.n	8007a12 <__kernel_rem_pio2+0x1a2>
 8007ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8007b94 <__kernel_rem_pio2+0x324>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f7f8 ffd8 	bl	8000a8c <__aeabi_dcmpge>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d143      	bne.n	8007b68 <__kernel_rem_pio2+0x2f8>
 8007ae0:	4681      	mov	r9, r0
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7f8 ffb1 	bl	8000a50 <__aeabi_dcmpeq>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f000 80bf 	beq.w	8007c72 <__kernel_rem_pio2+0x402>
 8007af4:	f108 33ff 	add.w	r3, r8, #4294967295
 8007af8:	2200      	movs	r2, #0
 8007afa:	9900      	ldr	r1, [sp, #0]
 8007afc:	428b      	cmp	r3, r1
 8007afe:	da6e      	bge.n	8007bde <__kernel_rem_pio2+0x36e>
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	f000 8089 	beq.w	8007c18 <__kernel_rem_pio2+0x3a8>
 8007b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007b0c:	f1ab 0b18 	sub.w	fp, fp, #24
 8007b10:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f6      	beq.n	8007b06 <__kernel_rem_pio2+0x296>
 8007b18:	4658      	mov	r0, fp
 8007b1a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007b78 <__kernel_rem_pio2+0x308>
 8007b1e:	f7ff fdeb 	bl	80076f8 <scalbn>
 8007b22:	f108 0301 	add.w	r3, r8, #1
 8007b26:	00da      	lsls	r2, r3, #3
 8007b28:	9205      	str	r2, [sp, #20]
 8007b2a:	ec55 4b10 	vmov	r4, r5, d0
 8007b2e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007b30:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007b8c <__kernel_rem_pio2+0x31c>
 8007b34:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007b38:	4646      	mov	r6, r8
 8007b3a:	f04f 0a00 	mov.w	sl, #0
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	f280 80cf 	bge.w	8007ce2 <__kernel_rem_pio2+0x472>
 8007b44:	4644      	mov	r4, r8
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	f2c0 80fd 	blt.w	8007d46 <__kernel_rem_pio2+0x4d6>
 8007b4c:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <__kernel_rem_pio2+0x328>)
 8007b4e:	461f      	mov	r7, r3
 8007b50:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b56:	9306      	str	r3, [sp, #24]
 8007b58:	f04f 0a00 	mov.w	sl, #0
 8007b5c:	f04f 0b00 	mov.w	fp, #0
 8007b60:	2600      	movs	r6, #0
 8007b62:	eba8 0504 	sub.w	r5, r8, r4
 8007b66:	e0e2      	b.n	8007d2e <__kernel_rem_pio2+0x4be>
 8007b68:	f04f 0902 	mov.w	r9, #2
 8007b6c:	e754      	b.n	8007a18 <__kernel_rem_pio2+0x1a8>
 8007b6e:	bf00      	nop
	...
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	08008560 	.word	0x08008560
 8007b84:	40200000 	.word	0x40200000
 8007b88:	3ff00000 	.word	0x3ff00000
 8007b8c:	3e700000 	.word	0x3e700000
 8007b90:	41700000 	.word	0x41700000
 8007b94:	3fe00000 	.word	0x3fe00000
 8007b98:	08008520 	.word	0x08008520
 8007b9c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007ba0:	b945      	cbnz	r5, 8007bb4 <__kernel_rem_pio2+0x344>
 8007ba2:	b123      	cbz	r3, 8007bae <__kernel_rem_pio2+0x33e>
 8007ba4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007ba8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bac:	2301      	movs	r3, #1
 8007bae:	3201      	adds	r2, #1
 8007bb0:	461d      	mov	r5, r3
 8007bb2:	e738      	b.n	8007a26 <__kernel_rem_pio2+0x1b6>
 8007bb4:	1acb      	subs	r3, r1, r3
 8007bb6:	e7f7      	b.n	8007ba8 <__kernel_rem_pio2+0x338>
 8007bb8:	f108 32ff 	add.w	r2, r8, #4294967295
 8007bbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8007bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bc6:	a90c      	add	r1, sp, #48	@ 0x30
 8007bc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bcc:	e739      	b.n	8007a42 <__kernel_rem_pio2+0x1d2>
 8007bce:	f108 32ff 	add.w	r2, r8, #4294967295
 8007bd2:	ab0c      	add	r3, sp, #48	@ 0x30
 8007bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007bdc:	e7f3      	b.n	8007bc6 <__kernel_rem_pio2+0x356>
 8007bde:	a90c      	add	r1, sp, #48	@ 0x30
 8007be0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	430a      	orrs	r2, r1
 8007be8:	e787      	b.n	8007afa <__kernel_rem_pio2+0x28a>
 8007bea:	3401      	adds	r4, #1
 8007bec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d0fa      	beq.n	8007bea <__kernel_rem_pio2+0x37a>
 8007bf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007bfa:	eb0d 0503 	add.w	r5, sp, r3
 8007bfe:	9b06      	ldr	r3, [sp, #24]
 8007c00:	aa20      	add	r2, sp, #128	@ 0x80
 8007c02:	4443      	add	r3, r8
 8007c04:	f108 0701 	add.w	r7, r8, #1
 8007c08:	3d98      	subs	r5, #152	@ 0x98
 8007c0a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007c0e:	4444      	add	r4, r8
 8007c10:	42bc      	cmp	r4, r7
 8007c12:	da04      	bge.n	8007c1e <__kernel_rem_pio2+0x3ae>
 8007c14:	46a0      	mov	r8, r4
 8007c16:	e6a2      	b.n	800795e <__kernel_rem_pio2+0xee>
 8007c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c1a:	2401      	movs	r4, #1
 8007c1c:	e7e6      	b.n	8007bec <__kernel_rem_pio2+0x37c>
 8007c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c20:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007c24:	f7f8 fc42 	bl	80004ac <__aeabi_i2d>
 8007c28:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007ef0 <__kernel_rem_pio2+0x680>
 8007c2c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007c30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c38:	46b2      	mov	sl, r6
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	9b05      	ldr	r3, [sp, #20]
 8007c40:	4598      	cmp	r8, r3
 8007c42:	dd05      	ble.n	8007c50 <__kernel_rem_pio2+0x3e0>
 8007c44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c48:	3701      	adds	r7, #1
 8007c4a:	eca5 7b02 	vstmia	r5!, {d7}
 8007c4e:	e7df      	b.n	8007c10 <__kernel_rem_pio2+0x3a0>
 8007c50:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007c54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007c58:	f7f8 fc92 	bl	8000580 <__aeabi_dmul>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c64:	f7f8 fad6 	bl	8000214 <__adddf3>
 8007c68:	f108 0801 	add.w	r8, r8, #1
 8007c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c70:	e7e5      	b.n	8007c3e <__kernel_rem_pio2+0x3ce>
 8007c72:	f1cb 0000 	rsb	r0, fp, #0
 8007c76:	ec47 6b10 	vmov	d0, r6, r7
 8007c7a:	f7ff fd3d 	bl	80076f8 <scalbn>
 8007c7e:	ec55 4b10 	vmov	r4, r5, d0
 8007c82:	4b9d      	ldr	r3, [pc, #628]	@ (8007ef8 <__kernel_rem_pio2+0x688>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	4620      	mov	r0, r4
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7f8 feff 	bl	8000a8c <__aeabi_dcmpge>
 8007c8e:	b300      	cbz	r0, 8007cd2 <__kernel_rem_pio2+0x462>
 8007c90:	4b9a      	ldr	r3, [pc, #616]	@ (8007efc <__kernel_rem_pio2+0x68c>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	4620      	mov	r0, r4
 8007c96:	4629      	mov	r1, r5
 8007c98:	f7f8 fc72 	bl	8000580 <__aeabi_dmul>
 8007c9c:	f7f8 ff20 	bl	8000ae0 <__aeabi_d2iz>
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	f7f8 fc03 	bl	80004ac <__aeabi_i2d>
 8007ca6:	4b94      	ldr	r3, [pc, #592]	@ (8007ef8 <__kernel_rem_pio2+0x688>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f7f8 fc69 	bl	8000580 <__aeabi_dmul>
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f7f8 faab 	bl	8000210 <__aeabi_dsub>
 8007cba:	f7f8 ff11 	bl	8000ae0 <__aeabi_d2iz>
 8007cbe:	ab0c      	add	r3, sp, #48	@ 0x30
 8007cc0:	f10b 0b18 	add.w	fp, fp, #24
 8007cc4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007cc8:	f108 0801 	add.w	r8, r8, #1
 8007ccc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007cd0:	e722      	b.n	8007b18 <__kernel_rem_pio2+0x2a8>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	f7f8 ff03 	bl	8000ae0 <__aeabi_d2iz>
 8007cda:	ab0c      	add	r3, sp, #48	@ 0x30
 8007cdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007ce0:	e71a      	b.n	8007b18 <__kernel_rem_pio2+0x2a8>
 8007ce2:	ab0c      	add	r3, sp, #48	@ 0x30
 8007ce4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007ce8:	f7f8 fbe0 	bl	80004ac <__aeabi_i2d>
 8007cec:	4622      	mov	r2, r4
 8007cee:	462b      	mov	r3, r5
 8007cf0:	f7f8 fc46 	bl	8000580 <__aeabi_dmul>
 8007cf4:	4652      	mov	r2, sl
 8007cf6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007cfa:	465b      	mov	r3, fp
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	4629      	mov	r1, r5
 8007d00:	f7f8 fc3e 	bl	8000580 <__aeabi_dmul>
 8007d04:	3e01      	subs	r6, #1
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	e718      	b.n	8007b3e <__kernel_rem_pio2+0x2ce>
 8007d0c:	9906      	ldr	r1, [sp, #24]
 8007d0e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007d12:	9106      	str	r1, [sp, #24]
 8007d14:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007d18:	f7f8 fc32 	bl	8000580 <__aeabi_dmul>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4650      	mov	r0, sl
 8007d22:	4659      	mov	r1, fp
 8007d24:	f7f8 fa76 	bl	8000214 <__adddf3>
 8007d28:	3601      	adds	r6, #1
 8007d2a:	4682      	mov	sl, r0
 8007d2c:	468b      	mov	fp, r1
 8007d2e:	9b00      	ldr	r3, [sp, #0]
 8007d30:	429e      	cmp	r6, r3
 8007d32:	dc01      	bgt.n	8007d38 <__kernel_rem_pio2+0x4c8>
 8007d34:	42b5      	cmp	r5, r6
 8007d36:	dae9      	bge.n	8007d0c <__kernel_rem_pio2+0x49c>
 8007d38:	ab48      	add	r3, sp, #288	@ 0x120
 8007d3a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d3e:	e9c5 ab00 	strd	sl, fp, [r5]
 8007d42:	3c01      	subs	r4, #1
 8007d44:	e6ff      	b.n	8007b46 <__kernel_rem_pio2+0x2d6>
 8007d46:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	dc0b      	bgt.n	8007d64 <__kernel_rem_pio2+0x4f4>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc39      	bgt.n	8007dc4 <__kernel_rem_pio2+0x554>
 8007d50:	d05d      	beq.n	8007e0e <__kernel_rem_pio2+0x59e>
 8007d52:	9b02      	ldr	r3, [sp, #8]
 8007d54:	f003 0007 	and.w	r0, r3, #7
 8007d58:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007d5c:	ecbd 8b02 	vpop	{d8}
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d1f3      	bne.n	8007d52 <__kernel_rem_pio2+0x4e2>
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d70:	eb0d 0403 	add.w	r4, sp, r3
 8007d74:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007d78:	4625      	mov	r5, r4
 8007d7a:	46c2      	mov	sl, r8
 8007d7c:	f1ba 0f00 	cmp.w	sl, #0
 8007d80:	f1a5 0508 	sub.w	r5, r5, #8
 8007d84:	dc6b      	bgt.n	8007e5e <__kernel_rem_pio2+0x5ee>
 8007d86:	4645      	mov	r5, r8
 8007d88:	2d01      	cmp	r5, #1
 8007d8a:	f1a4 0408 	sub.w	r4, r4, #8
 8007d8e:	f300 8087 	bgt.w	8007ea0 <__kernel_rem_pio2+0x630>
 8007d92:	9c05      	ldr	r4, [sp, #20]
 8007d94:	ab48      	add	r3, sp, #288	@ 0x120
 8007d96:	441c      	add	r4, r3
 8007d98:	2000      	movs	r0, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	f1b8 0f01 	cmp.w	r8, #1
 8007da0:	f300 809c 	bgt.w	8007edc <__kernel_rem_pio2+0x66c>
 8007da4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007da8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007dac:	f1b9 0f00 	cmp.w	r9, #0
 8007db0:	f040 80a6 	bne.w	8007f00 <__kernel_rem_pio2+0x690>
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	e9c3 7800 	strd	r7, r8, [r3]
 8007dba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007dbe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007dc2:	e7c6      	b.n	8007d52 <__kernel_rem_pio2+0x4e2>
 8007dc4:	9d05      	ldr	r5, [sp, #20]
 8007dc6:	ab48      	add	r3, sp, #288	@ 0x120
 8007dc8:	441d      	add	r5, r3
 8007dca:	4644      	mov	r4, r8
 8007dcc:	2000      	movs	r0, #0
 8007dce:	2100      	movs	r1, #0
 8007dd0:	2c00      	cmp	r4, #0
 8007dd2:	da35      	bge.n	8007e40 <__kernel_rem_pio2+0x5d0>
 8007dd4:	f1b9 0f00 	cmp.w	r9, #0
 8007dd8:	d038      	beq.n	8007e4c <__kernel_rem_pio2+0x5dc>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007de0:	9c04      	ldr	r4, [sp, #16]
 8007de2:	e9c4 2300 	strd	r2, r3, [r4]
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007dee:	f7f8 fa0f 	bl	8000210 <__aeabi_dsub>
 8007df2:	ad4a      	add	r5, sp, #296	@ 0x128
 8007df4:	2401      	movs	r4, #1
 8007df6:	45a0      	cmp	r8, r4
 8007df8:	da2b      	bge.n	8007e52 <__kernel_rem_pio2+0x5e2>
 8007dfa:	f1b9 0f00 	cmp.w	r9, #0
 8007dfe:	d002      	beq.n	8007e06 <__kernel_rem_pio2+0x596>
 8007e00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e04:	4619      	mov	r1, r3
 8007e06:	9b04      	ldr	r3, [sp, #16]
 8007e08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e0c:	e7a1      	b.n	8007d52 <__kernel_rem_pio2+0x4e2>
 8007e0e:	9c05      	ldr	r4, [sp, #20]
 8007e10:	ab48      	add	r3, sp, #288	@ 0x120
 8007e12:	441c      	add	r4, r3
 8007e14:	2000      	movs	r0, #0
 8007e16:	2100      	movs	r1, #0
 8007e18:	f1b8 0f00 	cmp.w	r8, #0
 8007e1c:	da09      	bge.n	8007e32 <__kernel_rem_pio2+0x5c2>
 8007e1e:	f1b9 0f00 	cmp.w	r9, #0
 8007e22:	d002      	beq.n	8007e2a <__kernel_rem_pio2+0x5ba>
 8007e24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e28:	4619      	mov	r1, r3
 8007e2a:	9b04      	ldr	r3, [sp, #16]
 8007e2c:	e9c3 0100 	strd	r0, r1, [r3]
 8007e30:	e78f      	b.n	8007d52 <__kernel_rem_pio2+0x4e2>
 8007e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e36:	f7f8 f9ed 	bl	8000214 <__adddf3>
 8007e3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e3e:	e7eb      	b.n	8007e18 <__kernel_rem_pio2+0x5a8>
 8007e40:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007e44:	f7f8 f9e6 	bl	8000214 <__adddf3>
 8007e48:	3c01      	subs	r4, #1
 8007e4a:	e7c1      	b.n	8007dd0 <__kernel_rem_pio2+0x560>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	e7c6      	b.n	8007de0 <__kernel_rem_pio2+0x570>
 8007e52:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007e56:	f7f8 f9dd 	bl	8000214 <__adddf3>
 8007e5a:	3401      	adds	r4, #1
 8007e5c:	e7cb      	b.n	8007df6 <__kernel_rem_pio2+0x586>
 8007e5e:	ed95 7b00 	vldr	d7, [r5]
 8007e62:	ed8d 7b00 	vstr	d7, [sp]
 8007e66:	ed95 7b02 	vldr	d7, [r5, #8]
 8007e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e6e:	ec53 2b17 	vmov	r2, r3, d7
 8007e72:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e76:	f7f8 f9cd 	bl	8000214 <__adddf3>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460f      	mov	r7, r1
 8007e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e86:	f7f8 f9c3 	bl	8000210 <__aeabi_dsub>
 8007e8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e8e:	f7f8 f9c1 	bl	8000214 <__adddf3>
 8007e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e96:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007e9a:	e9c5 6700 	strd	r6, r7, [r5]
 8007e9e:	e76d      	b.n	8007d7c <__kernel_rem_pio2+0x50c>
 8007ea0:	ed94 7b00 	vldr	d7, [r4]
 8007ea4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007ea8:	ec51 0b17 	vmov	r0, r1, d7
 8007eac:	4652      	mov	r2, sl
 8007eae:	465b      	mov	r3, fp
 8007eb0:	ed8d 7b00 	vstr	d7, [sp]
 8007eb4:	f7f8 f9ae 	bl	8000214 <__adddf3>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460f      	mov	r7, r1
 8007ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ec4:	f7f8 f9a4 	bl	8000210 <__aeabi_dsub>
 8007ec8:	4652      	mov	r2, sl
 8007eca:	465b      	mov	r3, fp
 8007ecc:	f7f8 f9a2 	bl	8000214 <__adddf3>
 8007ed0:	3d01      	subs	r5, #1
 8007ed2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ed6:	e9c4 6700 	strd	r6, r7, [r4]
 8007eda:	e755      	b.n	8007d88 <__kernel_rem_pio2+0x518>
 8007edc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ee0:	f7f8 f998 	bl	8000214 <__adddf3>
 8007ee4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ee8:	e758      	b.n	8007d9c <__kernel_rem_pio2+0x52c>
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
	...
 8007ef8:	41700000 	.word	0x41700000
 8007efc:	3e700000 	.word	0x3e700000
 8007f00:	9b04      	ldr	r3, [sp, #16]
 8007f02:	9a04      	ldr	r2, [sp, #16]
 8007f04:	601f      	str	r7, [r3, #0]
 8007f06:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007f0a:	605c      	str	r4, [r3, #4]
 8007f0c:	609d      	str	r5, [r3, #8]
 8007f0e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f12:	60d3      	str	r3, [r2, #12]
 8007f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f18:	6110      	str	r0, [r2, #16]
 8007f1a:	6153      	str	r3, [r2, #20]
 8007f1c:	e719      	b.n	8007d52 <__kernel_rem_pio2+0x4e2>
 8007f1e:	bf00      	nop

08007f20 <floor>:
 8007f20:	ec51 0b10 	vmov	r0, r1, d0
 8007f24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007f30:	2e13      	cmp	r6, #19
 8007f32:	460c      	mov	r4, r1
 8007f34:	4605      	mov	r5, r0
 8007f36:	4680      	mov	r8, r0
 8007f38:	dc34      	bgt.n	8007fa4 <floor+0x84>
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	da17      	bge.n	8007f6e <floor+0x4e>
 8007f3e:	a332      	add	r3, pc, #200	@ (adr r3, 8008008 <floor+0xe8>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 f966 	bl	8000214 <__adddf3>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f7f8 fda8 	bl	8000aa0 <__aeabi_dcmpgt>
 8007f50:	b150      	cbz	r0, 8007f68 <floor+0x48>
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	da55      	bge.n	8008002 <floor+0xe2>
 8007f56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007f5a:	432c      	orrs	r4, r5
 8007f5c:	2500      	movs	r5, #0
 8007f5e:	42ac      	cmp	r4, r5
 8007f60:	4c2b      	ldr	r4, [pc, #172]	@ (8008010 <floor+0xf0>)
 8007f62:	bf08      	it	eq
 8007f64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007f68:	4621      	mov	r1, r4
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	e023      	b.n	8007fb6 <floor+0x96>
 8007f6e:	4f29      	ldr	r7, [pc, #164]	@ (8008014 <floor+0xf4>)
 8007f70:	4137      	asrs	r7, r6
 8007f72:	ea01 0307 	and.w	r3, r1, r7
 8007f76:	4303      	orrs	r3, r0
 8007f78:	d01d      	beq.n	8007fb6 <floor+0x96>
 8007f7a:	a323      	add	r3, pc, #140	@ (adr r3, 8008008 <floor+0xe8>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 f948 	bl	8000214 <__adddf3>
 8007f84:	2200      	movs	r2, #0
 8007f86:	2300      	movs	r3, #0
 8007f88:	f7f8 fd8a 	bl	8000aa0 <__aeabi_dcmpgt>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d0eb      	beq.n	8007f68 <floor+0x48>
 8007f90:	2c00      	cmp	r4, #0
 8007f92:	bfbe      	ittt	lt
 8007f94:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007f98:	4133      	asrlt	r3, r6
 8007f9a:	18e4      	addlt	r4, r4, r3
 8007f9c:	ea24 0407 	bic.w	r4, r4, r7
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	e7e1      	b.n	8007f68 <floor+0x48>
 8007fa4:	2e33      	cmp	r6, #51	@ 0x33
 8007fa6:	dd0a      	ble.n	8007fbe <floor+0x9e>
 8007fa8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007fac:	d103      	bne.n	8007fb6 <floor+0x96>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	f7f8 f92f 	bl	8000214 <__adddf3>
 8007fb6:	ec41 0b10 	vmov	d0, r0, r1
 8007fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007fc2:	f04f 37ff 	mov.w	r7, #4294967295
 8007fc6:	40df      	lsrs	r7, r3
 8007fc8:	4207      	tst	r7, r0
 8007fca:	d0f4      	beq.n	8007fb6 <floor+0x96>
 8007fcc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008008 <floor+0xe8>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f7f8 f91f 	bl	8000214 <__adddf3>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f7f8 fd61 	bl	8000aa0 <__aeabi_dcmpgt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d0c2      	beq.n	8007f68 <floor+0x48>
 8007fe2:	2c00      	cmp	r4, #0
 8007fe4:	da0a      	bge.n	8007ffc <floor+0xdc>
 8007fe6:	2e14      	cmp	r6, #20
 8007fe8:	d101      	bne.n	8007fee <floor+0xce>
 8007fea:	3401      	adds	r4, #1
 8007fec:	e006      	b.n	8007ffc <floor+0xdc>
 8007fee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	40b3      	lsls	r3, r6
 8007ff6:	441d      	add	r5, r3
 8007ff8:	4545      	cmp	r5, r8
 8007ffa:	d3f6      	bcc.n	8007fea <floor+0xca>
 8007ffc:	ea25 0507 	bic.w	r5, r5, r7
 8008000:	e7b2      	b.n	8007f68 <floor+0x48>
 8008002:	2500      	movs	r5, #0
 8008004:	462c      	mov	r4, r5
 8008006:	e7af      	b.n	8007f68 <floor+0x48>
 8008008:	8800759c 	.word	0x8800759c
 800800c:	7e37e43c 	.word	0x7e37e43c
 8008010:	bff00000 	.word	0xbff00000
 8008014:	000fffff 	.word	0x000fffff

08008018 <_init>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr

08008024 <_fini>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr
